
//-----------------------------------------------------------------------------
/** @file RichZeroSuppData_V2.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichZeroSuppData
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// local
#include "RichZeroSuppData_V2.h"

// RichKernel
#include "RichKernel/RichMap.h"

//-----------------------------------------------------------------------------

namespace Rich
{
  namespace DAQ
  {

    namespace RichZeroSuppDataV2
    {

      template< class Version, class Header, class Footer >
      void RichZeroSuppData<Version,Header,Footer>::buildData( const LHCb::RichSmartID::Vector & pdHits )
      {

        // temporary data map
        typedef Rich::Map< ShortType, ShortType > DataMap;
        DataMap dataM;

        // Loop over digits
        for ( LHCb::RichSmartID::Vector::const_iterator iID = pdHits.begin();
              iID != pdHits.end(); ++iID )
        {

          // Get bit and address
          const ShortType bit     =
            RichZSPacked_V1::RichZSPacked::bitFromCol( (*iID).pixelCol() );
          const ShortType address =
            RichZSPacked_V1::RichZSPacked::addressFromRowCol( (*iID).pixelRow(), (*iID).pixelCol() );

          // Set the correct bit on for this address
          this->setBit( dataM[address], bit );

        }

        // How many words ?
        const ShortType nWords = dataM.size()/2 + dataM.size()%2;
        if ( nWords > MaxDataSize ) { m_tooBig = true; return; }

        // Loop over address / bitfield pairs and fill to data bank
        DataMap::const_iterator iD = dataM.begin();
        while ( iD != dataM.end() )
        {
          const ShortType address0( (*iD).first ), field0( (*iD).second );
          ShortType address1(0), field1(0);
          ++iD;
          if ( iD != dataM.end() )
          {
            address1 = (*iD).first;
            field1   = (*iD).second;
            ++iD;
          }

          // Add these to the data block
          this->addData( RichZSPacked_V1::RichZSPacked( address0, field0, address1, field1 ) );

        }

      }

      template< class Version, class Header, class Footer >
      ShortType RichZeroSuppData<Version,Header,Footer>::fillRichSmartIDs ( LHCb::RichSmartID::Vector & ids,
                                                                            const LHCb::RichSmartID hpdID ) const
      {

        // For this implementation the header nEightBitBlocksPlusOne word contains the number of hits
        const ShortType digitCount = this->header().nEightBitBlocksPlusOne();

        // rough guess at number of hits
        ids.reserve( digitCount * 4 );

        // Loop over data fields
        ShortType nDigitsMade = 0;
        for ( ShortType iData = 0; iData < this->dataSize(); ++iData )
        {

          // Get packed data data
          const RichZSPacked_V1::RichZSPacked zsData( this->data()[iData] );

          // Get first address and bit field
          {
            const ShortType address = zsData.address0();
            const ShortType bits    = zsData.bitField0();
            for ( ShortType iB = 0; iB < RichZSPacked_V1::RichZSPackedCode::BitsField; ++iB )
            {
              if ( this->isBitOn(bits,iB) )
              {
                ids.push_back( LHCb::RichSmartID( hpdID.rich(), hpdID.panel(),
                                                  hpdID.pdNumInCol(), hpdID.pdCol(),
                                                  RichZSPacked_V1::RichZSPacked::rowFromAddress(address),
                                                  RichZSPacked_V1::RichZSPacked::colFromAddressAndBit(address,iB) ) );
                ++nDigitsMade;
                if ( nDigitsMade == digitCount ) break;
              }
            }
          }

          // Get second address and bit field
          {
            const ShortType address = zsData.address1();
            const ShortType bits    = zsData.bitField1();
            for ( ShortType iB = 0; iB < RichZSPacked_V1::RichZSPackedCode::BitsField; ++iB )
            {
              if ( this->isBitOn(bits,iB) )
              {
                ids.push_back( LHCb::RichSmartID( hpdID.rich(), hpdID.panel(),
                                                  hpdID.pdNumInCol(), hpdID.pdCol(),
                                                  RichZSPacked_V1::RichZSPacked::rowFromAddress(address),
                                                  RichZSPacked_V1::RichZSPacked::colFromAddressAndBit(address,iB) ) );
                ++nDigitsMade;
                if ( nDigitsMade == digitCount ) break;
              }
            }
          }

        }

        return nDigitsMade;
      }

      template< class Version, class Header, class Footer >
      ShortType RichZeroSuppData<Version,Header,Footer>::hitCount() const
      {
        // For this implementation the header nEightBitBlocksPlusOne word contains the number of hits
        return this->header().nEightBitBlocksPlusOne();
      }

    } // V2 namespace

  }
}
