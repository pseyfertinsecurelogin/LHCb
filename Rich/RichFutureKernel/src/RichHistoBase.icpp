/*****************************************************************************\
* (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration      *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/

//-----------------------------------------------------------------------------
/** @file RichHistoBase.icpp
 *
 *  Implementation file for RICH base class : Rich::HistoBase
 *
 *  @author Chris Jones   Christopher.Rob.Jones@cern.ch
 *  @date   2009-07-27
 */
//-----------------------------------------------------------------------------

#pragma once

// local
#include "RichFutureKernel/RichHistoBase.h"

// Utils
#include "RichUtils/RichException.h"

// GaudiUtils
#include "GaudiUtils/HistoLabels.h"
using namespace Gaudi::Utils::Histos;

// Base class methods
#include "RichCommonBase.icpp"

//=============================================================================
// Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Future::HistoBase<PBASE>::initialize() {
  // Execute the base class initialize
  const auto sc = CommonBase<PBASE>::initialize();

  return sc;
}
//=============================================================================

//=============================================================================
// System Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Future::HistoBase<PBASE>::sysInitialize() {
  // run base clase method
  auto sc = CommonBase<PBASE>::sysInitialize();
  if ( sc ) {
    // as last thing book any histos (only once)
    if ( !m_histosAreBooked ) {
      try {
        sc                = prebookHistograms();
        m_histosAreBooked = true;
      } catch ( const Rich::Exception& excp ) {
        this->error() << "Problem prebooking histograms : Error = '" << excp.message() << "'" << endmsg;
        sc = StatusCode::FAILURE;
      }
    }
  }
  // return
  return sc;
}
//=============================================================================

//=============================================================================
// Finalisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Future::HistoBase<PBASE>::finalize() {
  // Do stuff ...

  // Finalise base class and return
  return CommonBase<PBASE>::finalize();
}

//=============================================================================

template <class PBASE>
StatusCode Rich::Future::HistoBase<PBASE>::prebookHistograms() {
  // Default implementation does nothing
  return StatusCode::SUCCESS;
}

//=============================================================================

namespace details {
  template <typename MAP, typename ID>
  decltype( auto ) findHistoImpl( const MAP& hmap, const ID& id ) {
    const auto& map = hmap.getmap( id.packedData() );
    const auto  iH  = map.find( id.id() );
    if ( UNLIKELY( iH == map.end() ) ) { //
      throw Rich::Exception( "Cannot find pre-booked histogram '" + id.fullid() + "'" );
    }
    return iH->second;
  }
} // namespace details

template <class PBASE>
AIDA::IHistogram1D* //
Rich::Future::HistoBase<PBASE>::richHisto1D( const Rich::HistogramID& id ) const {
  return details::findHistoImpl( m_1dhmap, id );
}

template <class PBASE>
AIDA::IHistogram2D* //
Rich::Future::HistoBase<PBASE>::richHisto2D( const Rich::HistogramID& id ) const {
  return details::findHistoImpl( m_2dhmap, id );
}

template <class PBASE>
AIDA::IProfile1D* //
Rich::Future::HistoBase<PBASE>::richProfile1D( const Rich::HistogramID& id ) const {
  return details::findHistoImpl( m_1dpmap, id );
}

template <class PBASE>
AIDA::IProfile2D* //
Rich::Future::HistoBase<PBASE>::richProfile2D( const Rich::HistogramID& id ) const {
  return details::findHistoImpl( m_2dpmap, id );
}

//=============================================================================

namespace details {
  template <typename HISTO, typename LABEL>
  void axisLabelsImpl( HISTO*       h,          //
                       const LABEL& xAxisLabel, //
                       const LABEL& yAxisLabel, //
                       const LABEL& zAxisLabel = "" ) {
    if ( UNLIKELY( !zAxisLabel.empty() ) ) {
      // Bug in GaudiUtils (to be fixed) with no way to set z axis. Ignore for the moment
      //_ri_debug << "Setting Z axis label currently not supported : " << zAxisLabel << endmsg;
    }
    // set the axis labels
    if ( UNLIKELY( !xAxisLabel.empty() || !yAxisLabel.empty() ) ) {
      if ( UNLIKELY( !setAxisLabels( h, xAxisLabel, yAxisLabel ) ) ) {
        throw Rich::Exception( "Problem Setting Histogram Axis Labels" );
      }
    }
  }
  template <typename HISTO, typename LABELS>
  void binLabelsImpl( HISTO*        h, //
                      const LABELS& binLabels ) {
    if ( UNLIKELY( !binLabels.empty() ) ) {
      if ( UNLIKELY( !setBinLabels( h, binLabels ) ) ) {
        throw Rich::Exception( "Problem Setting Histogram Bin Labels" );
      }
    }
  }
  template <typename HISTO, typename LABELS>
  void binLabelsImpl( HISTO*        h,          //
                      const LABELS& xBinLabels, //
                      const LABELS& yBinLabels ) {
    if ( UNLIKELY( !xBinLabels.empty() || !yBinLabels.empty() ) ) {
      if ( UNLIKELY( !setBinLabels( h, xBinLabels, yBinLabels ) ) ) {
        throw Rich::Exception( "Problem Setting Histogram Bin Labels" );
      }
    }
  }
} // namespace details

template <class PBASE>
AIDA::IHistogram1D*                                                               //
Rich::Future::HistoBase<PBASE>::richHisto1D( const Rich::HistogramID& id,         //
                                             const std::string&       title,      //
                                             const double             low,        //
                                             const double             high,       //
                                             const unsigned int       bins,       //
                                             const AxisLabel&         xAxisLabel, //
                                             const AxisLabel&         yAxisLabel, //
                                             const BinLabels&         binLabels ) {
  // Already been booked ?
  auto*& h = m_1dhmap.getmap( id.packedData() )[id.id()];
  if ( LIKELY( !h ) ) {
    // Book the histo
    h = PBASE::book1D( id.fullid(), id.fullTitle( title ), low, high, bins );
    // set the labels
    details::axisLabelsImpl( h, xAxisLabel, yAxisLabel );
    details::binLabelsImpl( h, binLabels );
  }
  // return the histo
  return h;
}

template <class PBASE>
AIDA::IHistogram2D*                                                               //
Rich::Future::HistoBase<PBASE>::richHisto2D( const Rich::HistogramID& id,         //
                                             const std::string&       title,      //
                                             const double             lowX,       //
                                             const double             highX,      //
                                             const unsigned int       binsX,      //
                                             const double             lowY,       //
                                             const double             highY,      //
                                             const unsigned int       binsY,      //
                                             const AxisLabel&         xAxisLabel, //
                                             const AxisLabel&         yAxisLabel, //
                                             const AxisLabel&         zAxisLabel, //
                                             const BinLabels&         xBinLabels, //
                                             const BinLabels&         yBinLabels ) {
  // Already been booked ?
  auto*& h = m_2dhmap.getmap( id.packedData() )[id.id()];
  if ( LIKELY( !h ) ) {
    // Book the histo
    h = PBASE::book2D( id.fullid(), id.fullTitle( title ), lowX, highX, binsX, lowY, highY, binsY );
    // set the labels
    details::axisLabelsImpl( h, xAxisLabel, yAxisLabel, zAxisLabel );
    details::binLabelsImpl( h, xBinLabels, yBinLabels );
  }
  // return the histo
  return h;
}

template <class PBASE>
AIDA::IProfile1D*                                                                   //
Rich::Future::HistoBase<PBASE>::richProfile1D( const Rich::HistogramID& id,         //
                                               const std::string&       title,      //
                                               const double             low,        //
                                               const double             high,       //
                                               const unsigned int       bins,       //
                                               const AxisLabel&         xAxisLabel, //
                                               const AxisLabel&         yAxisLabel, //
                                               const BinLabels&         binLabels ) {
  // Already been booked ?
  auto*& h = m_1dpmap.getmap( id.packedData() )[id.id()];
  if ( LIKELY( !h ) ) {
    // Book the histo
    h = PBASE::bookProfile1D( id.fullid(), id.fullTitle( title ), low, high, bins );
    // set the labels
    details::axisLabelsImpl( h, xAxisLabel, yAxisLabel );
    details::binLabelsImpl( h, binLabels );
  }
  // return the histo
  return h;
}

template <class PBASE>
AIDA::IProfile2D*                                                                   //
Rich::Future::HistoBase<PBASE>::richProfile2D( const Rich::HistogramID& id,         //
                                               const std::string&       title,      //
                                               const double             lowX,       //
                                               const double             highX,      //
                                               const unsigned int       binsX,      //
                                               const double             lowY,       //
                                               const double             highY,      //
                                               const unsigned int       binsY,      //
                                               const AxisLabel&         xAxisLabel, //
                                               const AxisLabel&         yAxisLabel, //
                                               const AxisLabel&         zAxisLabel, //
                                               const BinLabels&         xBinLabels, //
                                               const BinLabels&         yBinLabels ) {
  // Already been booked ?
  auto*& h = m_2dpmap.getmap( id.packedData() )[id.id()];
  if ( LIKELY( !h ) ) {
    // Book the histo
    h = PBASE::bookProfile2D( id.fullid(), id.fullTitle( title ), lowX, highX, binsX, lowY, highY, binsY );
    // set the labels
    details::axisLabelsImpl( h, xAxisLabel, yAxisLabel, zAxisLabel );
    details::binLabelsImpl( h, xBinLabels, yBinLabels );
  }
  // return the histo
  return h;
}

//=============================================================================
