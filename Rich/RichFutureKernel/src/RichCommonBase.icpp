/*****************************************************************************\
* (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration      *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/

//-----------------------------------------------------------------------------
/** @file RichCommonBase.icpp
 *
 *  Implementation file for RICH base class : Rich::CommonBase
 *
 *  @author Chris Jones    Christopher.Rob.Jones@cern.ch
 *  @date   2005-08-27
 */
//-----------------------------------------------------------------------------

#pragma once

// STL
#include <algorithm>
#include <sstream>
#include <string>

// local
#include "RichFutureKernel/RichCommonBase.h"

// Gaudi
#include "GaudiKernel/IJobOptionsSvc.h"

//=============================================================================
// Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Future::CommonBase<PBASE>::initialize() {

  // Execute the base class initialize
  const auto sc = PBASE::initialize();
  if ( !sc ) {
    this->error() << "Failed to initialise Gaudi Base class" << endmsg;
    return sc;
  }

  // Printout from initialize
  _ri_debug << "Initialize" << endmsg;

  return sc;
}
//=============================================================================

//=============================================================================
// Finalisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Future::CommonBase<PBASE>::finalize() {

  // Printout from finalization
  _ri_debug << "Finalize" << endmsg;

  // Finalise base class and return
  return PBASE::finalize();
}
//=============================================================================
