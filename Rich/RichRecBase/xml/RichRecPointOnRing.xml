<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
<package name="RichRecBase">

<!-- **************************************************************************
  * $Id: RichRecPointOnRing.xml,v 1.4 2008-02-15 10:08:47 jonrob Exp $
  *****************************************************************************
  * XML-description of RichRecPointOnRing class                               *
  * author: Chris Jones   Christopher.Rob.Jones@cern.ch                       *
  * date:   2006/08/03                                                        *
  ************************************************************************* -->


<class 
        name        = "RichRecPointOnRing" 
        author      = "Chris Jones   (Christopher.Rob.Jones@cern.ch)" 
        desc        = "Ultility class to represent a point on a Cherenkov Ring" 
        virtual     = "FALSE" >

        <import name="GaudiKernel/Point3DTypes.h"/>
        <import name="Kernel/RichSmartID.h"/>
        <import name="RichDet/DeRichSphMirror.h"/>

        <enum name="Acceptance" desc="Describes the how this position lies in the RICH acceptance" access="PUBLIC" >
          <enumval name="UndefinedAcceptance" value="0" desc="The acceptance is undefined"/>
          <enumval name="OutsideHPDPanel"     value="1" desc="Point is outside the general HPD panel acceptance"/>
          <enumval name="InHPDPanel"          value="2" desc="Point is inside the acceptance of the HPD panels"/>
          <enumval name="InHPDTube"           value="3" desc="Point is inside the acceptance of singe HPD tube"/>
        </enum>

        <constructor 
                desc     = "Constructor from global position, location position, acceptance flag and RichSmartID" 
                initList = "m_globalPosition(gPos), m_localPosition(lPos), m_smartID(id), m_acceptance(acc), m_primaryMirror(const_cast&lt;DeRichSphMirror*&gt;(primMirr)), m_secondaryMirror(const_cast&lt;DeRichSphMirror*&gt;(secMirr))">
                <arg const="TRUE"                  name="gPos" type="Gaudi::XYZPoint"/>
                <arg const="TRUE"                  name="lPos" type="Gaudi::XYZPoint"/>
                <arg const="TRUE"  inout="BYVALUE" name="id = LHCb::RichSmartID()" type="LHCb::RichSmartID"/>
                <arg const="TRUE"  inout="BYVALUE" name="acc = LHCb::RichRecPointOnRing::UndefinedAcceptance"  type="LHCb::RichRecPointOnRing::Acceptance"/>
                <arg const="TRUE"                  name="primMirr = NULL" type="DeRichSphMirror*"/>
                <arg const="TRUE"                  name="secMirr = NULL"  type="DeRichSphMirror*"/>
                <code>
                </code>
        </constructor>

        <attribute 
                desc = "Position on the ring in global coordinates" 
                name = "globalPosition" 
                type = "Gaudi::XYZPoint"
                init = "0,0,0"
        />

        <attribute 
                desc = "Position on the ring in local coordinates" 
                name = "localPosition" 
                type = "Gaudi::XYZPoint"
                init = "0,0,0"
        />  

        <attribute 
                desc = "RichSmartID identifying the HPD or pixel this point is in, if known" 
                name = "smartID" 
                type = "LHCb::RichSmartID"
        />  

        <attribute 
                desc = "The RICH acceptance state of the point" 
                name = "acceptance" 
                type = "LHCb::RichRecPointOnRing::Acceptance"
                init = "LHCb::RichRecPointOnRing::UndefinedAcceptance"
        />

	<typedef 
		desc   = "typedef for std::vector of RichRecPointOnRing" 
		access = "PUBLIC" 
		def    = "Vector" 
		type   = "std::vector&lt;RichRecPointOnRing&gt;"
	/>

        <attribute 
                desc = "Pointer to the associated DeRichSphMirror object for the primary mirror" 
                name = "primaryMirror" 
                type = "DeRichSphMirror*"
                init = "NULL"
        />

        <attribute 
                desc = "Pointer to the associated DeRichSphMirror object for the secondary mirror" 
                name = "secondaryMirror" 
                type = "DeRichSphMirror*"
                init = "NULL"
        />
   
</class>

</package>
</gdd>
