
//-----------------------------------------------------------------------------
/** @file RichCommonBase.icpp
 *
 *  Implementation file for RICH base class : Rich::CommonBase
 *
 *  @author Chris Jones    Christopher.Rob.Jones@cern.ch
 *  @date   2005-08-27
 */
//-----------------------------------------------------------------------------

// STL
#include <sstream>
#include <string>
#include <algorithm>

// local
#include "RichKernel/RichCommonBase.h"

// Gaudi
#include "GaudiKernel/IJobOptionsSvc.h"

// Disable warning on windows
#ifdef _WIN32
#pragma warning ( disable:4661 ) // incomplete explicit templates
#endif

//=============================================================================
// Constructor initialisation
//=============================================================================
template <class PBASE>
void Rich::CommonBase<PBASE>::initRichCommonConstructor()
{
  m_toolReg = NULL;
  m_jos     = NULL;
  m_regName = ( this->context().empty() ?
                "RichToolRegistry" : this->context()+"_RichToolRegistry" );
  m_deRichTool = NULL;
  this->declareProperty( "ToolRegistryName", m_regName, "Tool Registry Name" );
}

//=============================================================================
// Destructor
//=============================================================================
template <class PBASE>
Rich::CommonBase<PBASE>::~CommonBase() {}

//=============================================================================
// Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::CommonBase<PBASE>::initialize()
{
  // Execute the base class initialize
  const StatusCode sc = PBASE::initialize();
  if ( sc.isFailure() )
  { return this -> Error( "Failed to initialise Gaudi Base class", sc ); }

  // Printout from initialize
  if ( this -> msgLevel(MSG::DEBUG) )
    this -> debug() << "Initialize" << endmsg;

  return sc;
}
//=============================================================================

//=============================================================================
// Finalisation
//=============================================================================
template <class PBASE>
StatusCode Rich::CommonBase<PBASE>::finalize()
{
  // Printout from finalization
  if ( this -> msgLevel(MSG::DEBUG) )
    this -> debug() << "Finalize" << endmsg;

  // Finalise base class and return
  return PBASE::finalize();
}
//=============================================================================

//=============================================================================
// Access job options service
//=============================================================================
template <class PBASE>
IJobOptionsSvc* Rich::CommonBase<PBASE>::joSvc() const
{
  if (!m_jos)
  { m_jos = this -> template svc<IJobOptionsSvc>( "JobOptionsSvc" ); }
  return m_jos;
}
//=============================================================================

//=============================================================================
// set properties
//=============================================================================
template < class PBASE        >
template < class PROPERTYTYPE >
bool Rich::CommonBase<PBASE>::my_setToolProperty( const std::string & name,
                                                  const std::string & property ) const
{
  bool sc = true;

  if ( ! this->joSvc() )
  {
    this -> Error( "Null Job Options Service !!" ).ignore();
    sc = false;
  }
  else
  {

    // full tool name
    const std::string fullname = "ToolSvc." + name;

    // get properties for this tool name
    const PROPERTYTYPE * test_sp = this->my_getProperty<PROPERTYTYPE>( fullname, property );

    // If Context not set, set it
    if ( !test_sp )
    {

      // do we have a tool registry ?
      if ( ! this->toolRegistry() )
      {
        this -> Error( "Null RichToolRegistry !!" ).ignore();
        sc = false;
      }
      else
      {

        // get Tool registry OutputLevel
        const PROPERTYTYPE * ts_sp
          = this->my_getProperty<PROPERTYTYPE>( this->toolRegistry()->name(), property );
        if ( ts_sp )
        {
          if ( this -> msgLevel(MSG::VERBOSE) )
          { this -> verbose() << "Setting " << *ts_sp << " for " << fullname << endmsg; }
          sc = this->joSvc()->addPropertyToCatalogue(fullname,*ts_sp).isSuccess();
          if ( !sc ) { this -> Error( "Error setting "+property+" for " + fullname ).ignore(); }
        }
        else if ( this -> msgLevel(MSG::DEBUG) )
        {
          this -> debug() << this->toolRegistry()->name() << " has no " << property << endmsg;
        }

      } // tool registry OK

    } // tool already has property

  } // JO service OK

  return sc;
}

//=============================================================================
// get properties
//=============================================================================
template < class PBASE        >
template < class PROPERTYTYPE >
const PROPERTYTYPE *
Rich::CommonBase<PBASE>::my_getProperty( const std::string & name,
                                         const std::string & property ) const
{
  const PROPERTYTYPE * sp = NULL;

  // get properties for this name
  const std::vector<const Property*> * properties = this->joSvc()->getProperties( name );

  if ( NULL != properties )
  {
    if ( this -> msgLevel(MSG::VERBOSE) )
    { this -> verbose() << "Found " << properties->size() << " Properties for " << name << endmsg; }
    for ( std::vector<const Property*>::const_reverse_iterator itProp = properties->rbegin();
          itProp != properties->rend(); ++itProp )
    {
      if ( NULL != *itProp )
      {
        if ( this -> msgLevel(MSG::VERBOSE) )
        { this->verbose() << " -> " << **itProp << endmsg; }
        if ( property == (*itProp)->name() )
        {
          sp = dynamic_cast<const PROPERTYTYPE*>(*itProp);
          if ( NULL != sp )
          {
            if ( this -> msgLevel(MSG::VERBOSE) )
            { this->verbose() << "  -> Found requested property" << *sp << " for "
                              << name << endmsg; }
            break;
          }
          else
          {
            std::ostringstream mess;
            mess << "Property " + property + " has wrong type : Expected "
                 << System::typeinfoName( typeid(PROPERTYTYPE) )
                 << " Found "
                 << System::typeinfoName( typeid(**itProp) );
            this -> Exception( mess.str() );
          }
        }
      }
      else
      {
        this -> Warning( "'"+name+"' has a NULL property ..." ).ignore();
      }
    } // loop over properties
  }
  else
  {
    this->debug() << "NULL properties vector found for '" << name << "'" << endmsg;
  }
  return sp;
}

//=============================================================================
// Sets Properties
//=============================================================================
template <class PBASE>
bool Rich::CommonBase<PBASE>::setProperties( const std::string & name ) const
{
  return ( this->my_setToolProperty<StringProperty> ( name , "Context"     ) &&
           this->my_setToolProperty<StringProperty> ( name , "OutputLevel" ) );
}
//=============================================================================

//=============================================================================
// Sets Properties
//=============================================================================
template <class PBASE>
bool Rich::CommonBase<PBASE>::contextContains( const std::string & str ) const
{
  std::string data = this->context();
  std::transform( data.begin(), data.end(), data.begin(), ::toupper );
  return ( data.find(str) != std::string::npos );
}
//=============================================================================

//=============================================================================
// Generate a context specific TES location for the given Default location
//=============================================================================
template <class PBASE>
std::string
Rich::CommonBase<PBASE>::contextSpecificTES( const std::string & loc ) const
{
  const int slash = loc.find_last_of( "/" );
  return ( slash>0 && !this->context().empty() ?
           loc.substr(0,slash) + "/" +
           this->context() + "/" + loc.substr(slash+1) : loc );
}
//=============================================================================

//=============================================================================
// Propagate a list oj job options from one object to another
//=============================================================================
template <class PBASE>
StatusCode
Rich::CommonBase<PBASE>::propagateJobOptions( const std::string & from_name,
                                              const std::string & to_name,
                                              const std::vector<std::string> & options,
                                              const bool overwrite ) const
{
  StatusCode sc = StatusCode::SUCCESS;

  // Find the list of set options from the from object
  const std::vector<const Property*> * from_props = joSvc()->getProperties(from_name);
  if ( from_props )
  {

    // Loop over the options
    for ( std::vector<const Property*>::const_iterator it_prop_from = from_props->begin();
          it_prop_from != from_props->end(); ++it_prop_from )
    {

      // Is this option in the list of those to copy ?
      if ( options.empty() ||
           std::find(options.begin(),options.end(),(*it_prop_from)->name()) != options.end() )
      {

        if (this->msgLevel(MSG::VERBOSE))
          this->verbose() << "Found job option '" << (*it_prop_from)->name()
                          << "' to copy from " << from_name
                          << " to " << to_name << endmsg;

        bool okToCopy = true;
        if ( !overwrite )
        {
          // get list of already set options for to_name
          const std::vector<const Property*> * to_props = joSvc()->getProperties(to_name);
          if ( to_props )
          {
            // Search them to see if option is already set
            for ( std::vector<const Property*>::const_iterator it_prop_to = to_props->begin();
                  it_prop_to != to_props->end(); ++it_prop_to )
            {
              if ( (*it_prop_from)->name() == (*it_prop_to)->name() ) 
              { 
                if (this->msgLevel(MSG::VERBOSE))
                  this->verbose() << " " << to_name 
                                  << "  -> Already has this option -> Not Setting" 
                                  << endmsg;
                okToCopy = false; 
                break; 
              }
            }
          }
        }

        if ( okToCopy )
        {
          if (this->msgLevel(MSG::VERBOSE))
            this->verbose() << "  -> Adding option " << (*it_prop_from)->name()
                            << " to " << to_name << endmsg;
          const StatusCode add_sc = joSvc()->addPropertyToCatalogue( to_name,
                                                                     *(*it_prop_from) );
          if ( add_sc.isFailure() )
          {
            this->Error( "Cannot set option '" + (*it_prop_from)->name() +
                         "' for '" + to_name + "'" ).ignore();
          }
          sc = sc && add_sc;
        }

      } // in list of properties to copy

    } // iterate over from properties

  } // found properties for from_name

  // return final status
  return sc;
}
//=============================================================================
