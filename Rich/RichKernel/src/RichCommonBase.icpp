
//-----------------------------------------------------------------------------
/** @file RichCommonBase.icpp
 *
 *  Implementation file for RICH base class : RichCommonBase
 *
 *  CVS Log :-
 *  $Id: RichCommonBase.icpp,v 1.9 2007-02-01 17:24:55 jonrob Exp $
 *
 *  @author Chris Jones    Christopher.Rob.Jones@cern.ch
 *  @date   2005-08-27
 */
//-----------------------------------------------------------------------------

// local
#include "RichKernel/RichCommonBase.h"

// Gaudi
#include "GaudiKernel/IJobOptionsSvc.h"

//=============================================================================
// Destructor
//=============================================================================
template <class PBASE>
Rich::CommonBase<PBASE>::~CommonBase() {}

//=============================================================================
// Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::CommonBase<PBASE>::initialize()
{
  // Execute the base class initialize
  const StatusCode sc = PBASE::initialize();
  if ( sc.isFailure() )
  { return this -> Error( "Failed to initialise Gaudi Base class", sc ); }

  return sc;
}
//=============================================================================

//=============================================================================
// Finalisation
//=============================================================================
template <class PBASE>
StatusCode Rich::CommonBase<PBASE>::finalize()
{
  // Printout from finalization
  if ( this -> msgLevel(MSG::DEBUG) )
    this -> debug() << "Finalize" << endreq;

  // Finalise base class and return
  return PBASE::finalize();
}
//=============================================================================

//=============================================================================
// Access job options service
//=============================================================================
template <class PBASE>
IJobOptionsSvc* Rich::CommonBase<PBASE>::joSvc() const
{
  if (!m_jos)
  { m_jos = this -> template svc<IJobOptionsSvc>( "JobOptionsSvc" ); }
  return m_jos;
}
//=============================================================================

//=============================================================================
// Sets context
//=============================================================================
template <class PBASE>
StatusCode Rich::CommonBase<PBASE>::setContext( const std::string & name ) const
{

  // Tool registry context
  const std::string newContext = toolRegistry()->getContext();
  if ( !newContext.empty() )
  {

    // full tool name
    const std::string fullname = "ToolSvc." + name;

    // get properties for this name
    bool found = false;
    const std::vector<const Property*> * properties = joSvc()->getProperties( fullname );
    if ( properties )
    {
      for ( std::vector<const Property*>::const_iterator itProp = properties->begin();
            itProp != properties->end(); ++itProp )
      {
        const StringProperty * sp = dynamic_cast<const StringProperty*>(*itProp);
        if ( 0 != sp )
        {
          if ( "Context" == (*itProp)->name() )
          {
            if ( this -> msgLevel(MSG::DEBUG) )
            { this -> debug() << "Found Context " << *sp << " for " << fullname << endreq; }
            found = true;
            break;
          }
        }
      }
    }

    // If Context not set, set it
    if ( !found )
    {
      if ( this -> msgLevel(MSG::DEBUG) )
      { this -> debug() << "Setting Context '"
                        << newContext << "' for " << fullname << endreq; }
      StringProperty p(  "Context", '"'+ newContext +'"' );
      joSvc()->addPropertyToCatalogue( fullname, p );
    }

  }

  return StatusCode::SUCCESS;
}
//=============================================================================
