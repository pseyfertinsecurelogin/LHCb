
//-----------------------------------------------------------------------------
/** @file RichFlatFormatSmartIDData.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichFlatFormatSmartIDData
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// Gaudi
#include "GaudiKernel/MsgStream.h"

// local
#include "RichDAQKernel/RichFlatFormatSmartIDData.h"

// 32 bit SmartID
#include "Kernel/RichSmartID32.h"

// =================================================================================================

namespace Rich
{
  namespace DAQ
  {

    // ------------------------------------------------------------------------------------------------
    template < class Version, class Header, class Footer >
    void RichFlatFormatSmartIDData< Version, Header, Footer >::buildData(
      const LHCb::RichSmartID::Vector &digits )
    {

      // Set data words
      for ( const auto &d : digits ) { this->addData( d.key() ); }

      // In extended format mode set footer parity
      // basically, we don't simulate bit errors, so parity word here is just zero
      if ( this->header().extendedFormat() )
      { this->setFooter( Footer( 1, typename Footer::WordType( 0 ) ) ); }

      // Fill the number of 8 bit words + 1 field in header
      Header head( this->header() );
      // head.setNEightBitBlocks ( calcEightBitword(digits) );
      this->setHeader( head );
    }
    // ------------------------------------------------------------------------------------------------

    // ------------------------------------------------------------------------------------------------
    template < class Version, class Header, class Footer >
    ShortType RichFlatFormatSmartIDData< Version, Header, Footer >::fillRichSmartIDs(
      LHCb::RichSmartID::Vector &ids,
      const LHCb::RichSmartID    hpdID ) const
    {
      ShortType nHits = 0;

      // Number of data words
      const auto nDataWords = this->dataSize();

      // any data words
      if ( nDataWords > 0 )
      {
        // Loop over data fields
        for ( unsigned int iData = 0; iData < nDataWords; ++iData )
        {
          const LHCb::RichSmartID id( LHCb::RichSmartID32( this->data()[iData] ) );
          if ( id.pdID() != hpdID )
          { std::cout << "PD ID Error. Should never see this" << std::endl; }
          ids.push_back( id );
          ++nHits;
        }
      }

      return nHits;
    }
    // ------------------------------------------------------------------------------------------------

  } // namespace DAQ
} // namespace Rich
