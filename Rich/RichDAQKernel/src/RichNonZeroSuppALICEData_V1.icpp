
//-----------------------------------------------------------------------------
/** @file RichNonZeroSuppALICEData_V1.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichNonZeroSuppALICEData
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// Gaudi
#include "GaudiKernel/MsgStream.h"

// local
#include "RichDAQKernel/RichNonZeroSuppALICEData_V1.h"

// RichUtils
#include "RichUtils/RichMap.h"

// =================================================================================================

namespace Rich {
  namespace DAQ {

    namespace RichNonZeroSuppALICEDataV1
    {

      template< class Version, class Header, class Footer >
      void
      RichNonZeroSuppALICEData<Version,Header,Footer>::
      buildData( const LHCb::RichSmartID::Vector & digits )
      {
        // Set data words
        for ( const auto& digit : digits )
        {
          const Rich::DAQ::ShortType row = (8*digit.pixelRow()) + digit.pixelSubRow();
          setPixelActive( row, digit.pixelCol() );
        }
        // set footer parity
        if ( this->footer().hasParityWord() )
        {
          Footer foot = this->footer();
          foot.setParityWord( this->createParityWord(digits) );
          this->setFooter(foot);
        }
        // Fill the number of 8 bit words + 1 field in header
        Header head ( this->header() );
        head.setNEightBitBlocksPlusOne ( calcEightBitword(digits) + 1 );
        this->setHeader( head );
      }

      template< class Version, class Header, class Footer >
      Rich::DAQ::ShortType
      RichNonZeroSuppALICEData<Version,Header,Footer>::
      calcEightBitword( const LHCb::RichSmartID::Vector & digits ) const
      {
        using namespace RichZSPacked_V2;

        // temporary data map
        typedef Rich::Map< Rich::DAQ::ShortType, Rich::DAQ::ShortType > DataMap;
        DataMap dataM;

        // Get dummy packed data
        const RichZSPacked zsData;

        // Loop over digits
        for ( const auto& ID : digits )
        {
          // Get bit and address
          const auto bit     = zsData.bitFromCol( ID.pixelCol() );
          const auto address = zsData.addressFromRowCol( ID.pixelRow(), ID.pixelCol() );

          // Set the correct bit on for this address
          this->setBit( dataM[address], bit );
        }

        // How many words ?
        const Rich::DAQ::ShortType nWords = dataM.size()/2 + dataM.size()%2;
        return nWords;
      }

      template< class Version, class Header, class Footer >
      Rich::DAQ::ShortType
      RichNonZeroSuppALICEData<Version,Header,Footer>::
      fillRichSmartIDs( LHCb::RichSmartID::Vector & ids,
                        const LHCb::RichSmartID hpdID ) const
      {
        m_nHits = 0; // reset number of hits to zero

        // reserve size in hit vector ( guess )
        ids.reserve( 96 );

        // Fill with active channels
        for ( Rich::DAQ::ShortType iRow = 0; iRow < Rich::DAQ::MaxDataSizeALICE; ++iRow )
        {
          for ( Rich::DAQ::ShortType iCol = 0; iCol < Rich::DAQ::MaxDataSize; ++iCol )
          {
            if ( isPixelActive(iRow,iCol) )
            {
              ids.emplace_back( LHCb::RichSmartID( hpdID.rich(),
                                                   hpdID.panel(),
                                                   hpdID.pdNumInCol(),
                                                   hpdID.pdCol(),
                                                   iRow/8,  // pixel row
                                                   iCol,    // pixel col
                                                   iRow%8 ) // pixel subrow
                                );
              ++m_nHits; // count hits
            }
          }
        }

        return m_nHits;
      }

      template< class Version, class Header, class Footer >
      Rich::DAQ::ShortType RichNonZeroSuppALICEData<Version,Header,Footer>::hitCount() const
      {
        if ( m_nHits < 0 )
        {
          // not yet calculated, so need to do it here
          m_nHits = 0;
          for ( Rich::DAQ::ShortType iRow = 0; iRow < Rich::DAQ::MaxDataSizeALICE; ++iRow )
          {
            for ( Rich::DAQ::ShortType iCol = 0; iCol < Rich::DAQ::MaxDataSize; ++iCol )
            {
              if ( isPixelActive(iRow,iCol) )
              {
                ++m_nHits; // count hits
              }
            }
          }
        }
        return static_cast<Rich::DAQ::ShortType>(m_nHits);
      }

    } // end V1 namespace

  }
}
