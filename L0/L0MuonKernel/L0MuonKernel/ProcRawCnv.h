#ifndef L0MUONKERNEL_PROCRAWCNV_H
#define L0MUONKERNEL_PROCRAWCNV_H 

/** @class ProcRawCnv ProcRawCnv.h  L0MuonKernel/ProcRawCnv.h
 
  Class for constructing the raw data generated by the TELL1 linked to the processing boards in transparent mode. 

  @author
  @date

*/
#include "L0MuonKernel/CandRegisterHandler.h"
#include "L0MuonKernel/MuonCandidate.h"
#include "ProcessorKernel/TileRegister.h"
#include <boost/dynamic_bitset.hpp>
#include <string>
#include <map>
#include <vector>

namespace L0Muon {
  
  class ProcRawCnv  {

  public:

    /// Default Constructor
    ProcRawCnv();

    /// Default Constructor
    ProcRawCnv(int side);

    /// Destructor
    ~ProcRawCnv();
    
    void release();

    std::vector<PMuonCandidate> muonCandidatesPU();
    std::vector<PMuonCandidate> muonCandidatesBCSU();

    void decodeBank(std::vector<unsigned int> raw, int version);
    std::vector<unsigned int> rawBank(int version, int ievt);

    void dump(int version, int ievt, std::string tab);
    void dump(int version, int ievt);
    

  private:
    
    int m_quarter;

    // Candidate registers
    CandRegisterHandler m_candRegHandlerBCSU[12];
    CandRegisterHandler m_candRegHandlerPU[12][4];

    // Pointers to tile registers organised into arrays according to board and pu indices
    TileRegister* m_ols[12][4];
    TileRegister* m_neighs[12][4];    

    // Pointers to tile registers, organised into a map with the puID as a key
    std::map<LHCb::MuonTileID, TileRegister*> m_olsMap;
    std::map<LHCb::MuonTileID, TileRegister*> m_neighsMap;

  };
}; // namespace L0Muon
 
#endif    // L0MUONKERNEL_PROCRAWCNV_H
