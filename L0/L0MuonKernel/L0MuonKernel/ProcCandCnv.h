#ifndef L0MUONKERNEL_PROCCANDCNV_H
#define L0MUONKERNEL_PROCCANDCNV_H 

/** @class ProcCandCnv ProcCandCnv.h  L0MuonKernel/ProcCandCnv.h
 
  Class for constructing the raw data generated by the TELL1 linked to the processing boards in transparent mode. 

  @author
  @date

*/
#include "L0MuonKernel/CandRegisterHandler.h"
#include <string>
#include <map>
#include <vector>

namespace L0Muon {
  
  class ProcCandCnv  {

  public:

    /// Default Constructor
    ProcCandCnv();

    /// Default Constructor
    ProcCandCnv(int quarter);

    /// Destructor
    ~ProcCandCnv();

    void release();
    
    std::vector<PMuonCandidate> muonCandidatesPU();
    std::vector<PMuonCandidate> muonCandidatesBCSU();

    void decodeBank(std::vector<unsigned int> raw, int version);
    std::vector<unsigned int> rawBank(int version, int ievt);
    
    void dump(std::string tab=""){
      for (int ib=0; ib<12; ++ib) 
      {
        m_candRegHandlerBCSU[ib].dump(-1,tab);
        for (int ip=0; ip<4; ++ip) {
          m_candRegHandlerPU[ib][ip].dump(-1,tab+" ");
        }      
      }
    }

  private:
    int m_quarter;
    // Input candidate registers from the PU Cnv (max=48)
    CandRegisterHandler m_candRegHandlerPU[12][4];
    // Input candidate registers from the BCSU Cnv (max=12)
    CandRegisterHandler m_candRegHandlerBCSU[12];

  };
}; // namespace L0Muon
 
#endif    // L0MUONKERNEL_PROCCANDCNV_H
