#ifndef L0MUONKERNEL_PROCDATACNV_H
#define L0MUONKERNEL_PROCDATACNV_H 

/** @class ProcDataCnv ProcDataCnv.h  L0MuonKernel/ProcDataCnv.h
 
  Class for constructing the raw data generated by the TELL1 linked to the processing boards in transparent mode. 

  @author
  @date

*/

#include "Kernel/MuonTileID.h"
#include "ProcessorKernel/TileRegister.h"
#include <boost/dynamic_bitset.hpp>
#include <string>
#include <map>
#include <vector>
#include "L0MuonKernel/ProcDataErrors.h"

namespace L0Muon {
  
  class ProcDataCnv {

  private:

    static const unsigned int PB_OpticalLinks_size = 24;
    static const unsigned int PB_Neighbours_size   = 34;
    static const unsigned int PU_OpticalLinks_size_16 = 10;
    static const unsigned int PU_Neighbours_size_16   = 17;

  public:

    /// Default Constructor
    ProcDataCnv();

    /// Constructor
    ProcDataCnv(int quarter, int compressionParameter=5);

    /// Destructor
    ~ProcDataCnv();

    LHCb::MuonTileID mid_BCSU(int ib);
    LHCb::MuonTileID mid_PU(int ib, int ipu);

    void release();

    std::vector<LHCb::MuonTileID> ols(LHCb::MuonTileID puid);    
    std::vector<LHCb::MuonTileID> neighs(LHCb::MuonTileID puid);
    std::vector<LHCb::MuonTileID> pus();

    int decodeBank(const std::vector<unsigned int> raw, int version);
    int decodeBank_v1(const std::vector<unsigned int> &raw);
    int decodeBank_v2(const std::vector<unsigned int> &raw);
    int rawBank(std::vector<unsigned int> &raw, int version,int mode, bool compression);
    int rawBank_v1(std::vector<unsigned int> &raw, int mode);
    int rawBank_v2(std::vector<unsigned int> &raw, int mode, bool compression);

    const bool inError(int ib, int ipu) const { return m_errors[ib].inError(ipu);}
    const int  decodingError(int ib) const { return ((int(m_errors[ib].decodingError())<<1)&2);}
    const int  hardwareError(int ib, int ipu) const {return m_errors[ib].hardwareError(ipu);}

    const ProcDataErrors * errors(int ib) const {return &m_errors[ib];}

  private:

    int setRegisters_for_PB_OpticalLinks(int iboard, boost::dynamic_bitset<> & rawbitset );
    int setRegisters_for_PB_Neighbours(int iboard, boost::dynamic_bitset<> & rawbitset );
    
    int compressedPBWords_to_bitset(const std::vector<unsigned int> & raw, const int size, 
                                    unsigned int & word_index, int & bit_index,
                                    boost::dynamic_bitset<> & rawbitset);
    int notcompressedPBWords_to_bitset(const std::vector<unsigned int> & raw, const int size, 
                                       unsigned int & word_index,
                                       boost::dynamic_bitset<> & rawbitset);

    int next_bit(const std::vector<unsigned int> & raw, unsigned int &iwd, int &ibit);

    int m_compressionParameter;

    boost::dynamic_bitset<> applyCompression(boost::dynamic_bitset<> bitset_to_compress);
    boost::dynamic_bitset<> unapplyCompression(boost::dynamic_bitset<> & compressed, unsigned int length);

    int m_quarter;

    // Pointers to tile registers organised into arrays according to board and pu indices
    TileRegister* m_ols[12][4];
    TileRegister* m_neighs[12][4];    

    // Pointers to tile registers, organised into a map with the puID as a key
    std::map<LHCb::MuonTileID, TileRegister*> m_olsMap;
    std::map<LHCb::MuonTileID, TileRegister*> m_neighsMap;
    
    // Error Handlers
    ProcDataErrors m_errors[12];

  };
}; // namespace L0Muon
 
#endif    // L0MUONKERNEL_PROCDATACNV_H
