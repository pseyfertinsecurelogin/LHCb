#ifndef L0MUONKERNEL_PROCDATACNV_H
#define L0MUONKERNEL_PROCDATACNV_H 

/** @class ProcDataCnv ProcDataCnv.h  L0MuonKernel/ProcDataCnv.h
 
  Class for constructing the raw data generated by the TELL1 linked to the processing boards in transparent mode. 

  @author
  @date

*/

#include "Kernel/MuonTileID.h"
#include "ProcessorKernel/TileRegister.h"
#include <boost/dynamic_bitset.hpp>
#include <string>
#include <map>
#include <vector>

namespace L0Muon {
  
  class ProcDataCnv {

  public:

    /// Default Constructor
    ProcDataCnv();

    /// Constructor
    ProcDataCnv(int quarter, int compressionParameter=5);

    /// Destructor
    ~ProcDataCnv();

    void release();

//     std::vector<LHCb::MuonTileID> ols(int board, int pu);
//     std::vector<LHCb::MuonTileID> neighs(int board, int pu);
    std::vector<LHCb::MuonTileID> ols(LHCb::MuonTileID puid);    
    std::vector<LHCb::MuonTileID> neighs(LHCb::MuonTileID puid);
    std::vector<LHCb::MuonTileID> pus();

    void decodeBank(std::vector<unsigned int> raw, int version);
    std::vector<unsigned int> rawBank(int version,int mode);


  private:

    int m_compressionParameter;

    boost::dynamic_bitset<> applyCompression(boost::dynamic_bitset<> bitset_to_compress);
    boost::dynamic_bitset<> unapplyCompression(boost::dynamic_bitset<> & compressed, unsigned int length);

    int m_quarter;

    // Pointers to tile registers organised into arrays according to board and pu indices
    TileRegister* m_ols[12][4];
    TileRegister* m_neighs[12][4];    

    // Pointers to tile registers, organised into a map with the puID as a key
    std::map<LHCb::MuonTileID, TileRegister*> m_olsMap;
    std::map<LHCb::MuonTileID, TileRegister*> m_neighsMap;
    

  };
}; // namespace L0Muon
 
#endif    // L0MUONKERNEL_PROCDATACNV_H
