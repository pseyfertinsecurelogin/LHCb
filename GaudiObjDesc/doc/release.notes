!--------------------------------------------------------------------------------
! Package:         GaudiObjDesc
! Description:     This package contains a set of tools used to generate code
!                  from the XML description of the data object classes.
! Package manager: Stefan Roiser
!--------------------------------------------------------------------------------

!========================= GaudiObjDesc v11r17 2012-11-16 =========================
! 2012-11-16 - Marco Clemencic
 - Updated version in CMakelists.txt.

!========================= GaudiObjDesc v11r16 2012-09-28 =========================
! 2012-09-26 - Marco Clemencic
 - Allow for generation of "private" headers when using CMake.
   Note: those headers are not copied anywhere, so they will not be available
         in Doxygen.

! 2012-09-20 - Stefan Roiser
 - Added the possibility of declaring typedefs in the scope of the namespace
   surrounding the class (i.e. just outside the class).

! 2012-09-05 - Marco Clemencic
 - Added CMake configuration and module (to be used by other packages).
 - Added a special target to just generate all the headers files (AllObj2doth).
 - Added tests for the XML parser.
 - Removed some dead code: parsing of GODsClassDB.xml (not supported by DTD).
 - Added test for entities and comment handling in xparser.
 - Re-implemented GaudiObjDesc.xparser on lxml (instead of the embedded pyxml).
   Note: it requires a more strict DTD.

! 2012-08-01 - Marco Clemencic
 - Added the possibility to set the allocator to 'ORDERED' on the command line.
 - Minor improvements to the command line option test.
 - Rewritten the option parsing using the 'optparse' module instead of the
   obsolete 'getopt'.

! 2012-07-31 - Marco Clemencic
 - Modified the class generation to use the 'unordered' malloc and free in the
   default allocators.
 - The ordered_malloc and ordered_free (with their companion release_memory) can
   be enabled with the attribute allocator="ORDERED" in the <class> tag of the
   XML description.
 - Added a test submodule to GaudiObjDesc (using nosetests) with some tests in
   preparation of the consolidation of the Python code.
 - Fixed a minor bug in some obsolete code.

! 2012-07-25 - Marco Clemencic
 - Imported MemoryPoolAllocatorReleaser source and test from Kernel/LHCbKernel,
   changing the namespace from LHCb to Gaudi.
 - Added a linker library to host the function required by
   MemoryPoolAllocatorReleaser.
 - Renamed the directory 'test' to 'tests' to conform to the convention.
 Note: Kernel/LHCbKernel is not required anymore.

!========================= GaudiObjDesc v11r15 2012-07-24 =========================
   ======== requires Kernel/LHCbKernel > v13r11 ========
! 2012-07-16 - Marco Clemencic
 - Modified the generation of the code using boost pool allocators to add a
   "release_pool" method and to register the class to the static object that
   allow the release of all the pools.
 - Added dependency on Kernel/LHCbKernel to ensure that every user of G.O.D. can
   find the required headers.
 - Modified the "release_pool" method to use the return value of the release
   methods of the Boost singleton_pool.

! 2012-07-13 - Marco Clemencic
 - Restored corrected indentation in generated headers after the re-indentation
   of Python modules.

! 2012-06-25 - Chris Jones
 - Use ordered_malloc() instead of malloc() and ordered_free(p) instead of
   free(p) in boost pool allocations and de-allocations.

!========================= GaudiObjDesc v11r14 2012-06-25 =========================
! 2012-06-04 - Marco Clemencic
 - Corrected indentation of Python files (with reindent.py).
 - Fixed a minor mistake in the new godII.py script.

! 2012-05-31 - Marco Clemencic
 - Reorganized the package to conform to the standard structure for python
   modules and scripts.
 - Modified the main script to accept the path to the DTD file as option.
 - Modified the fragments to pass the DTD to the script instead of copying it in
   the packages.
 - Removed unused fragment (godify).

!========================= GaudiObjDesc v11r13 2012-02-28 =======================
! 2012-02-28 - Marco Cattaneo
 - Fix requirements to set -DGOD_NOALLOC when tag 'target-dbg' is set, previously
   used tag 'debug' that no longer exists

!========================= GaudiObjDesc v11r12 2011-02-22 =======================
! 2011-02-18 - Marco Cattaneo
 - In genClasses.py:
   . Remove #pragma directive to suppress ICC remark 177
   . Fix the remark instead by declaring the locations as
     static const std::string rather static const std::string&

!========================= GaudiObjDesc v11r11 2011-01-31 =========================
! 2011-01-11 - Marco Cattaneo
 - Suppress ICC warning 1572 when including HepMC includes
 - Add in gdd.dtd "useBase" attribute to method element. genSrcUtils.py uses
   this to add a "using _base_::_method_" directive to the header file, to fix
   warnings about hidden methods

! 2011-01-11 - Marco Cattaneo
 - In genClasses.py, add generation of #pragma directive to suppress ICC remark 177
   (variable declared but never referenced) in 'Location' namespace

!========================= GaudiObjDesc v11r10p2 2010-10-25 =========================
! 2010-08-24 - Pere Mato
 - Fixed a bug that was visible when several xml files were provided in a single
   command invocation. Class instantiations and exclusions sections were accumulating.
   This was not visible when using CMT because commands are executed with a single
   xml input file.

!======================== GaudiObjDesc v11r10p1 2010-02-24 ===================
! 2010-02-16 - Stefan Roiser
 - Fix bug #62936: for unknown enums, print the numerical value in the error
   message

!======================== GaudiObjDesc v11r10 2010-01-20 =====================
! 2009-12-11 - Stefan
- Adding new <class> attribute "defaultdestructor". The default value for it is
  set to "TRUE". Setting it to "FALSE" will disable the generation of a default
  destructor also in the case no other destructor was defined, which was the
  case before.

!======================== GaudiObjDesc v11r9 2009-12-11 ======================
! 2009-12-03 - Stefan Roiser
- Adding a new <class> attribute "defaultconstructor". The default for this
  attribute is "TRUE". If set to "FALSE" no default constructor for this class
  will be generated.

  ATTENTION: For I/O a default constructor is paramount, ie. using this feature
  will not allow this class to be made persistent anymore.

!======================== GaudiObjDesc v11r8 2009-06-29 ======================
! 2009-06-23 - Marco Cattaneo
 - In importUtils.py, disable warning C4800 on Windows when including
   HepMC/GenEvent.h

!======================== GaudiObjDesc v11r7 2009-05-25 ======================
! 2008-09-26 - Marco Cattaneo
 - In importUtils.py, add temporary workaround for windows: define NOMINMAX
   when including GaudiKernel/boost_allocator.h, to avoid conflict with max()
   macro defined in windows.h. This workaround will become unnecessary with
   Gaudi v21r2

! 2009-05-19 - Hubert Degaudenzi
 - Removed the override of the LD_LIBRARY_PATH env variable in obj2doth and
   obj2dict. They are not needed and cause problems when cross-compiling
   slc4 on the slc5 architecture.

!======================== GaudiObjDesc v11r6 2008-11-17 ======================
! 2008-11-12 - Marco Clemencic
 - Modified the way destination directories are created.

!======================== GaudiObjDesc v11r5 2008-09-30 ======================
! 2008-09-26 - Marco Cattaneo
 - In GenClasses.py: change ifndef around boost allocators to GOD_NOALLOC
                     (was _WIN32)
 - In requirements: define -DGOD_NOALLOC in debug and WIN32 cases

!======================== GaudiObjDesc v11r4 2008-09-04 ======================
! 2008-07-28 - Hubert Degaudenzi
 - fixed problem in the fragment for the creation of the target dircectory

!======================== GaudiObjDesc v11r3 2008-07-27 ======================
! 2008-07-24 - Hubert Degaudenzi
 - fixed dependency problems in the fragments to allow parallel compilation
   with "make -j"

!======================== GaudiObjDesc v11r2p1 2008-06-30 ====================
! 2008-06-30 - Marco Cattaneo
 - Add dependency on GaudiPolicy to allow running of QMTest macros

!======================== GaudiObjDesc v11r2 2008-03-03 ======================
! 2008-03-03 - Stefan for Brett Viren
 - Fixed bug 33839: genClasses::reset() fix for multiple classes in one XML file

! 2008-02-12 Stefan
- changes for attribute types:
  - if the attribute type is a pointer type initialize it to 0 in GODs self
    generated default constructor
  - if the attribute type starts with "const " fix the return type of the get
    method to "const <type>" (had an additional const before)

! 2008-02-04 Stefan
- change for <import> element, so far it was not possible to forward declare a
  class living in the global namespace. Now with setting the attribute
  namespace='::' the class will be forward delcared outside the "Event" namespace
  (e.g. LHCb) and otherwise handled as any other forward declaration (ie. included
  after the class body.
- new feature for ONLY forward declartions (in contrast to including the forward
  declared type after the class body). To do so set the <import> attribute
  soft="FORWARDONLY". The type will be forward declared but not indcluded.

!======================== GaudiObjDesc v11r1 2008-12-24 ======================
! 2008-01-22 Stefan
- new feature for enum generation: when activating the string<->enum conversion
  so far the enum had to contain one value "Unknown". In case of several enums
  in the same class this was not possible for each enum because of the scoping.
  A new attribute "unknownValue" of the <enum> element can now be set to over-
  write the value. The default is "Unknown" but can be set to any string, take
  care to also provide an actual value of the enum with the string set in the
  attribute.

!======================== GaudiObjDesc v11r0 2007-11-29 ======================
! 2007-11-29 - Stefan
 - New feature to allow construction of dictionaries for std::vector<const T*>
   on demand (T==Event class). To do so, the XML entity &StlConstPtrVector; hast
   to be put into the xml source of the corresponding event class definition.
   (similar eg. to &KeyedObject; etc.)

! 2007-11-29 - Marco Cattaneo
 - Improved workaround for namespace scoping of GaudiUtils:: serializers

! 2007-11-26 - Marco Cattaneo
 - Pick up GaudiKernel/SerializeSTL.h instead of Kernel/SerializeStl.h. These
   serializers are now in GaudiUtils:: namespace, not LHCb::
   Removes dependency of generated files on LHCbKernel (Savannah bug no. 29887).
   Requires Gaudi v19r6 or greater

!======================== GaudiObjDesc v10r4p2 2007-11-09 ====================
! 2007-11-09 - Marco Cattaneo
 - In god_headers CMT pattern, add dependency of <package> constituent on
   <package>Obj2Doth constituent, to ensure headers are generated before
   everything else, as this was not the case on osx platform

!======================== GaudiObjDesc v10r4p1 2007-10-19 ====================
! 2007-10-25 Stefan Roiser
 - Add a missing "inline" in string to type conversion functions

! 2007-10-19 Stefan Roiser
- fix typo. The generated copy constructor was missing a comma for base classes
  which were not KeyedObjects

!======================== GaudiObjDesc v10r4 2007-09-19 ======================
! 2007-09-17 Stefan Roiser
- New feature for string to type conversion for enums and vice versa
  This feature can be enabled by setting the <enum> attribute "strTypConv" to "TRUE"

  !!! ATTENTION !!! this feature requires the enum to contain a value with name "Unknown"

  The result will be:
    - a static function to store the conversion types
        GaudiUtils::VectorMap<string,[enumType]> & s_[enumType]TypMap()
    - two static functions for the actual conversion
        [enumType] [enumType]ToType( const std::string & )
        std::string [enumType}ToString( int )

- removed some tabs in genSrcUtils.py

!======================== GaudiObjDesc v10r3 2007-09-03 ======================
! 2007-09-03 - Marco Cattaneo for Brett Viren
 - Apply Savannah patch 1256:
   Add enum and function tags in selection.xml dictionary selection file if
   encountered in the input xml

!======================== GaudiObjDesc v10r2 2007-07-18 ======================
! 2007-07-18 - Marco Cattaneo for Brett Viren
 - Apply (Gaudi) Savannah patch 1230 to improve namespace handling:
   1) If a <class> doesn't specify a namespace it will inherit it from its
      <package>
   2) A default package namespace can be provided to godII's command line via
      "-n TheNamespace".

!======================== GaudiObjDesc v10r1 2007-06-22 ======================
! 2007-06-13 Stefan
 - patch from Dave Casper (dcasper@uci.edu)
   parameterizing the up to now hardcoded "LHCb" namespace which is the scope
   for LHCb event classes. It introduces the namespace/scope attributes in the
   DTD which will then be picked up by GOD to generate the namespace name. The
   default value for these newly introduced attributes is "LHCb"

!======================== GaudiObjDesc v10r0 2007-06-12 ======================
! 2007-06-12 Stefan
 - change doxygen style for enum values from ///< to //

! 2007-06-07 - Pere Mato
 - added new two patterns to generate the headers and dictionaries.
   god_headers: generates the header files using the existing document
   god_dictionary: generates the dictionary header file and selection file and calls the
                   standard relex_dictionary provided by the Reflex LCGCMT interface package
   IMPORTANT!! All Event packages need to be adapted to this change
   For example the TrackEvent package changes are:

		--- requirements        8 May 2007 11:20:01 -0000       1.46
		+++ requirements        7 Jun 2007 11:42:21 -0000
		@@ -14,22 +14,20 @@
		 use   LHCbKernel      v*    Kernel
		 use   GSL             v*    LCG_Interfaces
		 use   Boost           v*    LCG_Interfaces
		+private
		+use GaudiObjDesc v* -no_auto_imports
		+end_private

		 # Produce Header-Files from XML description
		 #===========================================================================
		-document obj2doth TrackEventObj2Doth ../xml/*.xml
		+apply_pattern god_headers files=../xml/*.xml
		 apply_pattern install_more_includes more=Event

		-document obj2dict TrackEventObj2Dict ../xml/*.xml
		+apply_pattern god_dictionary files=../xml/*.xml

		 library          TrackEvent         ../src/*.cpp
		-library          TrackEventDict     ../$(tag)/dict/TrackEvent/*.cpp

		 # define library link options
		 #============================================================================
		 apply_pattern linker_library   library=TrackEvent
		-apply_pattern component_library library=TrackEventDict
		-macro_remove constituents TrackEventDictRootMap

		-private
		-use GaudiObjDesc v* -no_auto_imports

! 2007-06-01 Stefan Roiser
- fix 'static' handling for method generation

!=========================== GaudiObjDesc v9r9 =============================
! 2007-02-19 - Pere Mato
 - scripts/genClasses.py - replace the static const CLID& CLID_xxx = yyy
   with  a static const CLID CLID_xxx = yyy to solve the problem encountered
   when the ClassID() method is called before the static const CLID& CLID_xxx
   is initialized.

!============================ GaudiObjDesc v9r8p1 =======================
! 2007-01-25 Stefan
 - Add the -m32 option to the gccxml flags for its invocation. This is needed
   when producing 32 bit code on a 64 bit machine. The option is triggered
   through a macro "gccxmlopts" defined in the requirements file and used in
   the linux fragment of obj2dict

!============================ GaudiObjDesc v9r8 =========================
! 2006-12-21 - Marco Cattaneo
 - Added support for exclusion block in selection file

! 2006-12-19 - Marco Cattaneo
 - Added pp_cppflags to genreflex arguments in obj2dict_trailer

! 2006-12-19 Pere Mato
  - Modified fragments for dictionary generation to produce the rootmap in the
    install area or locally depending if building with or without install area.

!============================ GaudiObjDesc v9r7p1 =========================
! 2006-08-16 Stefan

  - remove friendship for the ostream operator << overloading. This is not
    needed. Move all operator overloads into the LHCb namespace.

!=============================GaudiObjDesc v9r7============================
! 2006-07-24 Stefan

  - the "pretty printing" of enums is now done on the std::ostream
    (was MsgStream before)

  - Removing all implicit knowledge about header files, removed the
    database of classes to header files. This means that all types
    have to be either included or forward declared in the xml file
    through the <import> element.

    Exception: If GOD does automatic code generation (e.g. code for a
    relation will include "SmartRef(Vector)", code for a ostream
    operator<< will include "<ostream>".

  - Removed "ignore" attribute of <import> element. This is not
    necessary any- more because GOD will not try to include any types
    automatically anymore (e.g. parameter, return, or data member
    types)

    Attention: This is an backwards incompatible change.

  - New attribute "namespace" for the <import> element. This attribute
    is used together with the "soft" attribute of <import> for forward
    declarations of types. An import statement with "soft" and
    "namespace" where the value of "namespace" is not "LHCb" will be
    forward declared before the LHCb namespace (and included after the
    class definition as all other forward declarations).  The
    namespace attrbiute works also with multiple namespace
    declarations. Forward declarations of types also accepts a header
    file ending (as normal i import statements). If the header to be
    included does not end on ".h".

    Example:

    <import name="qt/qtstring.hh" soft="true" namespace="qt::gui"/>

    will produce

    namespace qt {
      namespace gui {
        class qtstring;
      }
    }

    class MyEventClass {
    .....
    };

    #include "qt/qtstring.hh"

  - New <class> attribute "virtual" (by default "TRUE"). If this
    attribute is set to "FALSE" the automatically generated destructor
    and fillStream methods will be non virtual (thus producing a class
    without vtable).

    Note: any virtual information generated by xml user code
    (e.g. virtual inheritance) will be taken into account.

  - The dictionary for KeyedObject<int> will not be generated anymore,
    even if the class inherits from it. This dictionary is generated
    in GaudiKernelDict.

  - New sub element <enumval> of element <enum>. This element can be
    used to produce enum values together with or instead of the
    "values" attribute of <enum>.  It's mandatory attributes are
    "name" and "desc". Optional attribute is "value".  E.g.

    <enum name="CreationMethod" desc="Describe how the vertex ...">
      <enumval name="Unknown" value="0" desc="unknown creation"/>
      <enumval name="Primary" desc="primary creation"/>
      ....
    </enum>

    The values of "desc" will be printed after the enum value in the
    header. <enumval> can also be used together with the "value"
    attribute. In this case the entries in "value" will be processed
    before the <enumval> entries.  The "value" attribute of <enum> is
    now optional (was mandatory before).

  - Generation of copy constructors and assignment operators. The
    <class> sub elements <copyconstructor/> and <assignmentoperator/>
    will produce these functions. In case of classes inheriting from
    KeyedObject the copy constructor will take care of not copying the
    key (i.e. calling the default constructor of KeyedObject)

  - Removed unused .py files: lcgdict.py, gendict2.py, genUtils.py,
    GODsClassDB.xml, GaudiCppExport.xml xml_files/GaudiCppExport.xml


!=============================GaudiObjDesc v9r6============================
! 2006-06-11 - Marco Clemencic
 - patch #744. Reintroduced "operator new(size_t,void*)" and "operator
   delete(void*,void*)" because they are needed by libstdc++ 3.2.3 (at
   least in std::vector).

! 2006-06-06 - Marco Clemencic
 patch #733:
 - Disabled boost allocators on Windows (problems with static storage)
 - Changed the default allocator to the one with the check in
   operator delete (to avoid possible memory leaks)
 - Removed dummy implementations of "operator new(size_t,void*)" and
   "operator delete(void*,void*)" which are not needed with ROOT 5.11

! 2006-05-31 - Marco Clemencic
 - patch #729. for classes inheriting from ContainedObject, G.O.D. is
   generating the forward declaration template <class TYPE> class
   ObjectVector;inside the namespace LHCb even if it is not needed
   (the equivalent is not generated for KeyedObject). This may create
   problems. This fixes the bug.

! 2006-05-19 - Marco Clemencic
 - patch #726. Removed a work-around introduced with patch #716 that is
   not needed with ROOT 5.11 (the change of default allocator for
   contained objects).

!=============================GaudiObjDesc v9r5============================
! 2006-05-16 - Marco Clemencic
 - patch #716. It appears that the new feature is not working as
   expected when reading ObjectVector or KeyedContainer from a ROOT
   file. The overloaded operator new is not called for the contained
   objects, but the operator delete is called, causing a huge memory
   leak.
 - The patch changes the default allocator for contained objects,
   using the one that is checking if the pointer is actually managed
   by the allocator before deleting it (and calling the default
   operator delete otherwise).
 - The patch contains a small improvement in the "DEBUG" allocator
   (better output).
 - The observed problem is due to a bug in ROOT/Reflex 5.10 which is
   fixed in 5.11. We should use this patch in the version of Gaudi
   based on LCG_43 and remove few lines in the version based on
   LCG_44.

! 2006-05-11 - Marco Clemencic
 - Bugfix in custom allocators support (bad signature for placement new).

! 2006-04-27 - Marco Clemencic
- patch #716. Added support for custom allocators. The type ("NO" or
  "BOOST") can be chosen via an attribute of the XML tag class
  (allocator) or via a command line option to G.O.D. (that can be used
  to override the XML selection).

!2006-04-26 Stefan
- turning on doxygen documentation for generated typedefs

!=============================GaudiObjDesc v9r4============================
!2006-03-28 Stefan
- removing dictionary generation for const containers
- removing typedefs for const containers from class definitions

!2006-03-23 Stefan
- Adding instantiations and selections for const containers to dictionaries

!2006-03-23 Stefan
- Adding Container and ConstContainer typedefs also for classes inheriting
  from ContainedObject

!2006-03-15 Stefan
- introducing two new typedefs
        typedef KeyedContainer<T,Containers::HashMap> Container;
        typedef KeyedContainer<const T,Containers::Hashmap> ConstContainer;
  These macros are generated in addition to the
        typedef KeyedContainer<T,Containers::HashMap> Ts;
        (Ts being the the plurial of the class name)
  These macros will be created if a class directly inherits from KeyedObject or
  if the keyedContTypeDef attribute of <class> is set to "TRUE"

!2006-01-30
- fix for destructor implementation. An empty code element will result in
  an empty inline implementation

!=============================GaudiObjDesc v9r3============================
!2006-01-27 Macro Cattaneo
- allows tospecify additional flags to be passed to gccxml, by
  defining the macro use_obj2dict_gccxmlflags

!2006-01-19 Pere Mato
- Adapted to use genreflex command to generate dictionaries (Reflex from ROOT)

!===============================GaudiObjDesc v9r2============================
!2005-12-20 Stefan Roiser
- fix on namespace python script.

!===============================GaudiObjDesc v9r1============================
!2005-12-13 Stefan Roiser
- move typedef for container of objects (KeyedContainer, ObjectVector) inside the LHCb namspace

!2005-12-05 Marco Cattaneo, Stefan Roiser
- update GODsClassDB.xml removed all information except GaudiKernel, SealBase, SealKernel
- removed warning when imported type was not found

! 2005-11-28 Stefan Roiser
- fix typedefs: used scoped class name
- new attribute for <relation> and <attribute>
	- nonconstaccessor [ TRUE | FALSE ] defaults to 'FALSE'
          when set to 'TRUE' will turn on the generation of non-const accessor methods

!===============================GaudiObjDesc v9r0============================
! 2005-11-17 Stefan Roiser
- merged in some more changes from the branch - better handling of enums for bitfields (offset not an int)
- new features
  - MsgStream overloading for public enum types (by default)
  - namespace LHCb - all event classes and namespaces live in the namespace LHCb
    - if the return value of a self defined method lives in the namespace LHCb this has to be added in the xml description
  - Renamed container typedefs for classes inheriting from ContainedObject
    - now there is only one typedef (from vector), the name has changed from <Class>Vector to <Class>es (plural)
    - the typedef for lists has been removed
- xml attributes have been removed
  - element class : templateVector, templateList, filename
  - element constructor : argInOut
  - element destructor : argInOut, argList
  - element method : argInOut
  - element attribute : array, serialize

! 2005-11-11 - Stefan Roiser (merged from the branch)
- changed fragments for dictionary generation to generate dictionary headers,
  selection files and sources in $(tag)/dict
  User requirements files should be adapted to compile all .cpp files in this
  directory instead of ../dict for compilation of the dictionary library

! 2005-10-26 Stefan
- The length of bitfields can be changed by the "type" attribute of the <attribute> element.
  For the time being  type='bitfield' generated a bitfield of 32 bit (unsigned int). In addition the following types are possible
  - bitfield8 (unsigned char)
  - bitfield16 (unsigned short int)
  - bitfield32 (same as the old bitfield - unsigned int)
  - bitfield64 (ulonglong - platform independent defintion for unsigned long long from GaudiKernel/Kernel.h)
- Added description for bitfields enums in header files
- Added automatic overloading to MsgStream for enums

!===============================GaudiObjDesc v8r1============================
! 2005-10-17 - Marco Cattaneo
 - genClassDicts.py was ignoring "transient" tag in XML description of class
   attributes

! 2005-10-12 - Marco Cattaneo
 - Added class ID to xml generated by genClassDicts.py

!===============================GaudiObjDesc v8r0p1============================
!20051007 - Pere
- added lcgdict.py and gendict2.py files in /scrips with patches included at SEAL head
- modified requirements to make use of them

!===============================GaudiObjDesc v8r0============================
!20050908 - Pere
- modified nmake fragments for the production of lcgdict (reflex) based dictionaries
  fragments/nmake/obj2dict_header
  fragments/nmake/obj2dict_trailer

!20050822 - Stefan
- preparation for using namespace LHCb for Event classes and namespaces (not activated yet)
- small changes for fragment (linux)
- changing template parser to support indented tokens

!20050726 - Stefan
- fixed bug when checking for typedefs or enums in include files

!20050721 - Stefan
- move dictionary generation from Reflection to Reflex
  - GOD now produces header files with proper includes and instantiations of
    templated classes plus a selection.xml file which will be passed to the
    SEAL lcgdict command to generate dictionary source code.
  - rewrite of genClassDicts.py
  - remove genAssociations.py
  - new file genAssocDicts.py for generation of Reflex dictionaries for Relations
  - change ob2dict fragments to invoke lcgdict on generated headers
  - remove template files: associations.tpl, dict.tpl
  - new template files: selection_xml.tpl, dictionary_h.tpl
- new attribute "virtual" (TRUE|FALSE) for generation of virtual destructors

!20050719 - Hubert Degaudenzi
- added removal of the xml/gdd.dtd file for the clean target of the
  makefile fragments. fixed bug #9584.

!===============================GaudiObjDesc v7r4============================
!20050706 - Hubert Degaudenzi
- fixed end of lines in gdd.dtd

!20050525 - Stefan
- adding template support for methods (attribute template)
- no dictionaries for templated methods are created (if needed use lcgdict)

!20050217 - Stefan
- new <bitfield> attribute "exclusive" triggers inclusive or exclusive setting of the bitfield
- fix for bitfield check-methods, bit to check shifted into right position

!===============================GaudiObjDesc v7r3============================

!20050206 - Stefan
- lowering getter names of bitfields (as for all other getters)
  (e.g. HTL()->htl(), PDRow()->pdRow())

!20050203 - Stefan
- fix for dictalias when generating info for dictionary fields
- generation of bitfield accessor methods fixed
- added support for transient attribute of <attribute> element
- fix to not self include the header file after the class definition

!===============================GaudiObjDesc v7r2============================

!20050127 - Stefan
- excluding types in namespace std from demangling

!20050126 - Stefan
- genClassDicts.py: fix for dictionary (because of problems with persistency
  tools not handling the new 1.9.1.2 clhep classes). Attribute types and
  parameter/return types of methods will now be demangled by the compiler
  (through GaudiKernel/System::typeinfoName) if they are not fundamental

!20050117 - Stefan
- methods returning enums or taking enums as arguments now accept/return "int"s in the dictionary code
- fix in dictionary code: methods returning or taking a SmartRef<T> will be described as T* in the dictionaries

!20050117 - Stefan
- import names stay unchanged if they contain a '.'. E.g. <import name='file.hh'/> will convert to #include "file.hh"
- fix: all get/set/addTo/etc. methods are now public in the dictionaries by default

!===============================GaudiObjDesc v7r1============================

!20050111 - Stefan
- generating of typedefs in classes unified. All typedefs are handled by a single function (std::vector,KeyedContainer,ContainedObject)
- class attributes 'stdVectorTypeDef, templateVector, templateList' will be depricated and replaced by new ones
- ATTENTION: if the typedefs for KeyedObjects/ContainedObjects at the end of the class should be generated, then:
             - classes not inheriting directly form KeyedObject<T> must have the <class> attribute "keyedContTypeDef" set to "TRUE"
             - classes not inheriting directly form ContainedObject must have <class> the attribute "contObjectTypeDef" set to "TRUE"

!20050103 - Stefan
- fix: generate unique include line in case of stl includes (generated from forward declarations)

!===============================GaudiObjDesc v7r0============================
!20041213 - Stefan
- changes necessary for windows compilation
  . passing refs to pointers in dictionary stubfunctions needs a cast to the ref
  . changed getters for bitfields to remove a warning of vc71

!20041208 - Stefan
- changes to fragments: no source setup needed to pick up the correct python version (set by LCG_Interfaces/Python)

!20041206 - Stefan
- new attribute 'checkMeth' (TRUE|FALSE) of <bitfield> which will generate
  a method to check whether a certain bit of the bitfield is set

!20041205 - Stefan
- package rewritten in python
- new features:
  - explicit constructors (attribute 'explicit' (TRUE|FALSE) in <constructor>)
  - printing of objects on MsgStream
  - set,addTo,removeFrom methods also with relation type pointer as argument
    (before only SmartRef<T>)
  - set/get methods of bitfields with self defined types (att 'type' in <bitfield>)
  - better alignment of produced code
- backward compatible to cpp version of GOD
- new cmt fragment 'godify' for generating headers and dictionaries
  (old fragments will also work)
- some options are not used anymore (deprication warnings are printed) and will
  be removed in a future version
- new script genGODsClassDB.py for generating the class database used by GOD

!===============================GaudiObjDesc v6r3p1==========================
!20041117 - Stefan Roiser
- fixed char* handling (has to be done through Xerces tools)

!===============================GaudiObjDesc v6r3============================
!20040716 - Pere Mato, Stefan Roiser
- added test: xml file, python test, tec.

!20040706 - Pere Mato
- requirements: adapted to use new LCGCMT interface packages

!===============================GaudiObjDesc v6r2p3============================
!20040614 - Stefan
- removed include for RelationsDict.h for general dictionary files (only for <assoc> left)

!20040604 - Stefan
- bugfix: getters in dictionaries sometimes returned by value instead ref
          params for relation setters are now refs in the dictionary
	  change to SmartRefDict<T>, renamed functions "equals" to "=="
	  and "nonequals" to "!=", removed function "data"

!20040512 - Stefan
- bugfix: Class::resolvePending() now called at the end of the loading of
          each file
- Constructor of the dictionary now called by the _InitDict() constructor,
  not static instance anymore

!20040206 - Stefan
- bugfix: errorReporter attached to Xerces parser was deleted too early

!===============================GaudiObjDesc v6r2p2============================
!20040122 - Stefan
- added macros to KeyedDictionary.h and SealDictionary.h in order to allow instantion
  of dictionaries through macros (needed e.g. when dictionary production through GOD
  is not possible because of usage of non GOD compliant containers in Event packages)

!===============================GaudiObjDesc v6r2p1============================
!20040107 - Stefan
- bugfix: <import> did not work for associations
- bugfix: GaudiCppExport.xml added information for ITCluster, L1Track2d
          L1Track3d and OTCluster
- new script to produce GaudiCppExport.xml automatically (not used for this version)

!===============================GaudiObjDesc v6r2==============================
!20031219 - Stefan
- bugfix: converting XMLCh* to char* when using string with possible replacement

!===============================GaudiObjDesc v6r1==============================
!20031217 - Stefan
- <assoc> is now a sub-element of <package>
- new attribute "from" for element <assoc>
- a new file <packagename>_Associations_dict.cpp will be created containing
  the initialisations for associations dictionaries for each package

!===============================GaudiObjDesc v6r0==============================
!200312 - Stefan
- new element <assoc> to specify associations between event objects
  - attributes "to" for the associated object
               "weight" to specify the type of weight (e.g. int)
               "type" to specify the type of association (either "1D" or "2D")
- new attribte "transient" for <attribute>-element (values "TRUE" or "FALSE")

!===============================GaudiObjDesc v6r0==============================

!20031004 - Stefan
- changes to DaDiCppDict to produce output which complies to SEAL dictionaries

!20030701 - Stefan
- changes to bitfields
  - setters of bitfields with length 1 accept bool as argument
  - getters of bitfields with length 1 return bool
  - new sizes for bitfields 'bitfield8', 'bitfield16', 'bitfield32' and
    'bitfield64'. Old type 'bitfield' is equal 'bitfield32'
  - bitfield-attribute 'startAtOne' removed

!===============================GaudiObjDesc v5r2==============================
!20031211 - Stefan
- bugfix: replaced XMLString::release with delete[] for XMLCh[] in some cases

!===============================GaudiObjDesc v5r1==============================
!20031126 - Pere Mato
- Changes for Mac OSX (Guy Barrand)

!===============================GaudiObjDesc v5r0==============================
!20030430 - Stefan
- changed to new version of Xerces 2.2.0
- fixes of memory-leaks after valgrind-tests

!===============================GaudiObjDesc v4r7==============================
!20030115 - Stefan, Pere
- removed SetDTD setup script from requirements
- avoided to define GAUDIOBJDESCROOT when building packages

!20030110 - Stefan
- serialization of enums
- fillStream called also for base-classes
- implementation of templated methods inside class-body (due to vc6 restrictions)

!===============================GaudiObjDesc v4r5p1============================
!20021112 - Stefan
- bugfix: corrected the output for 'const' return-values of self-defined methods

!===============================GaudiObjDesc v4r5============================
!20020925 - Stefan
- new database of header-files generated
- meta-information about constructors added to the dictionary-files

!===============================GaudiObjDesc v4r4p1============================

!20020910 - Flr
 requirements - use v* in "use" statements

!===============================GaudiObjDesc v4r4===============================

!20020619 - Stefan
- introduced new value for 'inout'-attribute of =arg=-element called 'BYVALUE' to be
  able to force the passing of a non-simple argument by value

!20020617 - Stefan
- handling of offsets to abstract-interface-classes
- use friend-classes for investigation of offsets instead of defines
- no dictionary-information for private, protected, pure virtual and friend-functions
- changes to dictionary-fragments to produce the class with the friend-class in the dict-directory

!===============================GaudiObjDesc v4r3===============================

!20020514 - Stefan
 - Implementations of friend-functions will be done inside the class-body again, because of link-problems

!===============================GaudiObjDesc v4r3===============================

!20020513 - Stefan
 - Added <attribute=- and <relation>-attribute 'serialize' to specify whether to persistify an object
 - Added <attribute>-attribute 'compression' to enable conversion double<->float
   while serializing to compress the resulting size
 - Added new <bitfield>-element to handle bitpacking
 - friend-functions are now implemented outside the class-body

!================v4r2=====================================
! 20020503 Pere Mato
- Small problem on the fragment obj2doth_header that forced the re-creation of
  all header files each time.
- Some changes in the generation of dictionaries:
  ~ In methods avoid use of static variables for complex types (one one instance available)
  ~ The same for accessor methods
  ~ The return type for relations was not correct in the MetaMethod creation

!================v4r1=====================================

! 20020416 Stefan Roiser
 - Added <class>-attribute 'keyedContTypeDef' to force the production of typedefs for KeyedContainers which are inherited
   indirectly from 'KeyedObject' but cannot be resolved through the xml-file (inheritance from a class defined in another xml-file)
 - Gaudi-type 'longlong' recognized as fundamental-one

!================v4r0=====================================
! 20020328 Stefan Roiser
  - changes to produce dictionary-information compliant to the new interface of GaudiIntrospection v4r0

! 20020328 Pere Mato
  - Added ${CONSTITUENT}_GODflags in fragments

! 20020327 Pere Mato
  - Changes needed for Solaris (by Wim.Lavrijsen). Details:
    +++ GaudiObjDesc/src/DaDiCppHeader.cpp
        several const added
    +++ GaudiObjDesc/src/DaDiCppDict.cpp
        several const added

! 20020325 - Stefan Roiser
 - bugfix no reference for arguments which are fundamental types of more then one word (e.g. signed int)

! 20020319 - Stefan Roiser
 - bugfix when using stdVectorTypeDef to create type std::vector<classname*>

!==================v3r3p1=================================
! 20020404
 - automatic include of <utility> when using std::pair
 - automatic include of GaudiKernel/StreamBuffer.h for every class
 - bugfix for dict-fragment when processing more than one xml-file

!==================v3r3===================================
! 20020403
 - added command-line option '-l <path>' for GODWriteCppDict.exe to define the location of the .h-files

! 20020402
 - branch created
 - necessary patches from v4r0 applied (const chars for sun-compiler, handling of fundamental types)
 - bugfix when compiling dictionary-information with unary operators
 - bugfix when using virtual selfdefined methods

================v3r2=====================================
! 20020319 - Stefan Roiser
 - introduced new <class>-attribute 'stdVectorTypeDef' for typedef of a std::vector of class-pointer
 - introduced new <class>-attribute 'serializers' to enable/disable writing of serialize-functions
 - bugfix typedefs and enums used in function-implementations outside class now prefixed with 'ClassName::'

! 20020318 - Stefan Roiser
 - applying naming rules for getters with abbreviations also to _dict.cpp-files

! 20020314 - Stefan Roiser
 - bugfix when using methods inside namespaces
 - bugfix declaring public enums before method-definitions

! 20020313 - Stefan Roiser
 - attribute 'array' introduced in <attribute>-element
 - element <method> inside <namespace> introduced
 - bugfix when using forward-declarations <import name='packname/classname' soft='TRUE'/>
 - bugfix no double includes of classes when specified in package- and class-scope
 - attribute noQuote for <location>-element introduced (when concatenating variables)

! 20020227 - Stefan Roiser
 - GaudiObjDesc independent from GaudiKernel
 - added tag 'ignore' to <import>-element for non-inclusion of types
 - new naming-conventions for getters with abbreviations
 - non-const getter for non-simple attributes, 1-M relations and pointers
 - empty initialization of members in standard-constructor when initialization-value is given
 - only one setter for 1-1-relations with SmartRef<Type> as argument
 - only one addTo- and removeFrom-function for 1-M-relations with SmartRef<Type> as argument

!================v3r1=====================================
! 20020214 - Stefan Roiser
 - added <typedef> and <desc> as sub-elements of <namespace>
 - added 'author'-attribute to <namespace>
 - bugfix: Defs of <typedef>s recognized as types which do not have to be included
 - bugfix: classes created through xml-file will be added to 'class-database' ad Event/'ClassName'
 - handling of pointers as simple types

!================v3r0=====================================
! 20020130 - Stefan Roiser
 - added function to locate the place in the TDS
 - added possibility to make pure virtual functions
 - added 'translator' for unregular plurals

! 20021028 - Stefan Roiser
 - <namespace>-element introduced
 - fragments will now write the output to sub-dir "Event"
 - new 'database' of classes generated from Gaudi v9r0
 - bugfixes applied (writing to public, protected, private; including of unknown classes)
 - typedef for KeyedContainer added if derived from KeyedObject

! 20020118 - Stefan Roiser
 - bugfix applied for better handling of fundamental types
 - <enum>-element introduced
 - attribute 'initList' for special constructors introduced, which will handle initialization
   outside the {-paranthesis

! 20011207 - Stefan Roiser
 - Better formatting standard output streams

! 20011130 - Pere Mato
 - changed generation of "getters" for 1-1 relations to return a pointer instead of SmartRef<>

! 20011123 - Stefan Roiser
 - changed serializing functions and operator overloading

! 20011105 - Stefan Roiser
 - added serializing functions and operator overloading for serializing objects

! 20011101 - Stefan Roiser
 - relation-attribute 'ratio' renamed to 'multiplicity', possible values '1', 'M', 'm', 'N', 'n'
   fragment for cpp-file production for dictionaries changed, destination is now /dict
   classID-information added to cpp-files for passing it to the dictionary

! 20011029 - Stefan Roiser
 - several changes in order to achieve linux compliance

! 20011019 - Stefan Roiser
 - many small changes: handling of arguments in selfdefined methods, concatenate class descriptions, produce
   at least one empty constructor, handling and errorhandling of class-attribute 'argList'

! 20011018 - Stefan Roiser
 - CppWriter generates an entry (classname - packagename/classname) to the 'Headerdatabase' before writing the cpp

! 20011017 - Stefan Roiser
 - Added production of non-standard constructors, destructors, warning at top of file

! 20011010 - Stefan Roiser
 - Changed production of serializers in .h-files

! 20011009 - Stefan Roiser
 - Many small changes to polish the code generation

! 20011003 - Stefan Roiser, Pere Mato
 - New package

