// $Id: $
// ============================================================================
// Include files 
// ============================================================================
// STD/ STL
// ============================================================================
#include <ostream>
// ============================================================================
// local
// ============================================================================
#include "LoKi/FirstN.h"
// ============================================================================
/** @file 
 *  Implementation file for class LoKi::FirstN
 *
 *  @see LoKi::FirstN 
 *  @author Vanya Belyaev Ivan.Belyaev@cern.ch
 *  @date   2011-10-30 
 * 
 *                    $Revision$
 *  Last modification $Date$
 *                 by $Author$
 */
// ============================================================================
// constructor
// ============================================================================
LoKi::FirstN::FirstN ( const unsigned int N )                    // constructor
  : m_N ( N ) 
{}
// ============================================================================
// destructor
// ============================================================================
LoKi::FirstN::~FirstN () {}
// ============================================================================
// printout 
// ============================================================================
std::ostream& 
LoKi::FirstN::fillStream ( std::ostream& s ) const
{ return s << " FirstN(" <<  m_N << ") " ; }
// ============================================================================
// output operator 
// ============================================================================
std::ostream& 
operator<< ( std::ostream& s , const LoKi::FirstN& o ) 
{ return o.fillStream  ( s ) ; }
// ============================================================================

// ============================================================================
// constructor
// ============================================================================
LoKi::Reverse::Reverse(){}
// ============================================================================
// destructor
// ============================================================================
LoKi::Reverse::~Reverse(){}
// ============================================================================
// printout 
// ============================================================================
std::ostream& 
LoKi::Reverse::fillStream ( std::ostream& s ) const
{ return s << " reverse " ; }
// ============================================================================
// output operator 
// ============================================================================
std::ostream& 
operator<< ( std::ostream& s , const LoKi::Reverse& o ) 
{ return o.fillStream  ( s ) ; }
// ============================================================================

// ============================================================================
// constructor 
// ============================================================================
LoKi::Sort::Sort
( const int  N          , // ALL 
  const bool ascending  ) 
  : m_N         ( N         ) 
  , m_ascending ( ascending ) 
{}
// ============================================================================
// virtual destructor 
// ============================================================================
LoKi::Sort::~Sort (){}
// ============================================================================
// printout 
// ============================================================================
std::ostream& 
LoKi::Sort::fillStream ( std::ostream& s ) const
{ 
  s << " Sort(" ;
  if ( !m_ascending || 0 <= m_N ) { s << "," << m_N     ; }
  if ( !m_ascending || 0 <= m_N ) { s << "," << "False" ; }
  return s << ") " ;
}  
// ============================================================================
// output operator 
// ============================================================================
std::ostream& 
operator<< ( std::ostream& s , const LoKi::Sort& o ) 
{ return o.fillStream  ( s ) ; }
// ============================================================================

// ============================================================================
// The EN
// ============================================================================

