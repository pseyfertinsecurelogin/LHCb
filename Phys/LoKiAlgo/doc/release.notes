! $Id: release.notes,v 1.31 2008-04-03 13:54:36 cattanem Exp $ 
! -----------------------------------------------------------------------------
! Package     : Phys/LoKiAlgo
! Responsible : Vanya BELYAEV ibelyaev@physics.syr.edu
! Purpose     : LoKi-algorithm related stuff 
! -----------------------------------------------------------------------------

!========================== LoKiAlgo v7r2 2008-04-03 ==========================
! 2008-03-31 - Vanya BELYAEV 
 - LoKi/Algo.h, src/Algo.cpp
   make a possibility to define the loop in term of "decays":

   const DaVinci::Decay& decay = ... ;

    for ( Loop B = loop ( decay ) ; B ; ++B )
    {
       ...
    } 

 - cmt/requirements
    version increment to v7r2

!========================== LoKiAlgo v7r1p1 2008-03-15 ========================
! 2008-03-15 - Vanya BELYAEV
 - python/LoKiAlgo/decorators.py
   fix the incorrect inheritance  (needed for Bender)

 - src/Algo.cpp
    remove the line which (re)sets the proeprty "PropertiesPrint", 

 - cmt/requirements
    version increemtn to v7r1p1 

!========================== LoKiAlgo v7r1 2008-02-24 ==========================
! 2008-02-24 - Vanya BELYAEV
 - LoKi/LoopObj.icpp 
   src/LoopObj.cpp
     : fix unchecked error codes

! 2008-02-11 - Vanya BELYAEV
 - minor fixes due to new Gaudi/ROOT/Reflex 
 - cmt/requirmements 
      version increment to v7r1 

!========================== LoKiAlgo v7r0 2007-12-04 ==========================

! 2007-12-04 - Vanya BELYAEV
 - LoKi/GetLoKiAlgo.h, src/GetLoKiAlgo.cpp
   new function to access the class LoKi::Algo form the context 

! 2007-12-03 - Vanya BELYAEV
 - the major update for the new LoKi v7r0 ("The powerful streamers")
 - cmt/requirmeents 
   version increment to v7r0 

!========================== LoKiAlgo v6r1 2007-10-08 ==========================
! 2007-10-07 - Vanya BELYAEV
 - cmt/requirements 
    increment version to v6r1 
    use new pattern for python modules 

!========================== LoKiAlgo v6r0 2007-09-04 ==========================
! 2007-08-20 - Vanya BELYAEV
 - increment the major version to v6r0 

! 2007-07-23 - Vanya BELYAEV
 - many tiny fixes to speedup compilation, decrease dictionaries 
   and improve doxygen
 - remove src\MomentumCombiner.cpp

 - cmt/requirements
   version increment to v4r1

!========================== LoKiAlgo v4r0 2007-06-10 ==========================
! 2007-06-10 - Vanya BELYAEV
 - many small fixes to please Reflex, make functions vizible in python
   and to achive a coherent interface


! 2007-06-04 - Vanya BELYAEV
 - Solve the compilation problem on Win32 platform
    (Many thanks to Stefan ROISER for solution!)
 - Modified files 
    LoKi/Loop.h
    LoKi/LoopObj.h
    LoKi/Algo.h
    LoKi/LoopDecorator.h
    LoKi/AlgoDecorator.h
    dict/LoKiAlgo.xml
    dict/LoKiAlgoDict.h

! 2007-06-01 - Vanya BELYAEV
 - prepare for the new major version: v4r0 

 - New files:

   LoKi/ExtCalls.h

   dict/LoKiAlgo.xml
   dict/LoKiAlgoDict.h

   python/LoKiAlgo/__init__.py
   python/LoKiAlgo/decorators.py
   python/LoKiAlgo/functions.py
   python/LoKiAlgo/tests.py

 - Modified files:

   LoKi/LoopObj.icpp
   src/Algo.cpp

 - cmt/requirements
    version increment to v4r0 


!========================== LoKiAlgo v3r2p1 2007-04-19 ===================
! 2007-04-19 -  P. Koppenburg
  Remove controversial doxygen comment

!========================= LoKiAlgo v3r2 2007-03-09 ====================
! 2007-03-05 - Patrick Koppenburg
 - Get vector types from GaudiKernel
 - Increment to v3r2

!========================= LoKiAlgo v3r1 2007-01-18 ====================

! 2007-01-18 - Vanya BELYAEV
 - cmt/requirements   
     version increment to v3r1 

 - Loop/LoopObj.h, src/LoopObj.icpp
   reimplement the methods momentum(),p() and mass() 
   to get a result *ONLY* through the 4-momentum addition.
   In particular it means that from now: 
  
     momentum ( ) != momentum ( 0 ) 
     p        ( ) != p        ( 0 ) 
     mass     ( ) != mass     ( 0 ) 

 - LoKi/Algo.h, src/Algo.cpp 

    change the signature for LoKi::Algo::pattern functions 
      in BACKWARD INCOMPATIBLE way: 

    /** shortcut for the following symbolic expression:
     * 
     *  @code 
     * 
     * {
     *  loop->backup()  ;
     *  for ( ; loop ; ++loop ) 
     *   {
     *     // get the mass from the sum of LorentzVectors 
     *     const double mass = loop->mass() ;
     *     // apply a mass window 
     *     if ( low > mass || high > mass ) { continue ; } 
     *     // use the explicit refitter (if needed) 
     *     if ( 0 != fitter && loop->reFit( fitter ).isFailure() ) { continue ; }
     *     // apply the vertex cuts 
     *     if ( !vcut ( loop ) ) { continue ; }
     *     // apply other cuts cuts 
     *     if ( ! cut ( loop ) ) { continue ; }
     *     loop->save ( tag ) ;
     *   }
     *  loop->restore() ;
     *  return selected ( tag ) ;
     * } ;
     * 
     *  @endcode 
     *
     *  @param tag  the symbolic unique tag 
     *  @param loop the looping object itself 
     *  @param low  low edge for mass window 
     *  @param high high edge for mass window 
     *  @param cut  cut to be used for filtering 
     *  @param vcut vertex cut to be used for filtering 
     *  @param fitter refitter to be applied before cuts 
     *  @return the selected range of particles 
     */
    LoKi::Types::Range pattern
    ( const std::string&        tag        , 
      const LoKi::Loop&         loop       ,
      const double              low        , 
      const double              high       ,
      const LoKi::Types::Cuts&  cut        , 
      const LoKi::Types::VCuts& vcut       , 
      const IParticleReFitter*  fitter = 0 ) ;
    
    /** shortcut for the following symbolic expression:
     * 
     *  @code 
     * 
     * {
     *  loop->backup()  ;
     *  for ( ; loop ; ++loop ) 
     *   {
     *     // get the mass from the sum of LorentzVectors 
     *     const double mass = loop->mass() ;
     *     // apply a mass window 
     *     if (  abs( mass - nominal ) > window ) { continue ; } 
     *     // use the explicit refitter (if needed) 
     *     if ( 0 != fitter && loop->reFit( fitter ).isFailure() ) { continue ; }
     *     // apply the vertex cuts 
     *     if ( !vcut ( loop ) ) { continue ; }
     *     // apply other cuts cuts 
     *     if ( ! cut ( loop ) ) { continue ; }
     *     loop->save ( tag ) ;
     *   }
     *  loop->restore() ;
     *  return selected ( tag ) ;
     * } ;
     * 
     *  @endcode 
     *
     *  @param tag  the symbolic unique tag 
     *  @param loop the looping object itself 
     *  @param window the width of the mass window 
     *  @param cut  cut to be used for filtering 
     *  @param vcut vertex cut to be used for filtering 
     *  @param fitter refitter to be applied before cuts 
     *  @return the selected range of particles 
     */
    LoKi::Types::Range pattern
    ( const std::string&        tag        , 
      const LoKi::Loop&         loop       ,
      const double              window     , 
      const LoKi::Types::Cuts&  cut        , 
      const LoKi::Types::VCuts& vcut       , 
      const IParticleReFitter*  fitter = 0 ) ;
    
    /** shortcut for the following expression:
     *
     *  @code 
     *
     * { 
     *  loop->backup()  ;
     *  for ( ; loop ; ++loop ) 
     *   { 
     *     // get the mass from the sum of LorentzVectors 
     *     const double mass = loop->mass() ;
     *     // apply a mass window 
     *     if ( low > mass || high > mass ) { continue ; } 
     *     // apply vertex selection cuts  
     *     if ( !vcut1 ( loop ) ) { continue ; }
     *     // apply selection cuts 
     *     if ( ! cut1 ( loop ) ) { continue ; }
     *     // refit 
     *     if ( loop->reFit( fitter ).isFailure() ) { continue ; }
     *     // apply vertex selection cuts  
     *     if ( !vcut2 ( loop ) ) { continue ; }
     *     // apply selection cuts 
     *     if ( ! cut2 ( loop ) ) { continue ; }
     *     loop->save ( tag ) ;
     *   }
     *  loop->restore() ;
     *  return selected ( tag ) ;
     * }
     *
     *  @endcode 
     *
     *  @param tag   the symbolic unique tag 
     *  @param loop  the looping object itself 
     *  @param low   low edge for mass window 
     *  @param high  high edge for mass window 
     *  @param cut1  cut to be used for filtering before refit
     *  @param vcut1 vertex cut to be used for filtering before refitt
     *  @param fitter refitter to be applied before cuts 
     *  @param cut2  cut to be used for filtering after refit
     *  @param vcut2 vertex cut to be used for filtering after refitt
     *  @return the selected range of particles 
     */
    LoKi::Types::Range pattern
    ( const std::string&        tag    , 
      const LoKi::Loop&         loop   ,
      const double              low    , 
      const double              high   , 
      const LoKi::Types::Cuts&  cut1   , 
      const LoKi::Types::VCuts& vcut1  , 
      const IParticleReFitter*  fitter , 
      const LoKi::Types::Cuts&  cut2   , 
      const LoKi::Types::VCuts& vcut2  ) ;    

    /** shortcut for the following expression:
     *
     *  @code 
     *
     * { 
     *  loop->backup()  ;
     *  for ( ; loop ; ++loop ) 
     *   { 
     *     // get the mass from the sum of LorentzVectors 
     *     const double mass = loop->mass() ;
     *     // apply a mass window 
     *     if ( low > mass || high > mass ) { continue ; } 
     *     // apply vertex selection cuts  
     *     if ( !vcut1 ( loop ) ) { continue ; }
     *     // apply selection cuts 
     *     if ( ! cut1 ( loop ) ) { continue ; }
     *     // refit 
     *     if ( loop->reFit( fitter ).isFailure() ) { continue ; }
     *     // apply vertex selection cuts  
     *     if ( !vcut2 ( loop ) ) { continue ; }
     *     // apply selection cuts 
     *     if ( ! cut2 ( loop ) ) { continue ; }
     *     loop->save ( tag ) ;
     *   }
     *  loop->restore() ;
     *  return selected ( tag ) ;
     * }
     *
     *  @endcode 
     *
     *  @param tag    the symbolic unique tag 
     *  @param loop   the looping object itself 
     *  @param window the width of the mass window around nominal mass 
     *  @param high  high edge for mass window 
     *  @param cut1  cut to be used for filtering before refit
     *  @param vcut1 vertex cut to be used for filtering before refitt
     *  @param fitter refitter to be applied before cuts 
     *  @param cut2  cut to be used for filtering after refit
     *  @param vcut2 vertex cut to be used for filtering after refitt
     *  @return the selected range of particles 
     */
    LoKi::Types::Range pattern
    ( const std::string&        tag    , 
      const LoKi::Loop&         loop   ,
      const double              window , 
      const LoKi::Types::Cuts&  cut1   , 
      const LoKi::Types::VCuts& vcut1  , 
      const IParticleReFitter*  fitter , 
      const LoKi::Types::Cuts&  cut2   , 
      const LoKi::Types::VCuts& vcut2  ) ;    

  - LoKi/Algo.h. src/Algo.cpp 
    add a *STATIC* accessors to "currently executing LoKi-based algorithm"
    ( needed to enhance drastically the planned LoKiHybrid functionality) 
  
      One can access it through: 
        
    LoKi::Algo* current = LoKi::Algo::currentAlgo() ;
   



!========================= LoKiAlgo v3r0 2007-01-09 ====================
! 2007-01-09 - Florence RANJARD
 - install include files

!========================== LoKiAlgo v2r2 2006-12-01 ===================

! 2006-12-01 - Ivan Belyaev
 - LoKi/Algo.h, src/Algo.cpp
   geo(...) : use VertexBase instead of Vertex 
 - cmt/requirements
   version increment to v2r2 


!========================== LoKiAlgo v2r1 2006-10-11 ===================

! 2006-10-10 - Vanya BELYAEV
 - LoKi/Algo.h
    tiny fix for reflex/python dictionaries 
 - cmt/requirements
    version increment to v2r1 

!========================== LoKiAlgo v2r0 2006-08-30 ===================

! 2006-08-16 - Vanya BELYAEV

 - LoKi/Algo.h, src/Algo.cpp
   implement the coupel of function to access the "names cuts":

    double cutValue ( const std::string& name  ) const ;
    double cutValue ( const std::string& name  , 
                      const double       value ) const ;
   
   The valuess of the cuts are specified through job-options:

        MyAlg.Cuts = { "PMin" : 5000 , "PTmin" : 1000 } ;

   access in the code :

        Cut cut1 = P  > cutValue( "PMin" ) ;
        Cut cut2 = PT > cutValue( "PMin" ) ;


 - LoKi/LoopObj.h, src/LoopObj.cpp
   couple of minor fixes for updated DVAlgorithm and LoKi::Algo    
     
 - cmt/requirement 
   version increment to v2r0 
 

!========================== LoKiAlgo v1r2 2006-07-07 ===================

! 2006-06-23 - Juan PALACIOS
  - LoKiAlgo/LoopObj.h
    . remove print method (now in LoKiGen, v1r5 or higher)
  - cmt/requirements
    . move version number to v1r2


! 2006-05-26 - Vanya  BELYAEV ibelyaev@physics.syr.edu
 - many fixes in LoKi::Algo & LoKi::LoopObj 
 - cmt/requirements
    version incrmenet to v1r1  

! -----------------------------------------------------------------------------
! The END 
! -----------------------------------------------------------------------------
