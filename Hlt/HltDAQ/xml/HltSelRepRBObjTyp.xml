<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Tomasz Skwarnicki -->
<!--- Created : 2008-08-01 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>


  <package name='HltDAQ'>

    <class 
       name  = 'HltSelRepRBObjTyp'
       author= 'Tomasz Skwarnicki'
       desc  = 'Manages the RawBank::HltSelReports object type sub-bank.
All info is stored in 16-bit shorts (packed in 32-bit words).
The first short is a number of object types stored.
The second short is the allocated length of the bank (in 32-bit words).
This is followed by 1 long word per object type. 
The more significant short is the class identified (CLID).
Less significant short gives cumulative count of the objects stored (of all types).
For convenience of having the same type of iterator as other object sub-banks
the iterator iterates over object number and not object type number.
Also push_back operator puts in single object CLID. Objects must be sorted
by the CLID before using this insertor.
'
      >

     <enum 
        name = 'DefaultAllocation'
        desc = 'default allocation size in 32-bit words for new bank or increment in its extension'
        value ='kDefaultAllocation=50'
        access = 'PUBLIC'
        />
                         
     <enum 
        name = 'InitialPositionOfIterator'
        desc = 'iterator value to access the first element'
        value ='kInitialPosition=1'
        access = 'PUBLIC'
        />
                         
     <import name='HltSelRepRBEnums' />
     <import name='GaudiKernel/GaudiException' />
     <import name='vector' std='TRUE' />


     <attribute 
	type = 'unsigned int*'
	name = 'location'
	desc = 'Location of the subbank body in the program memory'
	init = '0' 
        />

     <attribute 
	type = 'unsigned int'
	name = 'iterator'
	desc = 'internal iterator - gives current position in number of long word'
	init = 'kInitialPosition' 
        setMeth = 'FALSE'
        />

     <attribute 
	type = 'unsigned int'
	name = 'objiterator'
	desc = 'internal object iterator - gives current object count (used in association with iterator)'
	init = '0' 
        setMeth = 'FALSE'
        />

     <constructor
        argList='unsigned int* pBankBody'
        initList='m_location(pBankBody),m_iterator(kInitialPosition),m_objiterator(0)'
        desc='takes pointer to the memory location of the subbank body as input'
	/>


      <method
          name ='numberOfObjTyp'
          type ='unsigned int'
          desc ='Number of Object Types in the sub-banks'
          const='TRUE'
          >
        <code>
          noBank();
          return (unsigned int)( m_location[0] &amp; 0xFFFFL );
        </code>
      </method>

      <method
          name ='numberOfObj'
          type ='unsigned int'
          desc ='Number of Objects in the sub-banks'
          const='TRUE'
          >
        <code>
          noBank();
          if( numberOfObjTyp() )
          return (unsigned int)( m_location[numberOfObjTyp()] &amp; 0xFFFFL );
          return 0;
        </code>
      </method>


     <method
	name = 'allocatedSize'
	type = 'unsigned int'
	desc = 'length of the subbank in long words (allocated)'
        const='TRUE'
         >
        <code>
          noBank();
          return (unsigned int)( ( m_location[0] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
        </code>
      </method>


     <method
	name = 'saveSize'
	type = 'void'
	desc = 'replace allocated size by actual size before saving (no write access after that - deleteBank)'
        const='TRUE'
         >
        <code>
          noBank();
            unsigned int s=size(); // size() looks at allocated size so calculate it before we mess up with allocated
 	    m_location[0] &amp;= 0xFFFFL;
            m_location[0] |=  ( s &lt;&lt; 16 );
        </code>
      </method>


     <method
        name = 'noBank'
        type = 'void'
        desc = 'throw exception on access to non-allocated bank'
        const= 'TRUE'
        >
        <code>
          if( !m_location )
          throw GaudiException( "Accessing non-allocated bank in HltSelRepRBObjTyp","HltSelRepRBObjTyp",StatusCode::FAILURE );
        </code>
      </method>


      <method
	   name ='integrityCode'
	   type ='unsigned int'
	   desc ='reports bank integrity level 0=OK'
	   const='TRUE'
	   >
	<code>
	  if( !m_location )return ((unsigned int)HltSelRepRBEnums::kNoBank); 
	  //empty bank is OK: if( !numberOfObjTyp() )return ((unsigned int)HltSelRepRBEnums::kEmptyBank); 
	  if( !allocatedSize() )return ((unsigned int)HltSelRepRBEnums::kZeroAllocatedSize); 
          if( numberOfObjTyp() > ( allocatedSize() - 1 ) )return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);
          return ((unsigned int)HltSelRepRBEnums::kBankIsOK);
	</code>
      </method>

      <method 
        name ='next'
        type ='unsigned int'
        desc='gets CLID from current object iterator position, advances object iterator to next position'
        >
        <code>
          if( m_objiterator >= numberOfObj() )
          throw GaudiException( "Iterating beyond number of objects in the bank in HltSelRepRBObjTyp","HltSelRepRBObjTyp",StatusCode::FAILURE );
          unsigned int s=size();
          unsigned int iWord = m_iterator;
          if( iWord&gt;= s )
          throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBObjTyp","HltSelRepRBObjTyp",StatusCode::FAILURE );
          unsigned int nObj =   ( m_location[iWord] &amp; 0xFFFFL );
          unsigned int clid =  ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
          ++m_objiterator;
          if( m_objiterator &gt;= nObj )++m_iterator;
          return clid;
        </code>
      </method>  

      <method
        name='rewind'
        type='void'
        desc='reset iterator to the initial position'
        >
        <code>
          m_iterator = kInitialPosition;
          m_objiterator = 0;
        </code>
      </method>

      <method 
        name ='size'
        type ='unsigned int'
        desc ='actual size of the bank in long words'
        const='TRUE'
        >
        <code>
          return (numberOfObjTyp()+1);
        </code>
      </method>  

      <!-- methods which may relocate the bank -->

      <method
        name ='push_back'
        type ='void'
        argList='unsigned int clid'
        desc ='Add object and its id to the bank. Must add objects of the same id sequencially.'
        >
        <code>

          // allocate new bank if neccessary
          if( !m_location ){
            unsigned int len = kDefaultAllocation;
	    initialize( len );
          }

          // re-locate the bank body if necessary  
          unsigned int aSize = allocatedSize();
          unsigned int nSize = m_iterator + 1; // presume we may need to add new id
          if( nSize &gt; aSize ){
            unsigned int len = aSize + kDefaultAllocation;
            unsigned int* newLocation = new unsigned int[len];
            for(unsigned int i=0;i!=aSize;++i){ newLocation[i]=m_location[i]; }
            delete[] m_location;            
            m_location=newLocation;  
	    m_location[0] &amp;= 0xFFFFL;
            m_location[0] |=  ( len &lt;&lt; 16 );
          }

          // add the object type  -------------------------------------
          unsigned int iWord = m_iterator;
          unsigned int nObj =   ( m_location[iWord] &amp; 0xFFFFL );
          unsigned int clidold =  ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
          if( nObj != m_objiterator )
          throw GaudiException( "Illegal push_back in HltSelRepRBObjTyp","HltSelRepRBObjTyp",StatusCode::FAILURE );
          ++m_objiterator;
          if( clidold != clid ){
               unsigned int n = ( m_location[0] &amp; 0xFFFFL );
               if( n ){++m_iterator; iWord= m_iterator; }
               m_location[iWord] = (clid  &lt;&lt; 16);
               ++n;
               m_location[0] = ( ( m_location[0] &amp; 0xFFFF0000L ) | n );                
          }
          m_location[iWord] = ( ( m_location[iWord] &amp; 0xFFFF0000L ) | m_objiterator );
        </code>
      </method>

      <method
        name ='deleteBank'
        type ='void'
        desc ='delete the bank from program memory'
        >
        <code>
          delete[] m_location;
        </code>
      </method>

      <method
        name ='clear'
        type ='void'
        desc ='clear bank content without deleting'
        >
        <code>
          // number of substr set to 0
          m_location[0] &amp;=  ~0xFFFFL;
          m_location[1] =0;
	  rewind();
        </code>
      </method>

      <method
        name ='initialize'
        type ='void'
	argList='unsigned int len=kDefaultAllocation'
        desc ='create a new bank with given allocation len and initialize it (does not delete old bank if any)'
        >
        <code>
            if( len &lt; 1 )len = kDefaultAllocation;
            m_location = new unsigned int[len]; 
            m_location[0] =  (len &lt;&lt; 16);
            m_location[1] =0;
            rewind();
        </code>
      </method>


     <!-- readable printout -->

      <method
        name='fillStream'
        type='std::ostream&amp;'
        desc='intelligent printout' 
        const='TRUE' >
        <arg name = "s" type="std::ostream" inout="BOTH"/>
        <code>
          unsigned int ic = integrityCode();
          s &lt;&lt; " HltSelRepRBObjTyp : { "  &lt;&lt; " nObjTyp " &lt;&lt; numberOfObjTyp() 
            &lt;&lt; " nObj " &lt;&lt; numberOfObj()
            &lt;&lt; " size Allocated " &lt;&lt; allocatedSize()   &lt;&lt; " Actual " &lt;&lt; size()
            &lt;&lt; " integrity code "  
            &lt;&lt; ic &lt;&lt; (" "+HltSelRepRBEnums::IntegrityCodesToString( ic ))
            &lt;&lt;  std::endl;
          if( 0==ic ){ 
            unsigned int iold=0;
            for(unsigned int iObjTyp=0;iObjTyp!=numberOfObjTyp();++iObjTyp){
               unsigned int iWord = kInitialPosition + iObjTyp;
               unsigned int nObj =   ( m_location[iWord] &amp; 0xFFFFL );
               unsigned int clid =  ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
               s &lt;&lt; "  " &lt;&lt; iObjTyp 
                 &lt;&lt; " type " &lt;&lt; clid  
                 &lt;&lt; " #-of-objs "  &lt;&lt; nObj-iold &lt;&lt; " cumulative "  &lt;&lt; nObj;
                 iold = nObj;
               s &lt;&lt; std::endl;
             }
          }
          s &lt;&lt; " }" &lt;&lt; std::endl;
          return s;
        </code>
      </method>

    </class>

  </package>


</gdd>
