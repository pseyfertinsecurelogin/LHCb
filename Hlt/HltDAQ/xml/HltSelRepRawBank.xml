<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Tomasz Skwarnicki -->
<!--- Created : 2008-07-30 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>

  <package name='HltDAQ'>

 
    <!-- HltSelRepRawBank -->

    <class 
      name  = 'HltSelRepRawBank'
      author= 'Tomasz Skwarnicki'
      desc  = 'Manages the RawBank::HltSelReports bank body and its sub-bank structure.
The class makes no assumptions about sub-bank substructure. However, it allows only one
irreplacable instance of each sub-bank type given by its id. Order of sub-banks is arbitrary,
but the sub-banks may be added only to the back of the bank. Random access to a sub-bank is
supported by either relative index within the bank or by its id.
The header of the bank body is fixed length and consists of 10 words.
The first word is the present allocated bank length (in number of 32-bit words).
First 3 bits of the 2nd word are number of sub-banks (max 8).
Consequent 3-bit chunks are sub-bank IDs (0-7).
Next 8 words are the first relative location in the bank body beyond given sub-bank.
Sub-banks immediately follow the header.'
      >

     <import name='HltSelRepRBEnums' />
    <import name='GaudiKernel/GaudiException' />

      <enum 
        name = 'Header'
        desc = 'positions of words in the header'
        value ='kAllocatedSize=0,
                kSubBankIDs=1,
                kSubBankLocations=2,
                kHeaderSize=10'
        access = 'PUBLIC'
        />
                         

      <enum 
        name = 'DefaultAllocation'
        desc = 'default allocation size in 32-bit words for new bank or increment in its extension'
        value ='kDefaultAllocation=3000'
        access = 'PUBLIC'
        />
                         

      <attribute 
	type = 'unsigned int*'
	name = 'location'
	desc = 'Location of the bank body in the program memory'
	init = '0' 
        />

     <constructor
        argList='unsigned int* pBankBody'
        initList='m_location(pBankBody)'
        desc='takes pointer to the memory location of the bank body as input'
	/>


      <method
        name = 'noBank'
        type = 'void'
        desc = 'throw exception on access to non-allocated bank'
        const= 'TRUE'
        >
        <code>
          if( !m_location )
          throw GaudiException( "Accessing non-allocated bank in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );
        </code>
      </method>

      <method
        name = 'validateIndex'
        type = 'void'
        argList = 'unsigned int iBank'
        desc = 'throw exception if no Bank or index invalid'
        const= 'TRUE'
        >
        <code>
          noBank();
          if( iBank&gt;HltSelRepRBEnums::kMaxBankID )
             throw GaudiException( "sub-bank index out of range in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );
        </code>
      </method>

      <method
          name ='numberOfSubBanks'
          type ='unsigned int'
          desc ='Number of sub-banks'
          const='TRUE'
          >
        <code>
          noBank();
          return (unsigned int)( m_location[kSubBankIDs] &amp; 0x7L );
        </code>
      </method>
          

      <method
          name='indexSubBank'
          type='unsigned int'
          argList='unsigned int idSubBank'
          desc='index of the sub-bank given its id (returns HltSelRepRBEnums::kUnknownID if not found)'
          const='TRUE'
          >
        <code>
          if( !m_location )return (unsigned int)(HltSelRepRBEnums::kUnknownID);
          for( unsigned int iBank=0;iBank!=numberOfSubBanks();++iBank ){
             if( subBankID(iBank)==idSubBank )return iBank;
          }
          return (unsigned int)(HltSelRepRBEnums::kUnknownID);
        </code>
      </method>
          
      <method
          name ='subBankID'
          type ='unsigned int'
          argList='unsigned int iBank'
          desc ='ID of the sub-bank iBank (iBank counts from 0)'
          const='TRUE'
          >
        <code>
          validateIndex(iBank);
          unsigned int bits = (iBank+1)*3; 
          unsigned int mask = 0x7L &lt;&lt; bits;
          return (unsigned int)(( m_location[kSubBankIDs] &amp; mask ) &gt;&gt; bits);
        </code>
      </method>

      <method
          name ='subBankBegin'
          type ='unsigned int'
          argList='unsigned int iBank'
          desc ='relative location of the sub-bank in the bank body in number of words given its index (0=means first word)'
          const='TRUE'
          >
        <code>
          validateIndex(iBank);
          if( iBank ){
             return m_location[kSubBankLocations+iBank-1];
          } else {
             return (unsigned int)kHeaderSize;
          }
        </code>
      </method>

      <method
          name ='subBankEnd'
          type ='unsigned int'
          argList='unsigned int iBank'
          desc ='relative location of the end() of sub-bank in the bank body in number of words given its index (0=means first word)'
          const='TRUE'
          >
        <code>
          validateIndex(iBank);
          return m_location[kSubBankLocations+iBank];
        </code>
      </method>

      <method
          name ='subBankBeginFromID'
          type ='unsigned int'
          argList='unsigned int idSubBank'
          desc ='relative location of the sub-bank in the bank body in number of words given its id (0=means first word)'
          const='TRUE'
          >
        <code>
          return subBankBegin( indexSubBank(idSubBank) );
        </code>
      </method>

      <method
          name ='subBankEndFromID'
          type ='unsigned int'
          argList='unsigned int idSubBank'
          desc ='relative location of the sub-bank in the bank body in number of words given its id (0=means first word)'
          const='TRUE'
          >
        <code>
          return subBankEnd( indexSubBank(idSubBank) );
        </code>
      </method>

      <method
          name ='subBankSize'
          type ='unsigned int'
          argList='unsigned int iBank'
          desc ='length of the sub-bank in number of words given its index'
          const='TRUE'
          >
        <code>
          validateIndex(iBank);
          return (subBankEnd(iBank)-subBankBegin(iBank));
        </code>
      </method>

      <method
          name ='subBankSizeFromID'
          type ='unsigned int'
          argList='unsigned int idSubBank'
          desc ='length of the sub-bank in number of words given its id'
          const='TRUE'
          >
        <code>
          return subBankSize( indexSubBank(idSubBank) );
        </code>
      </method>
         
      <method
          name ='subBankFromID'
          type ='unsigned int*'
          argList='unsigned int idSubBank'
          desc ='pointer to the subbank given its id (0 returned if not found)'
          const='TRUE'
          >
        <code>
          unsigned int loc = subBankBeginFromID( idSubBank );
          if( !loc )return 0;
          validatePtr( loc );
          return &amp;(m_location[loc]);
        </code>
      </method>

      <method
          name ='allocatedSize'
          type ='unsigned int'
          desc ='allocated bank body size'
          const='TRUE'
          >
        <code>          
          noBank();
          return m_location[kAllocatedSize];
        </code>
      </method>

      <method
	name = 'saveSize'
	type = 'void'
	desc = 'replace allocated size by actual size before saving (no write access after that - deleteBank)'
        const='TRUE'
         >
        <code>
          noBank();
          m_location[kAllocatedSize] = size();
        </code>
      </method>

       <method
          name ='size'
          type ='unsigned int'
          desc ='size of the bank body (can be less than allocated)'
          const='TRUE'
          >
        <code>
          noBank();
          if( numberOfSubBanks() )return subBankEnd(numberOfSubBanks()-1);
          return kHeaderSize;
        </code>
      </method>


       <method
           name ='validatePtr'
           type ='void'
           argList ='unsigned int iPtr'
           desc ='validate internal pointer'
           const='TRUE'
           >
        <code>
          if( iPtr &lt; ((unsigned int)kHeaderSize) )
          throw GaudiException( "Internal pointer out of range in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );
          if( iPtr &gt; allocatedSize() ) 
          throw GaudiException( "Internal pointer out of range in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );
        </code>
      </method>

     <method
	   name ='integrityCode'
	   type ='unsigned int'
	   desc ='reports bank integrity level 0=OK'
	   const='TRUE'
	   >
	<code>
	  if( !m_location )return ((unsigned int)HltSelRepRBEnums::kNoBank); 
	  if( !numberOfSubBanks() )return ((unsigned int)HltSelRepRBEnums::kEmptyBank); 
	  if( !allocatedSize() )return ((unsigned int)HltSelRepRBEnums::kZeroAllocatedSize); 
	  for( unsigned int iBank=0; iBank!=numberOfSubBanks(); ++iBank ){
	       unsigned int ie1 = subBankEnd( iBank );
               if( ie1 &lt; ((unsigned int)kHeaderSize) ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);
	       if( ie1 &gt; (allocatedSize()+1) ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);
	       unsigned int id1 = subBankID( iBank );
	       for( unsigned int jBank=iBank+1; jBank!=numberOfSubBanks(); ++jBank ){
	            if( ie1 &gt; subBankEnd( jBank ) ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfSequence);
	            if( id1 == subBankID( jBank ) ) return ((unsigned int)HltSelRepRBEnums::kDuplicateBankIDs);
               }
	  } 
          return ((unsigned int)HltSelRepRBEnums::kBankIsOK);
	</code>
      </method>
	   
     
      <!-- methods which may relocate the bank -->

      <method
        name ='push_back'
        type ='void'
        argList='unsigned int idSubBank,const unsigned int* pSubBank,unsigned int sizeSubBank'
        desc ='Add sub-bank copying its content. Cannot be used to replace sub-bank which is already in.'
        >
        <code>

          if( idSubBank &gt; HltSelRepRBEnums::kMaxBankID )
          throw GaudiException( "Adding illegal sub-bank ID in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );

          if( indexSubBank(idSubBank) != HltSelRepRBEnums::kUnknownID )
          throw GaudiException( "Adding sub-bank which is already there in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );

          // allocate new bank if neccessary
          if( !m_location ){
            unsigned int len = kDefaultAllocation;
            len=((sizeSubBank+kHeaderSize)&lt;len)?len:(sizeSubBank+len);
	    initialize( len );
          }

          // re-locate the bank body if necessary  
          unsigned int aSize = allocatedSize();
          unsigned int nSize = size() + sizeSubBank;
          if( nSize &gt; aSize ){
            unsigned int len = aSize + kDefaultAllocation;
            len= ( nSize&lt;len ) ? len : (nSize+kDefaultAllocation) ;
            unsigned int* newLocation = new unsigned int[len];
            for(unsigned int i=0;i!=size();++i){ newLocation[i]=m_location[i]; }
            delete[] m_location;            
            m_location=newLocation;  
            m_location[kAllocatedSize] =len;
          }

          // add the bank -------------------------------------
          // increment number of banks (don't need to worry about exceeding the size since
          //  sub-bank id range takes care of it)
          unsigned int iBank = m_location[kSubBankIDs] &amp; 0x7L;
          m_location[kSubBankIDs] =  (m_location[kSubBankIDs] &amp; ~0x7L) | (iBank+1) ;
          // set its id
          unsigned int bits = (iBank+1)*3; 
          unsigned int mask = 0x7L &lt;&lt; bits;
          m_location[kSubBankIDs] = ( m_location[kSubBankIDs] &amp; ~mask ) | ( idSubBank &lt;&lt; bits ); 
          // get its location 
          unsigned int locBank = subBankBegin(iBank);
          // set its end()
          m_location[kSubBankLocations+iBank] =  locBank + sizeSubBank;
          // copy content
          for(unsigned int i=0;i!=sizeSubBank;++i){ m_location[locBank+i]=pSubBank[i]; }
        </code>
      </method>

      <method
        name ='deleteBank'
        type ='void'
        desc ='delete the bank from program memory'
        >
        <code>
          delete[] m_location;
        </code>
      </method>

      <method
        name ='clear'
        type ='void'
        desc ='clear bank content without deleting'
        >
        <code>
          m_location[kSubBankIDs]=0;
          m_location[kSubBankLocations + numberOfSubBanks() ]=kHeaderSize;
        </code>
      </method>

      <method
        name ='initialize'
        type ='void'
	argList='unsigned int len=kDefaultAllocation'
        desc ='create a new bank with given allocation len and initialize it (does not delete old bank if any)'
        >
        <code>
            if( len &lt; kHeaderSize )len = kDefaultAllocation;
            m_location = new unsigned int[len]; 
            m_location[kAllocatedSize] =len;
            clear();
        </code>
      </method>

      <!-- readable printout -->

      <method
        name='fillStream'
        type='std::ostream&amp;'
        desc='intelligent printout' 
        const='TRUE' >
        <arg name = "s" type="std::ostream" inout="BOTH"/>
        <code>
          unsigned int ic = integrityCode();
          s &lt;&lt; " HltSelRepRawBank : { "  &lt;&lt; " nSubBanks " &lt;&lt; numberOfSubBanks() 
            &lt;&lt; " size Allocated " &lt;&lt; allocatedSize()  &lt;&lt; " Actual " &lt;&lt; size()
            &lt;&lt; " integrity code "  
            &lt;&lt; ic &lt;&lt; (" "+HltSelRepRBEnums::IntegrityCodesToString( ic ))
            &lt;&lt;  std::endl;
          if( 0==ic ) 
          for(unsigned int iBank=0;iBank!=numberOfSubBanks();++iBank){
            s &lt;&lt; " subBank : " &lt;&lt; iBank &lt;&lt; " size " &lt;&lt; subBankSize(iBank)
              &lt;&lt; " id " &lt;&lt; subBankID(iBank)  &lt;&lt; (" "+HltSelRepRBEnums::SubBankIDsToString( subBankID(iBank) ))
              &lt;&lt; " begin " &lt;&lt; subBankBegin(iBank)  &lt;&lt; " end " &lt;&lt; subBankEnd(iBank)
              &lt;&lt; std::endl;
          }
          s &lt;&lt; " }" &lt;&lt; std::endl;
          return s;
        </code>
      </method>



    </class>

  </package>


</gdd>
