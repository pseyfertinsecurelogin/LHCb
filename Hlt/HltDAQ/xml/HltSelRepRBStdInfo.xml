<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Tomasz Skwarnicki -->
<!--- Created : 2008-08-01 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>

  <package name='HltDAQ'>

    <class 
       name  = 'HltSelRepRBStdInfo'
       author= 'Tomasz Skwarnicki'
       desc  = 'Manages the RawBank::HltSelReports Std Info sub-bank.
The first word contains number of objects stored (less significant short) and 
allocated size of the sub-bank in words (more significant short).
The rest consists of two sectors: number of words per object (8-bits), 
and numerical words (32-bits). Numerical info must be passed as unsigned int (even
if it is a float) to allow for possible commpression. 
The one may be padded to start a new sector at a full word.
Info can only be read and stored sequencially.'
      >

     <import name='HltSelRepRBEnums' />
     <import name='GaudiKernel/GaudiException' />
     <import name='vector' std='TRUE' />
     <import name='utility' std='TRUE' />

     <typedef
        type   = 'std::vector&lt; unsigned int &gt;'
        def    = 'StdInfo'
        desc   = 'Used in input/output'
        access = 'PUBLIC'
      />


     <attribute 
	type = 'unsigned int*'
	name = 'location'
	desc = 'Location of the subbank body in the program memory'
	init = '0' 
        />

     <attribute 
	type = 'unsigned int'
	name = 'iterator'
	desc = 'internal iterator - object count iterator'
	init = '0' 
        setMeth = 'FALSE'
        />

     <attribute 
	type = 'unsigned int'
	name = 'iteratorInfo'
	desc = 'internal iterator - info count iterator'
	init = '0' 
        setMeth = 'FALSE'
        />

     <attribute 
	type = 'unsigned int'
	name = 'floatLoc'
	desc = 'location of the first float word inside the bank'
	init = '0' 
        setMeth = 'FALSE'
        />

     <constructor
        argList='unsigned int* pBankBody'
        initList='m_location(pBankBody),m_iterator(0),m_iteratorInfo(0),m_floatLoc(0)'
        desc='takes pointer to the memory location of the subbank body as input'
	>
	<code>
	  if( m_location )initialize();
	</code>
      </constructor>

      <method
          name='sizeInfo'
          type='unsigned int'
          argList='unsigned int iObj'
          desc='length of std info for object specified by index'
          const='TRUE'
          >
        <code>
          noBank();
          validateIndex(iObj);
          auto bits = 8*(iObj%4);
          return ( m_location[1+(iObj/4)]  &gt;&gt; bits ) &amp; 0xFFu;
        </code>
      </method>

      <method
          name ='initialize'
          type ='bool'
          desc ='initialize existing complete bank for reading'
          >
        <code>
          if( m_floatLoc == 0 ) {
             m_floatLoc = 1 + ( 3 + numberOfObj() )/4 ;
             rewind();
          }
          return true;
        </code>
      </method>

      <method
          name ='numberOfObj'
          type ='unsigned int'
          desc ='Number of objects in the sub-banks'
          const='TRUE'
          >
        <code>
          noBank();
          return (unsigned int)( m_location[0] &amp; 0xFFFFu );
        </code>
      </method>

     <method
	name = 'sizeStored'
	type = 'unsigned int'
	desc = 'length of the subbank in long words'
        const='TRUE'
        access = 'PRIVATE'
         >
        <code>
          noBank();
          return ( m_location[0] &gt;&gt; 16 ) &amp; 0xFFFFu;
        </code>
      </method>

     <method
	name = 'sizeAllocated'
	type = 'unsigned int'
	desc = 'length of the subbank in long words'
        const='TRUE'
        access = 'PRIVATE'
         >
        <code>
          auto s = sizeStored();
          return  s != 0xFFFFu ? s : size(); // in case of 'overflow' of the stored size, return the _computed_ size from the content instead
        </code>
      </method>

      <method
          name ='size'
          type ='unsigned int'
          desc ='actual (computed) size in words'
          const='TRUE'
          >
        <code>
          auto nObj = numberOfObj();
          unsigned int len = 1 + (3+nObj)/4;
          for(unsigned int i=0; i!=nObj; ++i) { 
              auto bits = 8*(i%4);
              len += ( m_location[1+(i/4)]  &gt;&gt; bits ) &amp; 0xFFu;
          }
          return len;
        </code>
      </method>

     <method
	name = 'saveSize'
	type = 'void'
	desc = 'replace allocated size by actual size before saving (no write access after that - deleteBank)'
        const='TRUE'
         >
        <code>
          noBank();
          unsigned int s=size(); // size() looks at allocated size so calculate it before we mess up with allocated
 	      m_location[0] &amp;= 0xFFFFu;
          m_location[0] |=  ( std::min(s,0xFFFFu) &lt;&lt; 16 );
        </code>
      </method>

    <method
        name = 'noBank'
        type = 'void'
        desc = 'throw exception on access to non-allocated bank'
        const= 'TRUE'
        access = 'PRIVATE'
        >
        <code>
          if( !m_location )
          throw GaudiException( "Accessing non-allocated bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );
        </code>
      </method>


      <method
        name = 'validateIndex'
        type = 'void'
        argList = 'unsigned int iObj'
        desc = 'throw exception if no Bank or index invalid'
        const= 'TRUE'
        >
        <code>
          noBank();
          if( iObj&gt;=numberOfObj() )
             throw GaudiException( "sub-bank index out of range in HltSelRepRawBank","HltSelRepRawBank",StatusCode::FAILURE );
        </code>
      </method>


      <method
	   name ='integrityCode'
	   type ='unsigned int'
	   desc ='reports bank integrity level 0=OK'
	   const='TRUE'
	   >
	<code>
	  if( !m_location )return ((unsigned int)HltSelRepRBEnums::kNoBank); 
	  //empty bank is OK: if( !numberOfObj() )return ((unsigned int)HltSelRepRBEnums::kEmptyBank); 
      auto s = sizeAllocated();
	  if( s==0 )return ((unsigned int)HltSelRepRBEnums::kZeroAllocatedSize); 

	  unsigned int iteraInfo=0;
	  for (unsigned int itera=0;itera!=numberOfObj(); ){
          
            unsigned int iWord = 1 + itera/4;
            if( iWord &gt;= s ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);

            unsigned int nInfo = sizeInfo( itera );
            ++itera;

            for(unsigned int i=0;i!=nInfo;++i){

                unsigned int iWord2 = m_floatLoc +  iteraInfo;
                if( iWord2 &gt;= s ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);

                ++iteraInfo;

             }

	  }
      return HltSelRepRBEnums::kBankIsOK;
	</code>
      </method>

      <method 
        name ='next'
        type ='StdInfo'
        desc='gets substructure from current iterator position, advances iterator to next position'
        >
        <code>
          noBank();
          if( !numberOfObj() )
             throw GaudiException( "Iterating in empty bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );
          if( !m_floatLoc )initialize();

          unsigned int s=sizeAllocated();

          unsigned int nInfo = sizeInfo( m_iterator );
          ++m_iterator;

          StdInfo stdInfo;

          for(unsigned int i=0;i!=nInfo;++i){

             unsigned int iWord2 = m_floatLoc +  m_iteratorInfo;
             if( iWord2 &gt;= s )
                throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );

             ++m_iteratorInfo;

             stdInfo.push_back( m_location[iWord2] );
          
          }
          return stdInfo;
        </code>
      </method>  

      <method
        name='rewind'
        type='void'
        desc='reset iterator to the initial position'
        >
        <code>
          m_iterator = 0;
          m_iteratorInfo = 0;
        </code>
      </method>


      <!-- methods which may relocate the bank -->

      <method
        name ='push_back'
        type ='void'
        argList='StdInfo stdInfo'
        desc ='Add StdInfo its content to current iterator position. The later is advanced. Bank must be properly initialized with size info.'
        >
        <code>
          auto s=sizeStored();
          if( s==0  ) throw GaudiException( "Pushing into empty bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );
          if( m_floatLoc==0 ) throw GaudiException( "Pushing into uninitialized bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );

          unsigned int nInfo = std::min(stdInfo.size(),255ul); // can't store more than this; non-essential output anyway          

          unsigned int iObj = numberOfObj();
          unsigned int iWord = 1 + (iObj/4);
          if ( iWord &gt;= m_floatLoc ) throw GaudiException( "Iterating beyond extend of count table in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );
          m_location[0] = (  m_location[0] &amp; ~0xFFFFL ) | (iObj+1) ;

          unsigned int iPart = iObj % 4;
          unsigned int bits = iPart*8;
          unsigned int mask = 0xFFL &lt;&lt; bits;
          m_location[iWord] = ( (  m_location[iWord] &amp; ~mask ) | ( nInfo &lt;&lt; bits ) );

          ++m_iterator;

          for(unsigned int i=0;i!=nInfo;++i){

             unsigned int iWord2 = m_floatLoc +  m_iteratorInfo;
             if( iWord2 &gt;= s &amp;&amp; s!=0xFFFFu ) //FIXME: skip check in case of overflow... in order to avoid breaking strict backwards compatibility...
                throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBStdInfo","HltSelRepRBStdInfo",StatusCode::FAILURE );

             ++m_iteratorInfo;

             m_location[iWord2] =  stdInfo[i];
          
          }
        </code>
      </method>

      <method
        name ='deleteBank'
        type ='void'
        desc ='delete the bank from program memory'
        >
        <code>
          delete[] m_location;
          m_location = nullptr;
        </code>
      </method>


      <method
        name ='initialize'
        type ='bool'
	argList='unsigned int nObj, unsigned int nAllInfo'
        desc ='create a new bank to hold nObj and max of nAllInfo info words, initialize for writing (does not delete old bank if any)'
        >
        <code>
            unsigned int len = 1 + ( 3 + nObj )/4 + nAllInfo;
            // if( len  &gt; 0xFFFFL )return false;
            m_location = new unsigned int[len];           
            m_location[0] = ( std::min(len,0xFFFFu) &lt;&lt; 16);
            std::fill_n(m_location+1,len-1,0u); // this wasn't always done, so the table of  # of info of old data contains garbage beyond the last count...
            m_floatLoc = 1 + (3 + nObj )/4 ;
            rewind();
            return true;
        </code>
      </method>


     <!-- readable printout -->

      <method
        name='fillStream'
        type='std::ostream&amp;'
        argList='std::ostream&amp; s'
        desc='intelligent printout' 
        const='TRUE' >
        <arg name = "s" type="std::ostream" inout="BOTH"/>
        <code>
          unsigned int ic = integrityCode();
          s &lt;&lt; " HltSelRepRBStdInfo : { "  &lt;&lt; " nObj " &lt;&lt; numberOfObj() 
            &lt;&lt; " size Allocated " &lt;&lt; sizeAllocated()  
            &lt;&lt; " Actual " &lt;&lt; size() 
            &lt;&lt; " integrity code "  
            &lt;&lt; ic &lt;&lt; (" "+HltSelRepRBEnums::IntegrityCodesToString( ic ))
            &lt;&lt;  std::endl;
          if( 0==ic ){ 

	  unsigned int iteraInfo=0;
	  for(unsigned int itera=0;itera!=numberOfObj(); ){
          
             unsigned int nInfo = sizeInfo( itera );
             ++itera;

             s &lt;&lt; " " &lt;&lt; itera &lt;&lt; " nInfo " &lt;&lt; nInfo &lt;&lt; " { ";
 
             for(unsigned int i=0;i!=nInfo;++i){

                unsigned int iWord2 = m_floatLoc +  iteraInfo;

                ++iteraInfo;

                // assume uncompressed info
                union IntFloat { unsigned int mInt; float mFloat; };
                IntFloat a; a.mInt = m_location[iWord2]; 
                float infFloat = a.mFloat;

                s   &lt;&lt;  infFloat &lt;&lt; " ";
             }
	     s &lt;&lt; " } " &lt;&lt; std::endl;

	  }
          }
          s &lt;&lt; " }" &lt;&lt; std::endl;
          return s;
        </code>
      </method>

    </class>

  </package>


</gdd>
