<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Tomasz Skwarnicki -->
<!--- Created : 2008-07-31 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>

  <package name='HltDAQ'>

    <class 
       name  = 'HltSelRepRBSubstr'
       author= 'Tomasz Skwarnicki'
       desc  = 'Manages the RawBank::HltSelReports substructure sub-bank.
All info is stored in 16-bit shorts (packed in 32-bit words).
The first short is a number of substructures stored.
The second short is the allocated length of the bank (in 32-bit words).
This is followed by sequencially stacked substructure records.
First short of the record gives number of substructure pointers in the most significant 15 bits.
The least significant bit of this short is a flag 0=lhcbid ptrs 1=object ptrs.
The rest of the record are pointers i.e. either hit sequence index or stored object index.
The bank should be written and read sequencially. 
Never write into into the bank with iterator not at its end-of-the bank position.'
      >

     <enum 
        name = 'DefaultAllocation'
        desc = 'default allocation size in 32-bit words for new bank or increment in its extension'
        value ='kDefaultAllocation=500'
        access = 'PUBLIC'
        />
                         
     <enum 
        name = 'InitialPositionOfIterator'
        desc = 'iterator value to access the first element'
        value ='kInitialPosition=2'
        access = 'PUBLIC'
        />
                         
     <import name='HltSelRepRBEnums' />
     <import name='GaudiKernel/GaudiException' />
     <import name='vector' std='TRUE' />
     <import name='utility' std='TRUE' />

     <typedef
        type   = 'std::vector &lt; unsigned short &gt;'
        def    = 'Substrv'
        desc   = 'Used in input/output first:type (0=objects,1=hits) second:pointers'
        access = 'PUBLIC'
      />

     <typedef
        type   = 'std::pair&lt; unsigned int, Substrv  &gt;'
        def    = 'Substr'
        desc   = 'Used in input/output first:type (0=objects,1=hits) second:pointers'
        access = 'PUBLIC'
      />

     <attribute 
	type = 'unsigned int*'
	name = 'location'
	desc = 'Location of the subbank body in the program memory'
	init = '0' 
        />

     <attribute 
	type = 'unsigned int'
	name = 'iterator'
	desc = 'internal iterator - gives current position in number of shorts'
	init = 'kInitialPosition' 
        setMeth = 'FALSE'
        />

     <constructor
        argList='unsigned int* pBankBody'
        initList='m_location(pBankBody),m_iterator(kInitialPosition)'
        desc='takes pointer to the memory location of the subbank body as input'
	/>


      <method
          name ='numberOfObj'
          type ='unsigned int'
          desc ='Number of hit substructures in the sub-banks'
          const='TRUE'
          >
        <code>
          noBank();
          return (unsigned int)( m_location[0] &amp; 0xFFFFL );
        </code>
      </method>

     <method
	name = 'allocatedSize'
	type = 'unsigned int'
	desc = 'length of the subbank in long words (allocated)'
        const='TRUE'
         >
        <code>
          noBank();
          return (unsigned int)( ( m_location[0] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
        </code>
      </method>


     <method
	name = 'saveSize'
	type = 'void'
	desc = 'replace allocated size by actual size before saving (no write access after that - deleteBank)'
        const='TRUE'
         >
        <code>
          noBank();
            unsigned int s=size(); // size() looks at allocated size so calculate it before we mess up with allocated
 	    m_location[0] &amp;= 0xFFFFL;
            m_location[0] |=  ( s &lt;&lt; 16 );
        </code>
      </method>


     <method
        name = 'noBank'
        type = 'void'
        desc = 'throw exception on access to non-allocated bank'
        const= 'TRUE'
        access = 'PRIVATE'
        >
        <code>
          if( !m_location )
          throw GaudiException( "Accessing non-allocated bank in HltSelRepRBSubstr","HltSelRepRBSubstr",StatusCode::FAILURE );
        </code>
      </method>


      <method
          static = 'TRUE'
          name ='hitSubstr'
          type ='unsigned int'
          argList ='unsigned short inpt'
          desc ='type of substructure 0=objects 1=hits'
          >
        <code>
          return (unsigned int)(  inpt &amp; 0x1L );
        </code>
      </method>

      <method
          static = 'TRUE'
          name ='lenSubstr'
          type ='unsigned int'
          argList ='unsigned short inpt'
          desc ='length of substructure'
          >
        <code>
          return (unsigned int)(( inpt &amp; 0xFFFF ) &gt;&gt; 1 );
        </code>
      </method>

      <method
	   name ='integrityCode'
	   type ='unsigned int'
	   desc ='reports bank integrity level 0=OK'
	   const='TRUE'
	   >
	<code>
	  if( !m_location )return ((unsigned int)HltSelRepRBEnums::kNoBank); 
	  //empty bank is OK: if( !numberOfObj() )return ((unsigned int)HltSelRepRBEnums::kEmptyBank); 
	  if( !allocatedSize() )return ((unsigned int)HltSelRepRBEnums::kZeroAllocatedSize); 
          unsigned int s=allocatedSize();
          unsigned int itera = kInitialPosition;
          for( unsigned int iSub=0;iSub!=numberOfObj();++iSub){
             unsigned int iWord = itera / 2;
             unsigned int iPart = itera % 2;
             if( iWord&gt;= s ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);
             unsigned short nW;
             if( iPart ){
                nW = (unsigned short)( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
             } else {
                nW = (unsigned short)  ( m_location[iWord] &amp; 0xFFFFL );
             }
             unsigned int nL = lenSubstr(nW);
             itera += nL +1;
          }
          unsigned int iWord = itera / 2; 
          unsigned int iPart = itera % 2;
          if( !iPart )--iWord;
          if( iWord&gt;= s ) return ((unsigned int)HltSelRepRBEnums::kPtrOutOfRange);
          return ((unsigned int)HltSelRepRBEnums::kBankIsOK);
	</code>
      </method>

      <method 
        name ='next'
        type ='Substr'
        desc='gets substructure from current iterator position, advances iterator to next position'
        >
        <code>
          unsigned int s=allocatedSize();
          unsigned int iWord = m_iterator / 2;
          unsigned int iPart = m_iterator % 2;
          ++m_iterator;
          if( iWord&gt;= s )
          throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBSubstr","HltSelRepRBSubstr",StatusCode::FAILURE );
          unsigned short nW;
          if( iPart ){
              nW = (unsigned short)( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
          } else {
              nW = (unsigned short)  ( m_location[iWord] &amp; 0xFFFFL );
          }
          unsigned int nL = lenSubstr(nW);
          std::vector&lt; unsigned short &gt; vect;
          for(unsigned int i=0; i!=nL; ++i){
             iWord = m_iterator / 2;
             iPart = m_iterator % 2;
   	     ++m_iterator;
          if( iWord&gt;= s )
          throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBSubstr","HltSelRepRBSubstr",StatusCode::FAILURE );
             unsigned short n;
             if( iPart ){
                n = (unsigned short) ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
             } else {
                n = (unsigned short)   ( m_location[iWord] &amp; 0xFFFFL );
             }
             vect.push_back( n );
          }
          return Substr( hitSubstr( nW ),vect );
        </code>
      </method>  

      <method
        name='rewind'
        type='void'
        desc='reset iterator to the initial position'
        >
        <code>
          m_iterator = kInitialPosition;
        </code>
      </method>

      <method 
        name ='size'
        type ='unsigned int'
        desc ='actual size of the bank in long words'
        const='TRUE'
        >
        <code>
          unsigned int s=allocatedSize();
          unsigned int itera = kInitialPosition;
          for( unsigned int iSub=0;iSub!=numberOfObj();++iSub){
             unsigned int iWord = itera / 2;
             unsigned int iPart = itera % 2;
             if( iWord&gt;= s )
             throw GaudiException( "Iterating beyond extend of the bank in HltSelRepRBSubstr","HltSelRepRBSubstr",StatusCode::FAILURE );
             unsigned short nW;
             if( iPart ){
                nW = (unsigned short) ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
             } else {
                nW = (unsigned short)   ( m_location[iWord] &amp; 0xFFFFL );
             }
             unsigned int nL = lenSubstr(nW);
             itera += nL +1;
          }
          unsigned int iWord = itera / 2;
          unsigned int iPart = itera % 2;
          if( iPart )++iWord; // if we are in upper part of the word then first unused is the next one
          return iWord; 
        </code>
      </method>  

      <!-- methods which may relocate the bank -->

      <method
        name ='push_back'
        type ='bool'
        argList='Substr sub'
        desc ='Add substructure copying its content to current iterator position. The later is advanced.'
        >
        <code>

          unsigned int nL = sub.second.size();

          // allocate new bank if neccessary
          if( !m_location ){
            unsigned int len = kDefaultAllocation;
	    len = (nL&lt;(len-2))?len:(len+kDefaultAllocation);
            if( len &gt; 0xFFFFL )return false;
	    initialize( len );
          }

          // re-locate the bank body if necessary  
          unsigned int aSize = allocatedSize();
          unsigned int nSize = (m_iterator + 1 + nL)/2+2;
          if( nSize &gt; aSize ){
            unsigned int len = aSize + kDefaultAllocation;
            len= ( nSize&lt;len ) ? len : (nSize+kDefaultAllocation) ;
            if( len &gt; 0xFFFFL )return false;
            unsigned int* newLocation = new unsigned int[len];
            for(unsigned int i=0;i!=aSize;++i){ newLocation[i]=m_location[i]; }
            delete[] m_location;            
            m_location=newLocation;  
	    m_location[0] &amp;= 0xFFFFL;
            m_location[0] |=  ( len &lt;&lt; 16 );
          }

          // add the substructure sequence -------------------------------------
          // increment number of substrs
          unsigned int iSub = m_location[0] &amp; 0xFFFFL;
          m_location[0] =  (m_location[0] &amp; ~0xFFFFL ) | (iSub+1) ;
          // put the count in 
          unsigned int iWord = m_iterator / 2;
          unsigned int iPart = m_iterator % 2;
          ++m_iterator;
          unsigned short nW=0;
	  nW = sub.second.size() &lt;&lt; 1;
	  if( sub.first ) nW |= 1;
          if( iPart ){
              m_location[iWord] &amp;= 0xFFFFL;    
              m_location[iWord]  |= ( nW &lt;&lt;  16 );
          } else {
	      m_location[iWord]= ( 0L | nW );
          }
	  // copy the content
          for(unsigned int i=0; i!=nL; ++i){
             iWord = m_iterator / 2;
             iPart = m_iterator % 2;
	     ++m_iterator;
             unsigned short n = sub.second[i];
             if( iPart ){
                m_location[iWord] &amp;= 0xFFFFL;    
                m_location[iWord]  |= ( n &lt;&lt;  16 );
             } else {
    	        m_location[iWord]= ( 0L | n );
             }
          }
          return true;
           
        </code>
      </method>

      <method
        name ='deleteBank'
        type ='void'
        desc ='delete the bank from program memory'
        >
        <code>
          delete[] m_location;
          m_location = nullptr;
        </code>
      </method>

      <method
        name ='clear'
        type ='void'
        desc ='clear bank content without deleting'
        >
        <code>
          // number of substr set to 0
          m_location[0] &amp;=  ~0xFFFFL;
	  rewind();
        </code>
      </method>

      <method
        name ='initialize'
        type ='void'
	argList='unsigned int len=kDefaultAllocation'
        desc ='create a new bank with given allocation len and initialize it (does not delete old bank if any)'
        >
        <code>
            if( len &lt; 1 )len = kDefaultAllocation;
            m_location = new unsigned int[len]; 
            m_location[0] =   (len &lt;&lt; 16);
            rewind();
        </code>
      </method>


     <!-- readable printout -->

      <method
        name='fillStream'
        type='std::ostream&amp;'
        desc='intelligent printout' 
        const='TRUE' >
        <arg name = "s" type="std::ostream" inout="BOTH"/>
        <code>
          unsigned int ic = integrityCode();
          s &lt;&lt; " HltSelRepRBSubstr : { "  &lt;&lt; " nSubstr " &lt;&lt; numberOfObj() 
             &lt;&lt; " size Allocated " &lt;&lt; allocatedSize()   &lt;&lt; " Actual " &lt;&lt; size()
             &lt;&lt; " integrity code "  
             &lt;&lt; ic &lt;&lt; (" "+HltSelRepRBEnums::IntegrityCodesToString( ic ))
             &lt;&lt;  std::endl;
          if( 0==ic ){ 
            unsigned int itera = ((unsigned int)kInitialPosition);
            for(unsigned int iSub=0;iSub!=numberOfObj();++iSub){
               unsigned int iWord = itera / 2;
               unsigned int iPart = itera % 2;
               ++itera;
               unsigned short nW;
               if( iPart ){
                  nW = (unsigned short) ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
               } else {
                  nW = (unsigned short) ( m_location[iWord] &amp; 0xFFFFL );
               }
               unsigned int nL = lenSubstr(nW);
               s &lt;&lt; " subStr : " &lt;&lt; iSub &lt;&lt; " size " &lt;&lt; nL
                 &lt;&lt; " hitType " &lt;&lt; hitSubstr(nW)  &lt;&lt; " { ";
               for(unsigned int i=0;i!=nL;++i){
                  unsigned int iWord = itera / 2;
                  unsigned int iPart = itera % 2;
                  ++itera;
                  unsigned short n;
                  if( iPart ){
                     n = (unsigned short) ( ( m_location[iWord] &amp; 0xFFFF0000L ) &gt;&gt; 16 );
                  } else {
                     n = (unsigned short)   ( m_location[iWord] &amp; 0xFFFFL );
                  }
                  s  &lt;&lt; " "  &lt;&lt; int(n);
               }
               s &lt;&lt; " } "  &lt;&lt; std::endl;
             }
          }
          s &lt;&lt; " }" &lt;&lt; std::endl;
          return s;
        </code>
      </method>

    </class>

  </package>


</gdd>
