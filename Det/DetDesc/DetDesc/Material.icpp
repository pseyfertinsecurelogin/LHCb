// $Id: Material.icpp,v 1.7 2008-10-28 12:04:37 cattanem Exp $
#ifndef     DETDESC_MATERIAL_ICPP 
#define     DETDESC_MATERIAL_ICPP  1 
/// GaudiKernel
#include "GaudiKernel/MsgStream.h"       
#include "GaudiKernel/IRegistry.h"
/// DetDesc
#include "DetDesc/Material.h"

/////////////////////////////////////////////////////////////////////////////////
inline std::ostream& operator<<( std::ostream& os , const Material& mat )        
{ return mat.fillStream( os ); }
/////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const Material& mat )          
{ return mat.fillStream( os ); }
/////////////////////////////////////////////////////////////////////////////////
inline std::ostream& operator<<( std::ostream& os , const Material* mat )          
{ return mat ? (os<<*mat) : (os<<" Material* points to NULL!") ; }
/////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const Material* mat )           
{ return mat ? (os<<*mat) : (os<<" Material* points to NULL!") ; }
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
inline bool Material::operator==( const Material* right ) const { return right == this ; }
/////////////////////////////////////////////////////////////////////////////////
inline bool Material::operator!=( const Material* right ) const { return right != this ; }
/////////////////////////////////////////////////////////////////////////////////
inline const std::string& Material::name      () const 
{
  return ( !m_name.empty() ? m_name                     :
           0 != registry() ? registry()->identifier()   :
           m_name );
}

/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setName( const std::string& value ) { m_name = value; }
/////////////////////////////////////////////////////////////////////////////////
inline double       Material::density   () const { return m_density; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setDensity( const double value ) {m_density = value; }
/////////////////////////////////////////////////////////////////////////////////
inline double       Material::temperature() const { return m_temperature; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setTemperature( const double value ) { m_temperature = value; }
/////////////////////////////////////////////////////////////////////////////////
inline double       Material::pressure() const { return m_pressure; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setPressure( const double value ) { m_pressure = value; }
/////////////////////////////////////////////////////////////////////////////////
inline eState       Material::state() const { return m_state; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setState( eState value ) {  m_state = value; }
/////////////////////////////////////////////////////////////////////////////////
inline double       Material::radiationLength() const { return m_radiationLength; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setRadiationLength( const double value ) {m_radiationLength = value; }
/////////////////////////////////////////////////////////////////////////////////
inline double       Material::absorptionLength() const { return m_absorptionLength; }
/////////////////////////////////////////////////////////////////////////////////
inline void         Material::setAbsorptionLength( const double value ) { m_absorptionLength = value; }
/////////////////////////////////////////////////////////////////////////////////
inline       Material::Tables& Material::tabulatedProperties()       { return m_props; } 
/////////////////////////////////////////////////////////////////////////////////
inline const Material::Tables& Material::tabulatedProperties() const { return m_props; } 
/////////////////////////////////////////////////////////////////////////////////

#endif  //  DETDESC_MATERIAL_ICPP
