// $Id: Surface.icpp,v 1.3 2005-12-07 13:19:07 cattanem Exp $
#ifndef      DETDESC_SURFACE_ICPP
#define      DETDESC_SURFACE_ICPP 1 
///  Gaudi 
#include "GaudiKernel/MsgStream.h"
///  DetDesc
#include "DetDesc/Surface.h"
///

/////////////////////////////////////////////////////////////////////////
inline std::ostream& operator<<( std::ostream& os , const Surface& surf )        
{ return surf.fillStream( os ); }
/////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const Surface& surf )          
{ return surf.fillStream( os ); }
/////////////////////////////////////////////////////////////////////////
inline std::ostream& operator<<( std::ostream& os , const Surface* surf )          
{ return surf ? (os<<*surf) : (os<<" Surface* points to NULL!"<<std::endl) ; }
/////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const Surface* surf )           
{ return surf ? (os<<*surf) : (os<<" Surface* points to NULL!"<<endreq) ; }
/////////////////////////////////////////////////////////////////////////


/// "model" //////////////////////////////////////////////////////////////
inline const unsigned int Surface::   model     () const { return m_model;  }  
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setModel     ( const unsigned int val )
{ m_model  = val ; return *this; }  
/// "finish" /////////////////////////////////////////////////////////////
inline const unsigned int Surface::   finish    () const { return m_finish; }
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setFinish    ( const unsigned int val ) 
{ m_finish = val ; return *this; }  
/// "type" ///////////////////////////////////////////////////////////////
inline const unsigned int Surface::   type      () const { return m_type  ; }
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setType      ( const unsigned int val ) 
{ m_type   = val ; return *this; }  
/// "value" - (NB: ugly name!) ///////////////////////////////////////////
inline const double       Surface::   value     () const { return m_value ; }
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setValue     ( const double       val ) 
{ m_value  = val ; return *this; }  
/// name of first  physical volume ///////////////////////////////////////
inline const std::string& Surface::   firstVol  () const { return m_firstVol ; }
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setFirstVol  ( const std::string& val ) 
{ m_firstVol  = val ; return *this; }  
/// name of second physical volume ///////////////////////////////////////
inline const std::string& Surface::   secondVol () const { return m_secondVol; }
//////////////////////////////////////////////////////////////////////////
inline Surface&           Surface::setSecondVol ( const std::string& val ) 
{ m_secondVol = val ; return *this; }  
/// tables of optical prorties ///////////////////////////////////////////
inline const Surface::Tables& Surface::tabulatedProperties() const { return m_props; }
//////////////////////////////////////////////////////////////////////////
inline       Surface::Tables& Surface::tabulatedProperties()       { return m_props; }
//////////////////////////////////////////////////////////////////////////


#endif  //   DETDESC_SURFACE_ICPP













