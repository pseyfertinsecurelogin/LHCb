<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
<text>-v</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import (DDDBConf, CondDB, EventClockSvc, FakeEventTime,
                           CondDBAccessSvc, CondDBTimeSwitchSvc)

DDDBConf()

ecs = EventClockSvc(InitialTime = (1262304000 + 120 * 60) * 1000000000)
ecs.addTool(FakeEventTime,"EventTimeDecoder")
ecs.EventTimeDecoder.StartTime = (1262304000 + 10 * 60) * 1000000000
ecs.EventTimeDecoder.TimeStep = 20 * 60 * 1000000000

HBTEST = CondDBAccessSvc("HBTEST", ConnectionString="sqlite_file:../data/HBTEST.db/HBTEST")
HBTEST.HeartBeatCondition = "/Conditions/Online/HeartBeatTest/Tick"

CondDB().addAlternative(HBTEST, "/Conditions/Online/HeartBeatTest")

from Configurables import DetCondTest__TestConditionAlg
alg = DetCondTest__TestConditionAlg()
alg.Conditions = ["/dd/Conditions/Online/HeartBeatTest/Condition1","/dd/Conditions/Online/HeartBeatTest/Condition2"]
alg.LoadDuringInitialize = True
ApplicationMgr(TopAlg = [alg], EvtSel = "NONE", EvtMax = 4)
#MessageSvc(OutputLevel = 1)

from Configurables import UpdateManagerSvc
#UpdateManagerSvc(DotDumpFile = "ums.dot")

alg.ConditionsDependencies = ["/dd/Conditions/Online/HeartBeatTest/Condition1 -> /dd/Conditions/Online/HeartBeatTest/Condition2  "]
UpdateManagerSvc().OutputLevel = DEBUG
MessageSvc().setDebug += ["UpdateManagerSvc::Item"]
</text></argument>
<argument name="exit_code"><integer>4</integer></argument>
<argument name="validator"><text>
outputlines = [ l.rstrip() for l in stdout.splitlines() ]

## Check for bug #66497 (Velo motion system updated several times during initialization)
# 'marker1' must appear only once before 'maker2'
marker1 = "Condition2 from data provider"
marker2 = "Conditions loaded at initialize"
count = 0
for l in outputlines:
    if marker2 in l:
        break
    if marker1 in l:
        count += 1
if count != 1:
    causes.append("bug #66497")
    result["GaudiTest.marker.value"] = result.Quote(marker1)
    result["GaudiTest.marker.count"] = result.Quote(str(count))
    result["GaudiTest.marker.count_expected"] = result.Quote("1")

## Check that we find the expected lines in the right order
expected = [
    'DetCondTest::Te...   INFO Conditions loaded at initialize',
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition1',
    'Validity: 1262306400.0 -> 1262307600.0',
    '(int) Data = 40',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition2',
    'Validity: 1262308800.0 -> 1262307600.0',
    '(int) Data = 80',
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition1',
    'Validity: 0.0 -> 1262305200.0',
    '(int) Data = 0',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition2',
    'Validity: 0.0 -> 1262305200.0',
    '(int) Data = 0',
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition1',
    'Validity: 1262305200.0 -> 1262306400.0',
    '(int) Data = 20',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition2',
    'Validity: 1262305200.0 -> 1262306400.0',
    '(int) Data = 20',
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition1',
    'Validity: 1262306400.0 -> 1262307600.0',
    '(int) Data = 40',
    '--- /dd/Conditions/Online/HeartBeatTest/Condition2',
    'Validity: 1262306400.0 -> 1262307600.0',
    '(int) Data = 40',
    'HBTEST              ERROR Database not up-to-date. Latest known update is at 2010-01-01 01:00:00.0 UTC, event time is 2010-01-01 01:10:00.0 UTC'
    ]

regexp = r"^---|^Validity|^\(int\) Data|.*Requested Conditions|.*Conditions loaded at initialize|HBTEST.*ERROR"

# grep
import re
exp = re.compile(regexp)
outputlines = [ l for l in outputlines if exp.match(l) ]

if outputlines != expected:
    causes.append("output")
    result["GaudiTest.output.regexp"] = result.Quote(regexp)
    result["GaudiTest.output.expected"] = result.Quote("\n".join(expected))
    result["GaudiTest.output.found"] = result.Quote("\n".join(outputlines))
</text></argument>
</extension>
