<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
<text>-v</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import (DDDBConf, CondDB, EventClockSvc, FakeEventTime,
                           CondDBAccessSvc, CondDBTimeSwitchSvc)

DDDBConf()

ecs = EventClockSvc()
ecs.addTool(FakeEventTime, "EventTimeDecoder")
ecs.EventTimeDecoder.StartTime = 5
ecs.EventTimeDecoder.TimeStep = 10

DBs = []
for i in [0,3]:
    data = { "name": "TESTDB%d"%i }
    DBs.append(CondDBAccessSvc(data["name"],
                               ConnectionString="sqlite_file:../data/%(name)s.db/%(name)s"%data))
readers = []
for i in range(len(DBs)):
    readers.append("'%s':(%d,%d)"%(DBs[i].getFullName(),i*10,(i+1)*10))

CondDB().addLayer(CondDBTimeSwitchSvc(Readers = readers, OutputLevel = DEBUG))

from Configurables import DetCondTest__TestConditionAlg
alg = DetCondTest__TestConditionAlg()
alg.Conditions = ["/dd/AutoMap/FolderSet1/Object1"]
ApplicationMgr(TopAlg = [alg], EvtSel = "NONE", EvtMax = 2)
#MessageSvc(OutputLevel = 1)

</text></argument>
<argument name="validator"><text>
## 1st check: Find reference block
reference_block = """
CondDBTimeSwitc...  DEBUG Configured CondDBReaders:
CondDBTimeSwitc...  DEBUG  0.0 - 0.00000001: CondDBAccessSvc/TESTDB0
CondDBTimeSwitc...  DEBUG  0.00000001 - 0.00000002: CondDBAccessSvc/TESTDB3
"""
findReferenceBlock(reference_block)

## 2nd check: find data
expected = [
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/AutoMap/FolderSet1/Object1',
    'Validity: 0.0 -> 0.00000001',
    '(int) Data = 1',
    'DetCondTest::Te...   INFO Requested Conditions:',
    '--- /dd/AutoMap/FolderSet1/Object1',
    'Validity: 0.00000001 -> 0.00000002',
    '(int) Data = 2']

regexp = r"^---|^Validity|^\(int\) Data|.*Requested Conditions"
outputlines = [ l.rstrip() for l in stdout.splitlines() ]

# grep
import re
exp = re.compile(regexp)
outputlines = [ l for l in outputlines if exp.match(l) ]

if outputlines != expected:
    causes.append("output")
    result["GaudiTest.output.regexp"] = result.Quote(regexp)
    result["GaudiTest.output.expected"] = result.Quote("\n".join(expected))
    result["GaudiTest.output.found"] = result.Quote("\n".join(outputlines))
</text></argument>
</extension>
