/*****************************************************************************\
* (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration      *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/

// local
#include "LHCbMath/FastMaths.h"
#include "LHCbMath/SIMDTypes.h"

// local timing utils
#include "../Timing.h"

// STL
#include <iostream>
#include <random>
#include <string>
#include <typeinfo>
#include <vector>

// VDT
#include "vdt/atan2.h"
#include "vdt/exp.h"
#include "vdt/log.h"
#include "vdt/sincos.h"

// Vector Class
#include "instrset.h"

using FloatV = LHCb::SIMD::FPF;
using IntV   = LHCb::SIMD::UInt32;

class Data {
public:
  using Vector = typename LHCb::SIMD::STDVector<Data>;

public:
  float  xs, ys, zs;
  FloatV xv, yv, zv;
  float  absxs, absys;
  FloatV absxv, absyv;

public:
  Data() {
    // random generator
    static std::default_random_engine gen;
    // Distributions
    static std::uniform_real_distribution<float> x( -30, 30 );
    static std::uniform_real_distribution<float> absx( 1e-10, 1000 );
    static std::uniform_real_distribution<float> z( -1, 1 );
    // lambda for random
    auto f    = []() { return x( gen ); };
    auto absf = []() { return absx( gen ); };
    auto zf   = []() { return z( gen ); };
    // fill the data
    // make first entries same as scalar for comparison
    xv[0] = xs = f();
    yv[0] = ys = f();
    zv[0] = zs = zf();
    absxv[0] = absxs = absf();
    absyv[0] = absys = absf();
    // fill the rest with different random values
    for ( std::size_t i = 1; i < FloatV::Size; ++i ) {
      xv[i]    = f();
      yv[i]    = f();
      zv[i]    = zf();
      absxv[i] = absf();
      absyv[i] = absf();
    }
  }
};

template <typename TYPE, typename DATA, typename FUNC>
unsigned long long int __attribute__( ( noinline ) ) solve( const DATA& dataV, const FUNC& func ) {
  unsigned long long int best_dur{99999999999999999};

  timespec start, end;

  TYPE sum( 0 );

  const unsigned int nTests = 1000;
  for ( unsigned int i = 0; i < nTests; ++i ) {
    sum = TYPE( 0 );

    // start clock
    clock_gettime( CLOCK_MONOTONIC_RAW, &start );

    // iterate over the data and run given function
    for ( const auto& data : dataV ) { sum += func( data ); }

    // stop clock
    clock_gettime( CLOCK_MONOTONIC_RAW, &end );

    // get best time
    const auto duration = time_diff( &start, &end );
    if ( duration < best_dur ) { best_dur = duration; }
  }

#ifndef __clang__
  if constexpr ( std::is_floating_point<TYPE>::value ) {
    asm volatile( "" : "+x"( sum ) );
  } else {
    auto scalar_sum = sum.sum();
    asm volatile( "" : "+x"( scalar_sum ) );
  }
#else
  // clang does not seem to like the above
  std::cout << "Sum = " << sum << std::endl;
#endif

  return best_dur;
}

const float  scalarSum( 0 );
const FloatV simdSum( 0 );

int main( int /*argc*/, char** /*argv*/ ) {

//   // get instruction set level of CPU
//   const int cpulevel = instrset_detect();

//   // the compilation level
// #ifdef INSTRSET
//   const int complevel = INSTRSET;
// #else
//   const int complevel = 999;
// #endif

//   // test if the CPU supports the compiled level
//   // if not, return the code that informs Gaudi the test was not run.
//   if ( cpulevel < complevel ) {
//     std::cout << "CPU level " << cpulevel << " does not support compilation level " << complevel
//               << ". Test will not be run." << std::endl;
//     return 77;
//   }

  using namespace LHCb::Math;
  using namespace LHCb::Math::Approx;

  const std::size_t nData = 96e3;

  // Generate the data
  std::cout << "Generating " << nData << " data values" << std::endl;
  const Data::Vector data( nData );

  // ---------------------------------------------------------------------------------------------------------------------

  // Loop to print some values
  // if ( false ) // uncomment to enable
  {

    float  ss( 0 ), sc( 0 );
    FloatV vs( 0 ), vc( 0 );

    std::size_t n{0};
    for ( const auto& d : data ) {

      std::cout << "STD  log(" << d.absxs << ") = " << std::log( d.absxs ) << std::endl;
      std::cout << "VDT  log(" << d.absxs << ") = " << vdt::fast_logf( d.absxs ) << std::endl;
      std::cout << "APX  log(" << d.absxs << ") = " << Approx::approx_log( d.absxs ) << std::endl;
      std::cout << "VAPX log(" << d.absxs << ") = " << Approx::vapprox_log( d.absxs ) << std::endl;
      std::cout << "STD  log(" << d.absxv << ") = " << std::log( d.absxv ) << std::endl;
      std::cout << "VDT  log(" << d.absxv << ") = " << fast_log( d.absxv ) << std::endl;
      std::cout << "APX  log(" << d.absxv << ") = " << approx_log( d.absxv ) << std::endl;
      std::cout << "VAPX log(" << d.absxv << ") = " << vapprox_log( d.absxv ) << std::endl;
      std::cout << std::endl;

      std::cout << "STD  exp(" << d.xs << ") = " << std::exp( d.xs ) << std::endl;
      std::cout << "VDT  exp(" << d.xs << ") = " << vdt::fast_expf( d.xs ) << std::endl;
      std::cout << "APX  exp(" << d.xs << ") = " << Approx::approx_exp( d.xs ) << std::endl;
      std::cout << "VAPX exp(" << d.xs << ") = " << Approx::vapprox_exp( d.xs ) << std::endl;
      std::cout << "STD  exp(" << d.xv << ") = " << std::exp( d.xv ) << std::endl;
      std::cout << "VDT  exp(" << d.xv << ") = " << fast_exp( d.xv ) << std::endl;
      std::cout << "APX  exp(" << d.xv << ") = " << approx_exp( d.xv ) << std::endl;
      std::cout << "VAPX exp(" << d.xv << ") = " << vapprox_exp( d.xv ) << std::endl;
      std::cout << std::endl;

      std::cout << "STD  sqrt(" << d.absxs << ") = " << std::sqrt( d.absxs ) << std::endl;
      std::cout << "STD  sqrt(" << d.absxv << ") = " << std::sqrt( d.absxv ) << std::endl;
      std::cout << "FAST sqrt(" << d.absxs << ") = " << fast_sqrt( d.absxs ) << std::endl;
      std::cout << "FAST sqrt(" << d.absxv << ") = " << fast_sqrt( d.absxv ) << std::endl;
      std::cout << "APX  sqrt(" << d.absxs << ") = " << approx_sqrt( d.absxs ) << std::endl;
      std::cout << "APX  sqrt(" << d.absxv << ") = " << approx_sqrt( d.absxv ) << std::endl;
      std::cout << "VAPX sqrt(" << d.absxs << ") = " << vapprox_sqrt( d.absxs ) << std::endl;
      std::cout << "VAPX sqrt(" << d.absxv << ") = " << vapprox_sqrt( d.absxv ) << std::endl;
      std::cout << std::endl;

      // std::cout << "STD isqrt(" << d.absxs << ") = " << 1.0f / std::sqrt( d.absxs ) << std::endl;
      // std::cout << "VDT isqrt(" << d.absxs << ") = " << vdt::fast_isqrtf( d.absxs ) << std::endl;
      // std::cout << "STD isqrt(" << d.absxv << ") = " << FloatV::One() / std::sqrt( d.absxv ) << std::endl;
      // std::cout << "VDT isqrt(" << d.absxv << ") = " << fast_isqrt( d.absxv ) << std::endl;
      // std::cout << std::endl;

      std::cout << "STD  atan2(" << d.xs << "," << d.ys << ") = " << std::atan2( d.xs, d.ys ) << std::endl;
      std::cout << "VDT  atan2(" << d.xs << "," << d.ys << ") = " << fast_atan2( d.xs, d.ys ) << std::endl;
      std::cout << "VAPX atan2(" << d.xs << "," << d.ys << ") = " << vapprox_atan2( d.xs, d.ys ) << std::endl;
      std::cout << "STD  atan2(" << d.xv << "," << d.yv << ") = " << std::atan2( d.xv, d.yv ) << std::endl;
      std::cout << "VDT  atan2(" << d.xv << "," << d.yv << ") = " << fast_atan2( d.xv, d.yv ) << std::endl;
      std::cout << "VAPX atan2(" << d.xv << "," << d.yv << ") = " << vapprox_atan2( d.xv, d.yv ) << std::endl;
      std::cout << std::endl;

      vdt::fast_sincosf( d.xs, ss, sc );
      std::cout << "VDT sincos(" << d.xs << ") = " << ss << " " << sc << std::endl;
      fast_sincos( d.xv, vs, vc );
      std::cout << "VDT sincos(" << d.xv << ") = " << vs << " " << vc << std::endl;
      std::cout << std::endl;

      // Limit number printed
      if ( ++n >= 10 ) break;
    }
  }

  // timing
  // if ( false )
  {

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing exp functions..." << std::endl;

    // STD scalar exp
    auto timeScSTDExp = solve<float>( data, []( const auto& d ) { return std::exp( d.xs ); } );
    std::cout << "Scalar STD  exp  " << timeScSTDExp << std::endl;

    // VDT scalar exp
    auto timeScVDTExp = solve<float>( data, []( const auto& d ) { return vdt::fast_expf( d.xs ); } );
    std::cout << "Scalar VDT  exp  " << timeScVDTExp << std::endl;

    // approx scalar exp
    auto timeScAPXExp = solve<float>( data, []( const auto& d ) { return approx_exp( d.absxs ); } );
    std::cout << "Scalar APX  exp  " << timeScAPXExp << std::endl;

    // v approx scalar exp
    auto timeScVAPXExp = solve<float>( data, []( const auto& d ) { return vapprox_exp( d.absxs ); } );
    std::cout << "Scalar VAPX exp  " << timeScVAPXExp << std::endl;

    // STD SIMD exp
    auto timeVcSTDExp = solve<FloatV>( data, []( const auto& d ) { return std::exp( d.xv ); } );
    std::cout << "SIMD   STD  exp  " << timeVcSTDExp << " ( " << timeVcSTDExp / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScSTDExp / timeVcSTDExp << " )" << std::endl;

    // STD SIMD exp
    auto timeVcVDTExp = solve<FloatV>( data, []( const auto& d ) { return fast_exp( d.xv ); } );
    std::cout << "SIMD   VDT  exp  " << timeVcVDTExp << " ( " << timeVcVDTExp / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScVDTExp / timeVcVDTExp << " )" << std::endl;

    // approx SIMD exp
    auto timeVcAPXExp = solve<FloatV>( data, []( const auto& d ) { return approx_exp( d.xv ); } );
    std::cout << "SIMD   APX  exp  " << timeVcAPXExp << " ( " << timeVcAPXExp / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScAPXExp / timeVcAPXExp << " )" << std::endl;

    // v approx SIMD exp
    auto timeVcVAPXExp = solve<FloatV>( data, []( const auto& d ) { return vapprox_exp( d.xv ); } );
    std::cout << "SIMD   VAPX exp  " << timeVcVAPXExp << " ( " << timeVcVAPXExp / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVAPXExp / timeVcVAPXExp << " )" << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDExp ) );
    asm volatile( "" : "+x"( timeScVDTExp ) );
    asm volatile( "" : "+x"( timeScAPXExp ) );
    asm volatile( "" : "+x"( timeScVAPXExp ) );
    asm volatile( "" : "+x"( timeVcSTDExp ) );
    asm volatile( "" : "+x"( timeVcVDTExp ) );
    asm volatile( "" : "+x"( timeVcAPXExp ) );
    asm volatile( "" : "+x"( timeVcVAPXExp ) );

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing log functions..." << std::endl;

    // STD scalar log
    auto timeScSTDLog = solve<float>( data, []( const auto& d ) { return std::log( d.absxs ); } );
    std::cout << "Scalar STD  log  " << timeScSTDLog << std::endl;

    // VDT scalar log
    auto timeScVDTLog = solve<float>( data, []( const auto& d ) { return vdt::fast_logf( d.absxs ); } );
    std::cout << "Scalar VDT  log  " << timeScVDTLog << std::endl;

    // approx scalar log
    auto timeScAPXLog = solve<float>( data, []( const auto& d ) { return approx_log( d.absxs ); } );
    std::cout << "Scalar APX  log  " << timeScAPXLog << std::endl;

    // v approx scalar log
    auto timeScVAPXLog = solve<float>( data, []( const auto& d ) { return vapprox_log( d.absxs ); } );
    std::cout << "Scalar VAPX log  " << timeScVAPXLog << std::endl;

    // STD( SIMD log
    auto timeVcSTDLog = solve<FloatV>( data, []( const auto& d ) { return std::log( d.absxv ); } );
    std::cout << "SIMD   STD  log  " << timeVcSTDLog << " ( " << timeVcSTDLog / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScSTDLog / timeVcSTDLog << " )" << std::endl;

    // VDT SIMD log
    auto timeVcVDTLog = solve<FloatV>( data, []( const auto& d ) { return fast_log( d.absxv ); } );
    std::cout << "SIMD   VDT  log  " << timeVcVDTLog << " ( " << timeVcVDTLog / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScVDTLog / timeVcVDTLog << " )" << std::endl;

    // approx SIMD log
    auto timeVcAPXLog = solve<FloatV>( data, []( const auto& d ) { return approx_log( d.absxv ); } );
    std::cout << "SIMD   APX  log  " << timeVcAPXLog << " ( " << timeVcAPXLog / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScAPXLog / timeVcAPXLog << " )" << std::endl;

    // v approx SIMD log
    auto timeVcVAPXLog = solve<FloatV>( data, []( const auto& d ) { return vapprox_log( d.absxv ); } );
    std::cout << "SIMD   VAPX log  " << timeVcVAPXLog << " ( " << timeVcVAPXLog / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVAPXLog / timeVcVAPXLog << " )" << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDLog ) );
    asm volatile( "" : "+x"( timeScVDTLog ) );
    asm volatile( "" : "+x"( timeScAPXLog ) );
    asm volatile( "" : "+x"( timeScVAPXLog ) );
    asm volatile( "" : "+x"( timeVcSTDLog ) );
    asm volatile( "" : "+x"( timeVcVDTLog ) );
    asm volatile( "" : "+x"( timeVcAPXLog ) );
    asm volatile( "" : "+x"( timeVcVAPXLog ) );

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing sqrt functions..." << std::endl;

    // STD scalar sqrt
    auto timeScSTDSqrt = solve<float>( data, []( const auto& d ) { return std::sqrt( d.absxs ); } );
    std::cout << "Scalar STD  sqrt " << timeScSTDSqrt << std::endl;

    // fast scalar sqrt
    auto timeScFSTSqrt = solve<float>( data, []( const auto& d ) { return fast_sqrt( d.absxs ); } );
    std::cout << "Scalar FST  sqrt " << timeScFSTSqrt << std::endl;

    // approx scalar sqrt
    auto timeScAPXSqrt = solve<float>( data, []( const auto& d ) { return approx_sqrt( d.absxs ); } );
    std::cout << "Scalar APX  sqrt " << timeScAPXSqrt << std::endl;

    // v approx scalar sqrt
    auto timeScVAPXSqrt = solve<float>( data, []( const auto& d ) { return vapprox_sqrt( d.absxs ); } );
    std::cout << "Scalar VAPX sqrt " << timeScVAPXSqrt << std::endl;

    // STD(Vc) SIMD sqrt
    auto timeVcSTDSqrt = solve<FloatV>( data, []( const auto& d ) { return std::sqrt( d.absxv ); } );
    std::cout << "SIMD   STD  sqrt " << timeVcSTDSqrt << " ( " << timeVcSTDSqrt / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScSTDSqrt / timeVcSTDSqrt << " )" << std::endl;

    // STD(Vc) SIMD apx sqrt
    auto timeVcFSTSqrt = solve<FloatV>( data, []( const auto& d ) { return fast_sqrt( d.absxv ); } );
    std::cout << "SIMD   FST  sqrt " << timeVcFSTSqrt << " ( " << timeVcFSTSqrt / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScFSTSqrt / timeVcFSTSqrt << " )" << std::endl;

    // STD(Vc) SIMD apx sqrt
    auto timeVcAPXSqrt = solve<FloatV>( data, []( const auto& d ) { return approx_sqrt( d.absxv ); } );
    std::cout << "SIMD   APX  sqrt " << timeVcAPXSqrt << " ( " << timeVcAPXSqrt / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScAPXSqrt / timeVcAPXSqrt << " )" << std::endl;

    // STD(Vc) SIMD vapx sqrt
    auto timeVcVAPXSqrt = solve<FloatV>( data, []( const auto& d ) { return vapprox_sqrt( d.absxv ); } );
    std::cout << "SIMD   VAPX sqrt " << timeVcVAPXSqrt << " ( " << timeVcVAPXSqrt / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVAPXSqrt / timeVcVAPXSqrt << " )" << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDSqrt ) );
    asm volatile( "" : "+x"( timeScVAPXSqrt ) );
    asm volatile( "" : "+x"( timeVcSTDSqrt ) );
    asm volatile( "" : "+x"( timeVcVAPXSqrt ) );

    // ---------------------------------------------------------------------------------------------------------------------

    // std::cout << "testing 1/sqrt functions..." << std::endl;

    // // STD scalar isqrt
    // auto timeScSTDIsqrt = solve<float>( data, []( const auto& d ) { return d.xs / std::sqrt( d.absxs ); } );
    // std::cout << "Scalar STD isqrt " << timeScSTDIsqrt << std::endl;

    // // VDT scalar log
    // auto timeScVDTIsqrt = solve<float>( data, []( const auto& d ) { return d.xs * vdt::fast_isqrtf( d.absxs ); } );
    // std::cout << "Scalar VDT isqrt " << timeScVDTIsqrt << std::endl;

    // // STD(Vc) SIMD log
    // auto timeVcSTDIsqrt = solve<FloatV>( data, []( const auto& d ) { return d.xv / std::sqrt( d.absxv ); } );
    // std::cout << "SIMD   STD isqrt " << timeVcSTDIsqrt << " ( " << timeVcSTDIsqrt / FloatV::Size
    //           << " per scalar, SpeedUp " << (double)FloatV::Size * timeScSTDIsqrt / timeVcSTDIsqrt << " )" <<
    //           std::endl;

    // // STD(Vc) SIMD log
    // auto timeVcVDTIsqrt = solve<FloatV>( data, []( const auto& d ) { return d.xv * fast_isqrt( d.absxv ); } );
    // std::cout << "SIMD   VDT isqrt " << timeVcVDTIsqrt << " ( " << timeVcVDTIsqrt / FloatV::Size
    //           << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVDTIsqrt / timeVcVDTIsqrt << " )" <<
    //           std::endl;

    // // make sure we are not optimized away
    // asm volatile( "" : "+x"( timeScSTDIsqrt ) );
    // asm volatile( "" : "+x"( timeScVDTIsqrt ) );
    // asm volatile( "" : "+x"( timeVcSTDIsqrt ) );
    // asm volatile( "" : "+x"( timeVcVDTIsqrt ) );

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing sincos functions..." << std::endl;

    // STD scalar sincos
    auto timeScSTDSinCos = solve<float>( data, []( const auto& d ) { return std::sin( d.xs ) + std::cos( d.xs ); } );
    std::cout << "Scalar STD sincos " << timeScSTDSinCos << std::endl;

    // VDT scalar sincos
    auto timeScVDTSinCos = solve<float>( data, []( const auto& d ) {
      float s, c;
      vdt::fast_sincosf( d.xs, s, c );
      return s + c;
    } );
    std::cout << "Scalar VDT sincos " << timeScVDTSinCos << std::endl;

    // STD SIMD sincos
    auto timeVcSTDSinCos = solve<FloatV>( data, []( const auto& d ) { return std::sin( d.xv ) + std::cos( d.xv ); } );
    std::cout << "SIMD   STD sincos " << timeVcSTDSinCos << " ( " << timeVcSTDSinCos / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScSTDSinCos / timeVcSTDSinCos << " )"
              << std::endl;

    // VDT SIMD sincos
    auto timeVcVDTSinCos = solve<FloatV>( data, []( const auto& d ) {
      FloatV s, c;
      fast_sincos( d.xv, s, c );
      return s + c;
    } );
    std::cout << "SIMD   VDT sincos " << timeVcVDTSinCos << " ( " << timeVcVDTSinCos / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVDTSinCos / timeVcVDTSinCos << " )"
              << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDSinCos ) );
    asm volatile( "" : "+x"( timeScVDTSinCos ) );
    asm volatile( "" : "+x"( timeVcSTDSinCos ) );
    asm volatile( "" : "+x"( timeVcVDTSinCos ) );

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing atan2 functions..." << std::endl;

    // STD scalar
    auto timeScSTDAtan2 = solve<float>( data, []( const auto& d ) { return std::atan2( d.xs, d.ys ); } );
    std::cout << "Scalar STD  atan2 " << timeScSTDAtan2 << std::endl;

    // VDT scalar
    auto timeScVDTAtan2 = solve<float>( data, []( const auto& d ) { return fast_atan2( d.xs, d.ys ); } );
    std::cout << "Scalar VDT  atan2 " << timeScVDTAtan2 << std::endl;

    // VAPX scalar
    auto timeScVAPXAtan2 = solve<float>( data, []( const auto& d ) { return vapprox_atan2( d.xs, d.ys ); } );
    std::cout << "Scalar VAPX atan2 " << timeScVAPXAtan2 << std::endl;

    // STD(Vc) SIMD
    auto timeVcSTDAtan2 = solve<FloatV>( data, []( const auto& d ) { return std::atan2( d.xv, d.yv ); } );
    std::cout << "SIMD   STD  atan2 " << timeVcSTDAtan2 << " ( " << timeVcSTDAtan2 / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScSTDAtan2 / timeVcSTDAtan2 << " )" << std::endl;

    // STD(Vc) SIMD
    auto timeVcVDTAtan2 = solve<FloatV>( data, []( const auto& d ) { return fast_atan2( d.xv, d.yv ); } );
    std::cout << "SIMD   VDT  atan2 " << timeVcVDTAtan2 << " ( " << timeVcVDTAtan2 / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVDTAtan2 / timeVcVDTAtan2 << " )" << std::endl;

    // VAPX SIMD
    auto timeVcVAPXAtan2 = solve<FloatV>( data, []( const auto& d ) { return vapprox_atan2( d.xv, d.yv ); } );
    std::cout << "SIMD   VAPX atan2 " << timeVcVAPXAtan2 << " ( " << timeVcVAPXAtan2 / FloatV::Size
              << " per scalar, SpeedUp " << (double)FloatV::Size * timeScVAPXAtan2 / timeVcVAPXAtan2 << " )"
              << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDAtan2 ) );
    asm volatile( "" : "+x"( timeScVDTAtan2 ) );
    asm volatile( "" : "+x"( timeScVAPXAtan2 ) );
    asm volatile( "" : "+x"( timeVcSTDAtan2 ) );
    asm volatile( "" : "+x"( timeVcVDTAtan2 ) );
    asm volatile( "" : "+x"( timeVcVAPXAtan2 ) );

    // ---------------------------------------------------------------------------------------------------------------------

    std::cout << "testing asin functions..." << std::endl;

    // STD scalar asin
    auto timeScSTDAsin = solve<float>( data, []( const auto& d ) { return std::asin( d.zs ); } );
    std::cout << "Scalar STD asin " << timeScSTDAsin << std::endl;

    // VDT scalar asin
    auto timeScVDTAsin = solve<float>( data, []( const auto& d ) { return vdt::fast_asinf( d.zs ); } );
    std::cout << "Scalar VDT asin " << timeScVDTAsin << std::endl;

    // STD(Vc) SIMD asin
    auto timeVcSTDAsin = solve<FloatV>( data, []( const auto& d ) { return std::asin( d.zv ); } );
    std::cout << "SIMD   STD asin " << timeVcSTDAsin << " ( " << timeVcSTDAsin / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScSTDAsin / timeVcSTDAsin << " )" << std::endl;

    // STD(Vc) SIMD asin
    auto timeVcVDTAsin = solve<FloatV>( data, []( const auto& d ) { return fast_asin( d.zv ); } );
    std::cout << "SIMD   VDT asin " << timeVcVDTAsin << " ( " << timeVcVDTAsin / FloatV::Size << " per scalar, SpeedUp "
              << (double)FloatV::Size * timeScVDTAsin / timeVcVDTAsin << " )" << std::endl;

    // make sure we are not optimized away
    asm volatile( "" : "+x"( timeScSTDAsin ) );
    asm volatile( "" : "+x"( timeScVDTAsin ) );
    asm volatile( "" : "+x"( timeVcSTDAsin ) );
    asm volatile( "" : "+x"( timeVcVDTAsin ) );

    // ---------------------------------------------------------------------------------------------------------------------
  }

  return 0;
}
