!-----------------------------------------------------------------------------
! Package     : Kernel/LHCbMath
! Responsible : Juan Palacios
! Purpose     : A collection of simple generic classes and functions 
!               for geometry and matrix algebra
!               All headers included in directory LHCbMath
!-----------------------------------------------------------------------------

!========================= LHCbMath v3r25 2011-04-04 =========================
! 2011-03-29 - Vanya Belyaev
 - Kinematics.h
    fix a bug in Gaudi::Math::sigma2pt calculation (thanks to Simone Bifani)

!========================= LHCbMath v3r24 2011-02-22 =========================
! 2011-02-21 - Vanya Belyaev
 - ValueWithErorr:
    add constructor from textual representation 

! 2011-02-08 - Marco Clemencic
 - Fixed defect #10002.10607
   http://lhcb-coverity.cern.ch:8080/sourcebrowser.htm?projectId=10002#mergedDefectId=10607

!========================= LHCbMath v3r23 2011-01-31 =========================
! 2011-01-22 - Vanya Belyaev
 - add more functions for Gaudi::Math::ValueWithErrors 

! 2011-01-14 - Vanya Belyaev
 - add one more test TestAbs, that shows the difference between 
     std::fabs, std::abs , ::fabs and ::abs 

   It prints:
  
  Value:  -4115           std::fabs - std::abs : 0  fabs - abs :    0
  Value:  1371.6667       std::fabs - std::abs : 0  fabs - abs :    0.66666667
  Value:  -457.22222      std::fabs - std::abs : 0  fabs - abs :    0.22222222
  Value:  152.40741       std::fabs - std::abs : 0  fabs - abs :    0.40740741
  Value:  -50.802469      std::fabs - std::abs : 0  fabs - abs :    0.80246914
  Value:  16.934156       std::fabs - std::abs : 0  fabs - abs :    0.93415638
  Value:  -5.6447188      std::fabs - std::abs : 0  fabs - abs :    0.64471879
  Value:  1.8815729       std::fabs - std::abs : 0  fabs - abs :    0.88157293
  Value:  -0.62719098     std::fabs - std::abs : 0  fabs - abs :    0.62719098
  Value:  0.20906366      std::fabs - std::abs : 0  fabs - abs :    0.20906366
  Value:  -0.069687886    std::fabs - std::abs : 0  fabs - abs :    0.069687886
  Value:  0.023229295     std::fabs - std::abs : 0  fabs - abs :    0.023229295

  One clearly sees that ::abs truncates double values 


! 2011-01-10 - Marco Cattaneo
 - Fix icc warnings and remarks

!========================= LHCbMath v3r22 2010-11-27 =========================
! 2010-11-14 - Vanya Belyaev
 - add (python) accessor to correlation matrix

! 2010-11-13 - Vanya Belyaev
 - add eigenvalues and eigenvectors in python for 2x2,3x3 and 4x4 matrices 
 - cmt/requirements 
    version increment to v3r22

!========================= LHCbMath v3r21 2010-10-25 =========================

! 2010-10-12 - Vanya Belyaev
 - LHCbMath/Lomont.h
    make use of Lomont from GaudiKernel
 - src/Lomont.cpp 
    remove the file...

! 2010-10-12 - Vanya Belyaev

 - tests/blind.cpp

    fix for win32 platform 

! 2010-10-10 - Vanya Belyaev

   LHCbMath/Blind.h

     add some string->double hashing (useful for blinding) 

! 2010-10-06 - Marco Clemencic
 - Fixed an ICC remark that was mistaken for en error by the nightly build.

! 2010-10-05 - Marco Clemencic
 - Fixed a configuration problem with the Intel compiler.

!========================= LHCbMath v3r20 2010-09-27 =========================
! 2010-09-27 - Vanya Belyaev
 - python/LHCbMath/Types.py
   remove unprintable null byte form the string
   (manythanks to Marco Clemencic)

! 2010-09-26 - Vanya Belyaev
 - python/LHCbMath/Types.py
     solve the problem with vizibility of symbols 

 - python/LHCbMath.py -> python/LHCbMath/Math.py 
 - python/LHCbMath/__init__.py 
     forced import of everything from LHCbMath/Math.py  
      (for backward compatibility)

 - cmt/requiremnts
    version increment to v3r20 

!========================= LHCbMath v3r19 2010-07-19 =========================
! 2010-07-12 - Manuel Tobias Schiller
 - remove the code in SymPosDefMatrixInverter.h since an improved version is
   now part of ROOT (as it was an implementation header the code was never
   meant to be used directly, so I just left a comment pointing to the new
   code; "bad" code using this file directly should break and get fixed)
 - in MatrixInversion.h replace the call into SymPosDefMatrixInverter to the
   newer corresponding routine in ROOT; this should be transparent for all
   well-behaved client code

!========================= LHCbMath v3r18 2010-06-20 =========================
! 2010-06-20 - Marco Cattaneo
 - LHCbMath/MatrixInversion.h:
    Add missing include path to LHCbMath includes

! 2010-06-16 - Vanya Belyaev
 - LHCbMath/Types.py
   add the proper printout for matrices and symmetric matrices 

! 2010-06-16 - Vanya Belyaev
 - Kinematics: 
    add overload methods for matrix expressions 

! 2010-06-08 - Vanya Belyaev
 - LorentzVectorWithError: 
      add few useful methods 

! 2010-05-26 - Vanya Belyaev
 - fix some errors in ParticleParams 

! 2010-05-26 - Vanya BELYAEV 
 - SymPosDefMatrixInverter.h
   add helper structire _invertForAllN 
   ( the code is copied from Manuel's class invertForAllN, 
     the only one difference "N" is compile time constant (template parameter), 
     and thus it allows the compilation for Win32 platform) .
   The inverter<> has been update dto use _inverterFroAllN instead of invertrerForAlLN.
   It is *safe*, since for inverter<>, N is a compile tiem constant.

! 2010-05-25 - Vanya Belyaev
 - minor fix, hopefully it also fixes the compilation 
   problem for windows platform

! 2010-05-24 - Vanya Belyaev
 - ParticleParams.h/cpp
   new object for representation of 4-momentum/reference-point&decay-length  
   iformation coherent, self-contained way. It is a useful representation 
   for resuld to variosu fitters.
   Essetially it is a bit modified verison of 
     class LHCb::VtxFitParams by wouter Huldbergen 
     from Phys/DecayTreeFitter package

 - LHCbMath/Types.py
      fix few typos 
 - LorentzVectorWithError.h
      add few useful accessors 

 - cmt/requirements 
     version increment to v3r18 

!========================= LHCbMath v3r17p1 2010-05-21 =======================
! 2010-05-18 - Marco Cattaneo
 - LHCbMath/Bit.h, dict/LHCbMathDict.h: Fix Windows compilation warnings

!========================= LHCbMath v3r17 2010-04-09 =========================
! 2010-03-22 - Vanya Belyaev

 - LHCbMath/Types.py 
    add symbols from Gaudi::TrackMatrix and the rest of 
    SMatrix/SVector classes mentioned in 
      ( cd $LHCBRELEASES/LHCB/LHCB_v29r2/Event/ ;  grep XXX */Event/*.h ) 

! 2010-03-18 - Vanya Belyaev

 - ValueWithError 

    add helper function for evalaution of "fraction" a/(a+b) 
    add "asymmetry" (a-b)/(a+b) 
    add possibility to define the printout format 
    add function to evaluate binomina-efficiency 

    add these functionality into the dictionary 

 - cmt/requirements

    version increment to v3r17 


!========================= LHCbMath v3r16 2010-02-12 =========================
! 2010-02-09 - Vanya BELYAEV 
 - LHCbMath/EigenSystem.h(.icpp)
     fix compilation problmems for Win32 platrofm
 - test/TestEigen.cpp
     new test/example for EigenSystem
 - cmt/requirements
     version increment to v3r16 
 
!========================= LHCbMath v3r15 2010-01-20 =========================
! 2010-01-02 - Vanya BELYAEV 
 - LHCbMath/LHCbMath.h

     Equal_To : 

        a. use "Lomont"-compare for floating point numbers (from GaudiKernel) 
           instead of "Knuth/GSL"-compare

        b. "Precision" parameter now is  unisgned short/int instead of float/double.
           The constructor from floating-point precision is PRIVATE now, 
           thus compiler error will be generated 

        c. add explicit specializations for std::vector<double> and 
             std::vector<float>

      equal_to_int , equal_to_uint:

           use "Lomont"-compare for floating point numbers (from GaudiKernel) 
           instead of "Knuth/GSL"-compare
      
      knuth_equal_to_double: 
 
           backup old "Knuth/GSL" comparison criteria for floatring pooint numbers 

 - cmt/requirements
       version increment to v3r15 

!========================= LHCbMath v3r14 2009-11-13 =========================
! 2009-10-23 - Vanya Belyaev

 - add new tests for CPU comparison of Lomont-type 
      & Knuth-type compare.

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
***************************************************
 Knuth/GSL-compare 4.0001e+06 Time User   : Tot= 24.8  [s] Ave/Min/Max= 1.24(+-0.428)/    0/    2 [ms] #=20000
 Lomont-compare    3.9996e+06 Time User   : Tot= 5.86  [s] Ave/Min/Max=  293(+-  455)/    0/1e+03 [us] #=20000

  Bottom line:  Lomont-type compare is approximately 4 times more CPU efficient 


! 2009-10-23 - Vanya Belyaev

 - LHCbMath/LHCbMath.h
    
      reimplement the function "round" using boost:numeric 

 - tests/TestRound.cpp 
     
      new test/illustration for new "round" function.

    Three functions are compared:

     1. "old-round" (based on Knuth-compare) 
     2. modified round (based on Lomont-compare 
     2  New implementation using boost::numeric::converter 
  
   Results:  
 
      - No difference in result has been found , 
      - Large difference in CPU has been detected: 

    Differences: 0

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
***************************************************
 round-Knuth     -1.3e+07
                Time User   : Tot= 17.2  [s] Ave/Min/Max= 34.5(+-  182)/    0/1e+03 [us] #=500000
 round&Lomont    -1.3e+07
                Time User   : Tot= 4.91  [s] Ave/Min/Max= 9.82(+- 98.6)/    0/1e+03 [us] #=500000
 round-New       -1.3e+07
                Time User   : Tot= 2.03  [s] Ave/Min/Max= 4.06(+- 63.6)/    0/1e+03 [us] #=500000


     Lomont-based rounding is approximately factor of 4 faster, 
     and the new rounding is approximately factor of 10 faster...
    

! 2009-10-22 - Vanya Belyaev

 - python/LHCbMath/Types.h

     add more decorations for lines & planes & their operations, like 
      intersections, impact parameters, distances, parallel, etc..
      
 - python/LHCbMath/tests.py

     add the tests for new functions 

 - cmt/requirements 

     version increment to v3r14 


!========================= LHCbMath v3r13 2009-10-16 =========================
! 2009-10-07 - Gerhard Raven
 - faster (but equivalent) check for parallel tracks in GeomFun.icpp

! 2009-09-13 - Vanya BELYAEV
 - add the parsing functions to ValueWithError and 
   std::vector<ValueWithError> classes, thus allowing their usage 
   as proeprteis for Gaudi components 
 

! 2009-09-12 - Vanya BELYAEV
 - more polishing for *WithErrorClasses 
 - add python/LHCbMath/Types.py helper module to load few 
    important classes, like  Gaudi.XYZPoint, etc... 
    the classes also "Decorated" on-flight 


! 2009-09-05 - Vanya BELYAEV
 - SVEctorWithErorr 
    add functions to get the correlation coefficient and correlation matrix 
 - cmt/requirements 
    version increment to v3r13 

!========================= LHCbMath v3r12 2009-09-02 =========================
! 2009-08-19 - Vanya BELYAEV
 - ValueWithError
    1. add the constuctor form (value.error)-pair 
    2. add the conversion to  (value,error)-pair 

 - cmt/requirements
   version increment to v3r12

!========================= LHCbMath v3r11p1 2009-07-28 =======================
! 2009-07-20 - Juan PALACIOS
 - python/LHCbMath.py
  . Comment out line that causes debug and windows seg fault

!========================= LHCbMath v3r11 2009-07-13 =========================
! 2009-07-10 - MC for Wouter
 - In MatrixTransforms.h, use std::sqrt, std::abs instead of sqrt, fabs 

! 2009-07-09 - Marco Cattaneo
 - Line.h: Fix a compilation warning on windows
 - Cleanup requirements (remove linkopts for ROOT < 5.19)

! 2009-07-06 - Marco Cattaneo
 - Bit.h: Fix a compilation warning on windows
 - Fix some doxygen warnings

!========================= LHCbMath v3r10 2009-06-29 =========================
! 2009-06-29 - Juan PALACIOS
 - python/LHCbMath.py
  . Add some LorentzVectors and 3D rotation types.

!========================= LHCbMath v3r9 2009-06-16 ==========================
! 2009-06-13 - Vanya BELYAEV 
 - add new class: SVectorWithError
 - fix matrix inversions 
        Point3DWithError
        Vector3DWithError 
        LorentzVectorWithError
 - LorentzVectorWithError:
         add method sigmaMass and chi2mass
 - LHCbMath/Kinematics.h
         sigmamass: use invalid return valeus for invalid arguments 
 
! 2009-06-13 - Vanya Belyaev
 - fix for Linux

! 2009-06-12 - Vanya BELYAEV
 - add new classes:

     Gaudi::Math::ValueWithError
     Gaudi::Math::Point3DWithError
     Gaudi::Math::Vector3DWithError
     Gaudi::Math::LorentzVectorWithError 

 - cmt/requirements 
     version increment to v3r9 

!========================= LHCbMath v3r8 2009-05-25 ==========================
! 2009-05-23 - Vanya Belyaev
 - src/Lomont.cpp
    use unions instead of reinterpret_cast to avoid gcc4 problems 
    for gcc34 the result are identical 
 - add tests for Lomont-compare
 - cmt/requirements 
    version inrement to v3r8

!========================= LHCbMath v3r7 2009-05-07 ==========================
! 2009-04-08 - Vanya BELYAEV
 - LHCbMath/Digit.h
   fix compilation warning for Win32 platform

!========================= LHCbMath v3r6 2009-02-18 ==========================
! 2009-02-18 - Marco Cattaneo
 - Removed slc3 cases from GSL linkopts

! 2009-02-05 - Marco Clemencic
 - Removed the -no_auto_imports of GSL.

! 2009-02-04 - Marco Clemencic
 - Fixed usage of GSL (-no_auto_imports + -no-as-needed).

! 2009-01-30 M Needham
 - Add function to get width of the half sample in ModeFunctions

!========================= LHCbMath v3r5 2009-01-12 ==========================
! 2009-01-10 - Vanya BELYAEV 
 - LHCbMath/Digit.h
   to please Reflex at Win32 platform. make a drafstical simplification 
   of argument for BOOST_STATIC_ASSERT macro.

! 2008-12-03 M Needham
 - More protections against fpe in ModeFunctions

! 2008-12-02 - Vanya BELYAEV
 - LHCbMath/Kinematics.h
    fix the bugs...
 - tests/kinematics.cpp
    one more test-file 
 - cmt/requirments 
    version increment to v3r5 

! 2008-12-02 M Needham
  - Guard against fpe in generalizedMean calc 

! 2008-12-02 M. Needham
  - Add robust functions to calculate mode or MPV [ModeFunctions.h]

! 2008-11-28 - Gerhard Raven
 - add list<MD5> to the dictionary

!========================= LHCbMath v3r4 2008-11-17 ==========================
! 2008-11-08 - Vanya BELYAEV
 - LHCbMath/Lomont.h
   src/Lomont.cpp
    add an equality functions for float&doubles using very efficient
    implementation of Bruce Dawson's algorithm by Chris Lomont

    @see www.lomont.org "Taming the floating point beast"
    @see http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm

    The files define two major functions in namespace LHCb::Math
      lomont_compare_float  (float  A,  float  B, unsigned short maxULPs = 100 )
      lomont_compare_double (double A,  double B, unisgned int   maxULPs )

   and two helper functions: 
      next_float 
      next_double    

   The helper functions can be used to adjust properly the parameters maxULPS for
   the "major" fucntions.

   For each maxULPs one can evaluate the corresponding 
   relative precision R = |A-B|/(|A|+|B|)

   For floats the relation is:
        R ~(5*e-8)*maxULPS for |A| > 1.e-37, and it quickly goes to 1, 
        as |A| goes from 1.e-37 to 0     

   For doubles the relation is: 
        R ~(5*e-16)*maxULPS for |A| > 1.e-304, and it quickly goes to 1, 
        as |A| goes from 1.e-304 to 0     
  

! 2008-10-24 - Marco Cattaneo
 - Add link to libGenVector when using ROOT_GE_5_19

! 2008-10-22 - Marco Cattaneo
 - Add -no_auto_imports to GaudiPython use

! 2008-10-01 - Vanya BELYAEV
 - LHCbMath/LHCbMath.h
   LHCb::Math::equal_to_int 
   fix an error "integral constant overflow"

!========================= LHCbMath v3r3 2008-09-30 ==========================
! 2008-09-17 - Vanya BELYAEV
 - LHCbMath/LHCbMath.h
    add the functions for comparison of double and int, and double 
    and unsigned int:
      LHCb::Math::equal_to_int 
      LHCb::Math::equal_to_uint   

! 2008-09-06 - Manuel Tobias Schiller
 - LHCbMath/{MatrixInversion.h,SymMatrixInverter.h,SymPosDefMatrixInverter.h}
   Add matrix inversion routines for symmetric and symmetric positive definite
   matrices based on Cholesky decomposition for the positive definite case (or
   a variant thereof for the general symmetric case). These routines have
   template specializations for different matrix sizes for better performance.
   All the inversion code should be inlined by the compiler.
   For the positive definite case, the code should be more accurate than the
   inversion routine that comes with ROOT::SMatrix, in the general case, it
   depends on the matrix which implementation is more accurate; see the
   documentation for details.
   The user interface is in MatrixInversion.h and will work for symmetric
   ROOT::SMatrix instances. The inversion code is implemented in the two other
   header files. The implementation is a little more generic, so users who
   know what they're doing might want to call this code directly for other
   types of matrices (which should behave like a ROOT::SMatrix, though).

!========================= LHCbMath v3r2 2008-09-03 ==========================
! 2008-08-02 - Vanya BELYAEV
 - LHCbMath/Bit.h
   LHCbMath/Digit.h

     add functionality to get the RANGE of bits (or decimal digits) from
     unsigned integral type. 

     The utilities for evaluation of 
     decimal N1->N2 decimal digits for the unsigned integral values:
 
    -  Gaudi::Math::IDigits 
       The most efficient compile-time evaluator.  
       It is applicable if both N1/N2 and value are compile-time constanst 
    -  Gaudi::Math::Digits 
       Rather efficient fuctor, N1&N2 are compile-time constanst 
    -  Gaudi::Math::digits
       The regular function, the least efficient evaluator 
 
     The utilities for evaluation of range of bits [N1,N2) for 
     the unsigned integral values. N2 is *NOT* included:
   
     -  Gaudi::Math::IBits 
        The most efficient compile-time evaluator.
        It is applicable if both N1&N2 and value are compile-time constanst 
     -  Gaudi::Math::Bits
        Rather efficient fuctor, N1&N2 are compile-time constanst 
     -  Gaudi::Math::bits
        The regular function, the least efficient evaluator 

! 2008-08-01 - Vanya BELYAEV
 - LHCbMath/Bit.h
    add few more evaluators of Nth nit for integral unsigned types 

    Finally one has three possibility:

    1) Gaudi::Math::IBit, for compile time evaluation of Nth bit:
    
          const bool bit12 = Gaudi::Math::IBit<unisgned int,12456,12>::value ;

    2) Gaudi::Math::Bit, for evaluation of Nth  bit of integral type,
       N is a compile-time constant:

          Gaudi::Math::Bit<unsigned int,12> fun ;
              
        unsigned int value = ... ;

        const bool bit12 = fun ( value ) ;

    3) Gaudi::Math::bit, the function which should be use if neither 
       value nor N are known at compile time:

        
       unsigned int value = ... ;
       unsigned int N     = ... ;
 
         const bool bitN = Gaudi::Math::bit ( value , N ) ;
 
    The compile-time protection is added for all templates, 
    the "value" is required to be
        - integral 
        - unsigned 
    The check is done with boost::integer_traits 

    ATTENTION! 
    The least significat bit is numbered as  #0 

 - LHCbMath/Digit.h
 
    add few more evaluators of Nth decimal digit  for integral unsigned types 

    Finally one has three possibility:

    1) Gaudi::Math::IDigit, for compile time evaluation of Nth decimal digit:
    
          const int dig5 = Gaudi::Math::IDigit<unisgned int,12456,5>::value ;

    2) Gaudi::Math::Digit, for evaluation of Nth  decimal of integral unsigned 
       type,
       N is a compile-time constant:

          Gaudi::Math::Digit<unsigned int,12> fun ;
              
        unsigned int value = ... ;

        const int digit12 = fun ( value ) ;

    3) Gaudi::Math::digit, the function which should be use if neither 
       value nor N are known at compile time:

        
       unsigned int value = ... ;
       unsigned int N     = ... ;
 
       const int digitN = Gaudi::Math::digit ( value , N ) ;
 
    The compile-time protection is added for all templates, 
    the "value" is required to be
        - integral 
        - unsigned 
    The check is done with boost::integer_traits 

    ATTENTION! 
    The least significat digit is numbered #0 
  

-  LHCbMath/TypeWrapper.h
      TypeWrapper utility (extraction from IPower.hpp)
      Null and Null_ strructures 

-  LHCbMath/IPower.hpp
      extract the useful TypeWrapper consttuction

- tests/pow.cpp
      new test for testiing various "pow"-functions  

- tests/bit.cpp
      new test for testiing various "bit"-functions  

- tests/digit.cpp
      new test for testiing various "digit"-functions  

- cmt/requirements 
       add "check" applications: 

           TestPow 
           TestBit 
           TestDigit 
     
        version increment to v3r2 

!========================= LHCbMath v3r1 2008-07-16 ==========================
! 2008-07-15 - Wouter Hulsbergen (code provided by Manuel Schiller)
 - LHCbMath/MatrixInversion.h: matrix inversion for pos-def
   symmetric matrices based on cholesky decomposition.

! 2008-07-09 - Vanya BELYAEV
 - LHCbMath/Digit.h    
    new (templated) function to get the Nth decimal digit for integer type:

     #include "LHCbMath/Digit.h"

     ...
     const int number = ... ;
     if( 5 != Gaudi::Math::digit ( number , 1 ) ) { ... } 

 - LHCbMath/Bit.h: Function to check Nth bit of the integer type 

     #include "LHCbMath/Bit.h"

     ...
     const int number = ... ;
     if (  Gaudi::Math::bit ( number , 11 ) ) { ... } 

  - cmt/requirements:  version increment to v3r1 
 
!========================= LHCbMath v3r0 2008-07-01 ==========================
! 2008-07-01 - Gerhard Raven
 - add MD5 and vector<MD5> to the dictionary
 - Add default c'tor of MD5 which is required if you want a vector<MD5> in
   a dictionary...

! 2008-07-01 - Marco Cattaneo
 - On Windows, disable some dictionaries that do not compile
  
! 2008-06-30 - Marco Cattaneo
 - Removed  <class name = "Gaudi::Math::Math::Dummy"/> from selection file

! 2008-06-25 - Juan PALACIOS
 - dict/LHCbMathDict.h
  . Add all the GeomFun::Gaudi::Math free functions to the dictionary.
 - cmt/requirements
  . Change version to v3r0 since namespace changes are not backwards 
    compatible.

! 2008-06-24 - Juan PALACIOS
 - LHCbMath/Line.h
 - LHCbMath/LineTypes.h
 - dict/LHCbMathDict.h
 - dict/LHCbMathDict.xml
  . Put everything directly under the Gaudi:: namespace under Gaudi::Math::
 - python/LHCbMath.py
  . Adapt to changes above.

! 2008-06-24 Juan PALACIOS
 - cmt/requirements
  . Remove LHCbMath from PYTHONPATH and add apply_pattern install_python_modules
! 2008-06-24 Juan PALACIOS
 - add dict/LHCbMath.h, LHCbMath.xml
  . Python dictionaries for some Line types and GeomFun free functions.
 - add python/LHCbMath.py
  . Python module to ease the use of Lines and GeomFun free functions.
 - cmt/requirements
  . Increase version to v2r9
  . Add LHCbMath to PYTHONPATH
  . Make linker library from src/*.cpp files

!========================= LHCbMath v2r8 2008-06-04 ==========================
! 2008-06-04 M Needham
 - Avoid a comparision of == of doubles in round function

! 2008-05-28 - Gerhard Raven
 - cleanup of MD5 code, don't artificially distinguish between digest and engine

! 2008-05-22 - Marco Cattaneo
 - Fix some doxygen warnings

! 2008-05-22 - Gerhard Raven
 - Add MD5.h src/MD5.cpp: class to compute an MD5 digest of strings, or objects
   which can be streamed into strings

!========================= LHCbMath v2r7p1 2008-04-29 ========================
! 2008-04-29 - Marco Cattaneo
 - Fix a doxygen warning

! 2008-04-29 - Vanya BELYAEV
 -  LHCbMath/Line.h
    fix LaTeX inside DoxyGen comments 

!========================= LHCbMath v2r7 2008-04-02 ==========================
! 2008-04-02 - Marco Cattaneo
 - In LHCbMath.h:
   . Change namespace from LHCbMath to LHCb::Math
   . Add floating point comparison constructs previously in LoKi::StdMath
 - In requirements: Clean up link options for MathCore

! 2008-03-10 - Vanya BELYAEV
 -  LHCbMath/GeomFun.icpp
    LHCbMath/GeomFun.h
    LHCbMath/Line.h
   fix a bug in Gaudi::Math::closestPointParam function, 
   improve a bit the  doxygen comments... 

! 2008-03-05 - Vanya BELYAEV
 - LHCbMath/MatrixTransforms.h
   Add many new operators into namespace Gaudi::Math::Operators 
   The full list is availabel through the doxyen documentation of 
   namespace Gaudi::Math::Operators. These operators  are really very
   helpful and useful for coding of the kinamtical fitters.  

!========================= LHCbMath v2r6 2008-02-24 ==========================
! 2008-02-24 - Vanya BELYAEV
 - LHCbMath/MatrixUtils.h
     add a bit more optimizations 

! 2008-02-20 - Vanya BELYAEV 
 - add few more optimizations into MatrixUtils.h & MatrixTransforms.h
   in particular the additon operators for "geometry" and "linear algebra" 
   objects.. They really saves a lot of lines in coding the various fitters

!========================= LHCbMath v2r5 2008-01-21 ==========================
! 2008-01-19 - Vanya BELYAEV
 - LHCbMath/MatrixUtils.h
    add new function Gaudi::Math::mult for evaluation of v1^T*M*v2
 
! 2008-01-15 - Vanya BELYAEV

 - Split LHCbMath/MatrixUtils.h into two files MatrixUtils.h and MatrixTransforms.h

    I) The current functionality of LHCbMath/MatrixUtils.h :

      *     - (re)setting all elements of matrices and vectors
      *     - set the diagonal matrix to be proportional to unit matrix 
      *     - efficient scaling of matrices&vectors
      *     - minimal&maximal elements of matrices and vectors
      *     - indices of the minimal&maximal elements of matrices and vectors 
      *     - minima&maximal by absolute value elements of matrices and vectors 
      *     - indices of minima&maximal by absolute value elements of matrices and vectors 
      *     - the trace of the square matrices
      *     - find the minimal/maximal/abs.minimal&abs.maximal diagonal elements of square matrices
      *     - count number of elements which satisfy some criteria
      *     - count number of diagonal elements which satisfy some criteria
      *     - check the presence of elements which satisfy some criteria
      *     - check the presence of diagonal elements which satisfy some criteria
      *     - efficient element-by-element "equality" for matrices 
      *     - few specific "matrix updates" (in the spirit of BLAS)

    II) The current functionality of LHCbMath/MatrixTransforms.h : 

      *     - conversion from geometry&kinematical vectors into Linear Algebra vectors
      *     - conversion from Linear Algebra vectors into geometry&kinematical vectors
      *     - evaluation of various "chi2"-like values, like chi2-distance between 
      *       two 3D or 4D-vectors. E.g. "vicinity" of two points, or two momenta 
      *     - conversion form "track" to 4-momenta representation (by Sean BRISBANE)
      *     - the transition matrix for the conversion form "track" to 
      *        4-momenta representation (by Sean BRISBANE)
      *
 
  ATTENTION!
  ==========
  It "partly" breaks some existing lines, since not "Gaudi::Math::geo2la" functions
  are available through LHCbMath/MatrixTransporms.h instead of LHCbMath/MatrixUtils.h 
  header file. The fix is trivial: one just needs to include LHCbMath/MatrixTransforms.h file. 

 - Add new file Kinematics.h to keep some pure mathematical functions useful
   for kinematical calculations. Currently it contains the functions for 
   evaluation of dispersions and sigmas  for mass and mass^2 and chi2 of mass:
       *   - sigma2mass2   :   sigma^2(M^2)
       *   - sigma2mass    :   sigma^2(M)  for M^2 > 0 
       *   - sigmamass     :   sigma(M)    for M^2 > 0
       *   - chi2mass      :   delta^2(M^2)/sigma^2(M^2) 
 
 - Update(improve?) the doxygen comments for some other header files.

!========================= LHCbMath v2r4 2007-11-29 ===========================
! 207-11-27 - Sean BRISBANE
 - Add functions in MatrixUtils.h
   o geoLA: Fill Lorentz vector from 3D displacement vector + Mass
   o JacobdP4dMom: Compute Jacobian for the transformation
                   covPxPyPzE_xyz = Jacob * covTxTyQoP_xyz;

! 2007-10-16 Wouter Hulsbergen
 - Changed templates for line-to-line calculations to allow for lines of 
   different types

!========================= LHCbMath v2r3 2007-10-02 ===========================
! 2007-10-02 - Marco Cattaneo
 - Remove implementations of cbrt from Power.h, now available in GaudiKernel

!========================= LHCbMath v2r2 2007-07-10 ===========================
! 2007-07-10 - Juan Palacios
 - LHCbMath/GeomFun.icpp
    . Bug fix to parallel(line, line) method.
   . Bug-fix in closestPointParams method.

! 2007-07-10 - Marco Cattaneo
 - More doxygen fixes

! 2007-07-09 - Juan Palacios
 - LHCbMath/GeomFun.icpp
   . closestPointParams(line, line, double, double)  was assuming lines with 
     normalised direciton vectors. Fix to work with arbirtary length 
     direction vectors.
 - Fix LHCbMath/Power.hpp doxygen

!========================= LHCbMath v2r1 2007-02-06 ===========================
! 2007-02-26 - Marco Cattaneo
 - Remove SMatrix from linkopts
 - Fix doxygen warnings

!========================= LHCbMath v2r0 2006-12-15 ===========================
! 2006-12-15 - Marco Cattaneo
 - Added LHCbMath/LHCbMath.h and LHCbMath/LineTypes.h, moved from LHCbDefinitions
 - Removed Root from include path, already in GaudiKernel

! 2006-12-06 - Florence RANJARD
 - apply_pattern install_more_includes

!========================== LHCbMath v1r3 2006-11-02 ==========================
! 2006-11-02 - Chris Jones
 - Fix windows compilation error with ambiguity in pow with Gaudi::Math::cbrt

! 2006-11-01 - Marco Cattaneo
 - Update requirements to add MathCore and SMatrix to the linkopts, previously
   done in LHCBDefinitions 

! 2006-11-01 - Chris Jones
 - Update Gaudi::Math::cbrt to be non-templated, to avoid problems with
    cbrt(int) returning a truncated int

! 2006-11-01 - Juan PALACIOS
  - LHCbMath/GeomFun.icpp
    . Fix a few bugs. Some functions were assuming Line had unit direction
      vector. This is not necessarily the case so use line.direction().Unit()
      where appropriate.

! 2006-10-27 - Chris Jones
 - Implement cube root method Gaudi::Math::cbrt(x) that works on all platforms,
   but uses the fast in built cbrt on GCC systems

! 2006-10-27 - Juan PALACIOS
  - LHCbMath/GeomFun.icpp
    . Remove explicit dependency on ROOT::Math vector type. Functions are now
      totally generic.

  - cmt/requirements
    . Removed dependency on Kernel/LHCbDefinitions
    . Increase version number to v1r3

  Added:

  - LHCbMath/IPower.hpp: 
    . Template metafunction for compile-time calculation of even, positive 
      powers of integer numbers.
      Example usage:

      // assign 2**35 to result.
        const int result = Gaudi::Math::IPower< int, 2,  35>::value;
  - LHCbMath/Power.hpp:
    .  Template metafunction to calculate integer powers of integer 
       and floating point numbers.
       Example useage:

       // calculate 50.**10
       const double result = Gaudi::Math::pow<double, 10> ( 50. ) ;

! 2006-10-26 - Juan PALACIOS
  - LHCbMath/Power.h
    . Add doxygen comment: pow only works for positive interer powers.

!========================== LHCbMath v1r2 2006-06-30 ==========================
! 2006-06-29 M. Needham
  - Bug fix in plane-line intersection parallelity test 

! 2006-06-06 - Juan PALACIOS  
  - Add LHCbMath/Power.h
    . Fast and efficient pow function for large integer powers
      by Ivan Belyaev. Imported from LoKi.

!========================== LHCbMath v1r1 2006-05-31 ==========================
! 2006-05-31 - Juan PALACIOS

  - Add LHCbMath/EigenSystem.h, .icpp and src/EigenSystem.cpp from 
    Vanya Belyaev. Make linker library LHCbMath

  - Import LHCbMath/MatrixManip.h from Kernel/LHCbDefinitions. Change namespace
    to Gaudi::Math for consistency.

  - Remove Kernel, move everything to new LHCbMath directory.

  - Kernel: Add MatrixManip.h from Vanya Belyaev. Various useful matrix 
            and vector utilities. Includes linking to 3D and 4D MathCore 
            vectors and points,  scaling on all elements of matrices
            and vectors, setting already existing matrix to unit matrix,
            comparison functions, max and minimum elements, various counting,
            checking and equal methods.

!========================== LHCbMath v1r0p1 2006-05-30 ========================

! 2006-05-30 - Juan Palacios
  - Kernel/GeomFun.h: Fix typo in line - plane intersection method declaration.

! 2006-05-24 - Juan Palacios
 - cmt/requirements: Delete removal of "-lSmatrix" in linkopts. This is needed
   to get Python dictionaries for SMatrix.

!========================== LHCbMath v1r0 2006-05-15 ==========================
! 2006-05-10 - Juan Palacios
 - Kernel/GeomFun : Add bool parallel(aLine, aLine) method.
 - Kernel/GeomFun.icpp : fix Gaudi::Math::distance for case when lines
                         are parallel.

! 2006-05-08 - Juan Palacios
 - First release of Kernel/LHCbMath

