<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>

<!-- **************************************************************************
  * $Id: RichSmartID.xml,v 1.34 2009-10-11 12:23:15 jonrob Exp $
  *****************************************************************************
  * XML-description of RichSmartID class                                      *
  * author: Chris Jones   Christopher.Rob.Jones@cern.ch                       *
  * date:   2004-06-23                                                        *
  ************************************************************************* -->

  <package name='LHCbKernel'>
     <class 
        name             = "RichSmartID"
        author           = "Chris Jones   Christopher.Rob.Jones@cern.ch" 
        desc             = "Identifier for RICH detector objects (RICH Detector, HPD panel, HPD or HPD pixel)"
        virtual          = "FALSE" >

        &StlVector;

        <import name = "Kernel/RichDetectorType"           />
        <import name = "Kernel/RichSide"                   />
        <import name = "vector" std="TRUE"                 />
        <!--import name = "Kernel/FastAllocVector"            /-->

        <template name = "VectorDict" t1="THIS"/>

        <typedef access="PUBLIC" def="KeyType"    desc="Type for internal key"  type="unsigned int"/>
        <typedef access="PUBLIC" def="Vector"     desc="Vector of RichSmartIDs" type="std::vector&lt; LHCb::RichSmartID &gt;"/>
        <!--typedef access="PUBLIC" def="Vector"     desc="Vector of RichSmartIDs" type="LHCb::FastAllocVector&lt; LHCb::RichSmartID &gt;"/-->

        <attribute 
            desc = "The bit-packed internal data word" 
            name = "key" 
            init = "0" 
            type = "bitfield">
            <bitfield desc="The pixel sub-row (Alice mode) number" length="3"  name="pixelSubRow"   setMeth="FALSE" />
            <bitfield desc="The pixel column number"               length="5"  name="pixelCol"      setMeth="FALSE" />
            <bitfield desc="The pixel row number"                  length="5"  name="pixelRow"      setMeth="FALSE" />
            <bitfield desc="The HPD number in column"              length="5"  name="HPDNumInCol"   setMeth="FALSE" />
            <bitfield desc="The HPD column number"                 length="5"  name="HPDCol"        setMeth="FALSE" />
            <bitfield desc="The RICH panel"                        length="1"  name="panel"         setMeth="FALSE" type="Rich::Side"         />
            <bitfield desc="The RICH Detector"                     length="1"  name="rich"          setMeth="FALSE" type="Rich::DetectorType" />
            <bitfield desc="Pixel sub-row field is set"            length="1"  name="pixelSubRowIsSet"   setMeth="FALSE" />
            <bitfield desc="Pixel column field is set"             length="1"  name="pixelColIsSet"      setMeth="FALSE" />
            <bitfield desc="Pixel row field is set"                length="1"  name="pixelRowIsSet"      setMeth="FALSE" />
            <bitfield desc="HPD number in column field is set"     length="1"  name="HPDNumInColIsSet"   setMeth="FALSE" />
            <bitfield desc="HPD column field is set"               length="1"  name="HPDColIsSet"        setMeth="FALSE" />
            <bitfield desc="RICH panel field is set"               length="1"  name="panelIsSet"         setMeth="FALSE" />
            <bitfield desc="RICH detector field is set"            length="1"  name="richIsSet"          setMeth="FALSE" />
        </attribute>

        <copyconstructor/> 

        <constructor 
            desc     = "Constructor from internal type"
            explicit = "TRUE"
            initList = "m_key( key )">
            <arg 
                name  = "key" 
                type  = "LHCb::RichSmartID::KeyType"
                const = "TRUE" 
                inout = "BYVALUE" 
             />
        </constructor>

        <constructor 
            desc     = "Pixel level constructor including sub-pixel information" 
            initList = "m_key( 0 )">
            <arg  const="TRUE"  name="rich"          type="Rich::DetectorType" inout = "BYVALUE" />
            <arg  const="TRUE"  name="panel"         type="Rich::Side" inout = "BYVALUE" />
            <arg  const="TRUE"  name="hpdNumInCol"   type="int"  />
            <arg  const="TRUE"  name="hpdCol"        type="int"  />
            <arg  const="TRUE"  name="pixelRow"      type="int"  />
            <arg  const="TRUE"  name="pixelCol"      type="int"  />
            <arg  const="TRUE"  name="pixelSubRow"   type="int"  />
            <code>
               setRich          ( rich          );
               setPanel         ( panel         );
               setHPDNumInCol   ( hpdNumInCol   );
               setHPDCol        ( hpdCol        );
               setPixelRow      ( pixelRow      );
               setPixelCol      ( pixelCol      );
               setPixelSubRow   ( pixelSubRow   );
            </code>
        </constructor>

        <constructor 
            desc     = "Pixel level constructor" 
            initList = "m_key( 0 )" >
            <arg  const="TRUE"  name="rich"          type="Rich::DetectorType" inout = "BYVALUE" />
            <arg  const="TRUE"  name="panel"         type="Rich::Side" inout = "BYVALUE" />
            <arg  const="TRUE"  name="hpdNumInCol"   type="int"  />
            <arg  const="TRUE"  name="hpdCol"        type="int"  />
            <arg  const="TRUE"  name="pixelRow"      type="int"  />
            <arg  const="TRUE"  name="pixelCol"      type="int"  />
            <code>
               setRich          ( rich          );
               setPanel         ( panel         );
               setHPDNumInCol   ( hpdNumInCol   );
               setHPDCol        ( hpdCol        );
               setPixelRow      ( pixelRow      );
               setPixelCol      ( pixelCol      );
            </code>
        </constructor>

        <constructor 
            desc     = "HPD level constructor" 
            initList = "m_key( 0 )" >
            <arg  const="TRUE"  name="rich"          type="Rich::DetectorType" inout = "BYVALUE" />
            <arg  const="TRUE"  name="panel"         type="Rich::Side" inout = "BYVALUE" />
            <arg  const="TRUE"  name="hpdNumInCol"   type="int"  />
            <arg  const="TRUE"  name="hpdCol"        type="int"  />
            <code>
               setRich          ( rich          );
               setPanel         ( panel         );
               setHPDNumInCol   ( hpdNumInCol   );
               setHPDCol        ( hpdCol        );
            </code>
        </constructor>

        <constructor 
            desc     = "HPD panel level constructor" 
            initList = "m_key( 0 )" >
            <arg  const="TRUE"  name="rich"          type="Rich::DetectorType" inout = "BYVALUE" />
            <arg  const="TRUE"  name="panel"         type="Rich::Side" inout = "BYVALUE" />
            <code>
               setRich          ( rich          );
               setPanel         ( panel         );
            </code>
        </constructor>

        <method 
            name   = "setData"
            access = "PRIVATE" 
            desc   = "Set the given data into the given field"  
            type   = "void" >
            <arg 
                const = "TRUE" 
                name  = "value"
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "shift"  
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "mask"
                type  = "long" />
            <arg 
                const = "TRUE" 
                name  = "okMask" 
                type  = "long" />
            <code>
              setKey( ((value &lt;&lt; shift) &amp; mask) | (m_key &amp; ~mask) | okMask );
            </code>
        </method>

        <method             
            name   = "checkRange" 
            access = "PRIVATE" 
            const  = "TRUE" 
            desc   = "Checks if a data value is within range for a given field" 
            type   = "void" >
            <arg 
                const = "TRUE" 
                name  = "value" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "shift" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                inout = "INOUT" 
                name  = "message" 
                type  = "std::string"  />
            <code>
              const bool ok = ( value &lt; (1&lt;&lt;shift) );
              if (!ok) rangeError( value, (1&lt;&lt;shift)-1, message );
            </code>
        </method>

        <method             
            name   = "rangeError" 
            access = "PRIVATE" 
            const  = "TRUE" 
            desc   = "Issue an exception in the case of a range error" 
            type   = "void" >
            <arg 
                const = "TRUE" 
                name  = "value" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "max" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                inout = "INOUT" 
                name  = "message" 
                type  = "std::string"  />
        </method>

        <method 
            name  = "operator LHCb::RichSmartID::KeyType" 
            const = "TRUE" 
            desc  = "implicit conversion to internal type" 
            type  = "" >
            <code>
              return m_key;
            </code>
        </method>

        <method
             desc    = "Comparison operator using internal representation"
             name    = "operator=="
             argList = "const LHCb::RichSmartID id"
             type    = "bool"
             const   = "TRUE"
             access  = "PUBLIC" >
             <code>
               return ( key() == id.key() );
             </code>
        </method>

        <method 
            name = "setRich" 
            desc = "Set the RICH detector identifier" 
            type = "void" >
            <arg 
                const = "TRUE" 
                name  = "rich" 
                inout = "BYVALUE"
                type  = "Rich::DetectorType"  />
            <code>
#ifdef RICHDEBUG
              checkRange(rich,pixelSubRowIsSetBits-richBits,"RICH");
#endif
              setData( rich, richBits, richMask, richIsSetMask );
            </code>
        </method>

        <method 
            name = "setPanel"
            desc = "Set the RICH HPD panel identifier"  
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "panel" 
                inout = "BYVALUE"
                type  = "Rich::Side"  />
            <code>
#ifdef RICHDEBUG
              checkRange(panel,richBits-panelBits,"Panel");
#endif
              setData( panel, panelBits, panelMask, panelIsSetMask );
            </code>
        </method>

        <method 
            name = "setHPDCol" 
            desc = "Set the RICH HPD column identifier" 
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "col" 
                type  = "int"  />
            <code>
#ifdef RICHDEBUG
               checkRange(col,panelBits-HPDColBits,"HPDColumn");
#endif
               setData( col, HPDColBits, HPDColMask, HPDColIsSetMask );
            </code>
        </method>

        <method 
            name = "setHPDNumInCol" 
            desc = "Set the RICH HPD number in column identifier" 
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "nInCol" 
                type  = "int"  />
            <code>
#ifdef RICHDEBUG
               checkRange(nInCol,HPDColBits-HPDNumInColBits,"HPDNumInCol");
#endif
               setData( nInCol, HPDNumInColBits, HPDNumInColMask, HPDNumInColIsSetMask );
            </code>
        </method>

        <method 
            name = "setPixelRow"
            desc = "Set the RICH HPD pixel row identifier"  
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "row" 
                type  = "int"  />
            <code>
#ifdef RICHDEBUG
               checkRange(row,HPDNumInColBits-pixelRowBits,"PixelRow");
#endif
               setData( row, pixelRowBits, pixelRowMask, pixelRowIsSetMask );
            </code>
        </method>

        <method 
            name = "setPixelCol"
            desc = "Set the RICH HPD pixel column identifier"  
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "col" 
                type  = "int"  />
            <code>
#ifdef RICHDEBUG
               checkRange(col,pixelRowBits-pixelColBits,"PixelColumn");
#endif
               setData( col, pixelColBits, pixelColMask, pixelColIsSetMask );
            </code>
        </method>

        <method 
            name = "setPixelSubRow"
            desc = "Set the RICH photon detector pixel sub-row identifier (Alice mode only)"  
            type = "void">
            <arg 
                const = "TRUE" 
                name  = "pixelSubRow" 
                type  = "int"  />
            <code>
#ifdef RICHDEBUG
               checkRange(pixelSubRow,pixelColBits-pixelSubRowBits,"PixelSubRow");
#endif
               setData( pixelSubRow, pixelSubRowBits, pixelSubRowMask, pixelSubRowIsSetMask );
            </code>
        </method>

        <method 
            name  = "richDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid RICH detector data"  
            type  = "bool">
            <code>
               return richIsSet();
            </code>
        </method>

        <method 
            name  = "hpdDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid HPD data"  
            type  = "bool">
            <code>
               return ( hpdNumInColIsSet() &amp;&amp; hpdColIsSet() &amp;&amp; panelIsSet() &amp;&amp; richIsSet() );
            </code>
        </method>

        <method 
            name  = "pixelDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid pixel data"  
            type  = "bool">
            <code>
               return ( pixelColIsSet() &amp;&amp; pixelRowIsSet() &amp;&amp; hpdDataAreValid() );
            </code>
        </method>

        <method 
            name  = "pixelSubRowDataIsValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid pixel sub-row (Alice mode) data"  
            type  = "bool">
            <code>
               return ( pixelSubRowIsSet() &amp;&amp; pixelDataAreValid() );
            </code>
        </method>

        <method 
            name  = "isValid"
            const = "TRUE" 
            desc  = "Returns true if at least one data field has been set"  
            type  = "bool">
            <code>
               return ( richIsSet() || panelIsSet() || hpdNumInColIsSet() || hpdColIsSet() ||
                        pixelRowIsSet() || pixelColIsSet() || pixelSubRowIsSet() );
            </code>
        </method>

        <method 
            name  = "pixelID"
            const = "TRUE" 
            desc  = "Decoding function to strip the sub-pixel information and return a pixel RichSmartID" 
            type  = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; ~(pixelSubRowMask+pixelSubRowIsSetMask) );
            </code>
        </method>

        <method 
            name  = "pixelRowID"
            const = "TRUE" 
            desc  = "Decoding function to return an identifier for a single HPD pixel row, stripping pixel column and sub-pixel information"  
            type = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; ~(pixelSubRowMask+pixelSubRowIsSetMask+pixelColMask+pixelColIsSetMask) );
            </code>
        </method>

        <method 
            name  = "pixelColID"
            const = "TRUE" 
            desc  = "Decoding function to return an identifier for a single HPD pixel column, stripping pixel row and sub-pixel information"  
            type = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; ~(pixelSubRowMask+pixelSubRowIsSetMask+pixelRowMask+pixelRowIsSetMask) );
            </code>
        </method>

        <method 
            name  = "hpdID"
            const = "TRUE" 
            desc  = "Decoding function to return an identifier for a single HPD, stripping all pixel level information"  
            type = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; (richMask+panelMask+HPDNumInColMask+HPDColMask+
                                         richIsSetMask+panelIsSetMask+HPDNumInColIsSetMask+HPDColIsSetMask) );
            </code>
        </method>

        <method 
            name  = "hpdColID"
            const = "TRUE" 
            desc  = "Decoding function to return an identifier for a single HPD column"  
            type = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; (richMask+panelMask+HPDColMask+
                                         richIsSetMask+panelIsSetMask+HPDColIsSetMask) );
            </code>
        </method>

        <method 
            name  = "panelID"
            const = "TRUE" 
            desc  = "Decoding function to strip the photon-detector information and return a HPD panel RichSmartID"  
            type  = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; (richMask+panelMask+richIsSetMask+panelIsSetMask) );
            </code>
        </method>

        <method 
            name  = "richID"
            const = "TRUE" 
            desc  = "Decoding function to strip all but the RICH information and return a RICH RichSmartID"  
            type  = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; (richMask+richIsSetMask) );
            </code>
        </method>

        <method 
            name  = "dataBitsOnly"
            const = "TRUE" 
            desc  = "Returns only the data fields, with the validity bits stripped"  
            type  = "LHCb::RichSmartID">
            <code>
               return LHCb::RichSmartID( m_key &amp; (richMask+panelMask+HPDNumInColMask+HPDColMask+pixelRowMask+pixelColMask+pixelSubRowMask) );
            </code>
        </method>

        <method 
          name    = "fillStream" 
          desc    = "Print this RichSmartID in a human readable way"
          type    = "std::ostream&amp;" 
          virtual = "FALSE" 
          const   = "TRUE">
          <arg 
            type = "std::ostream" 
            name = "s"/>
        </method>

    </class>
  </package>
</gdd>
