<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>

<!-- **************************************************************************
  * $Id: CaloCellID.xml,v 1.11 2009-03-05 15:47:13 odescham Exp $
  *****************************************************************************
  * XML-description of CaloCellIDclass                                        *
  * author: Vanya BELYAEV Ivan.Belyaev@itep.ru                                *
  * date:   2003-11-24                                                        *
  ************************************************************************* -->

  <package name='LHCbKernel'>  
  <class
    name   = "CaloCellID"
    desc   = "Simple class to represent cell identifier for calorimeter devices"
    author = "Vanya BELYAEV Ivan.Belyaev@itep.ru"
    virtual= "FALSE"                                                           >
  &StlVector;
  <desc> *
    *
    *  The class represents the unique cell identifier for all calorimeter devices
    *
    * </desc>
  
  <import name = "GaudiKernel/Kernel"       />
  <import name = "Kernel/CaloCellCode"      />
    
  <typedef
    def    = "ContentType"
    type   = "CaloCellCode::ContentType"
    desc   = "Representation type (presumably 32bits)"
    access = "PUBLIC" />
  
   <attribute
    name      = "all"
    desc      = "all significant bits representation of CellID (32bits)"
    dictalias = "unsigned int"
    type      = "ContentType" />
  
  <constructor
    desc     = "Default/empty constructor"
    initList = "m_all( 0 )" > 
    <code/> 
  </constructor>
  

  <constructor
    desc     = "Explicit constructor from Calo, Area, Row and Column"
    argList  = "unsigned int Calo, unsigned int Area, unsigned int Row, unsigned int Column "
    initList = "m_all( 0 )"> 
    <code>
      setCalo ( Calo   ) ;
      setArea ( Area   ) ;
      setRow  ( Row    ) ;
      setCol  ( Column ) ;
    </code> 
  </constructor>
  
  <constructor
    desc     = "Explicit constructor from 32 bit representation"
    argList  = "ContentType all"
    initList = "m_all( 0 )"
    explicit = "TRUE">
    <code>
      m_all = all ;
    </code> 
  </constructor>
  
  <copyconstructor/> 

  <method
    desc   = "Decoding function to extract index"
    name   = "index"
    type   = "unsigned int"
    const  = "TRUE"
    access = "PUBLIC" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskIndex ) &gt;&gt; CaloCellCode::ShiftIndex ; 
    </code>
  </method>
  
  <method
    desc   = "Decoding function to extract calorimeter identifier"
    name   = "calo"
    type   = "unsigned int"
    const  = "TRUE"
    access = "PUBLIC" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskCalo ) &gt;&gt; CaloCellCode::ShiftCalo ; 
    </code>
  </method>

  <method
    desc   = "Decoding function to extract calorimeter area identifier"
    name   = "area"
    type   = "unsigned int"
    const  = "TRUE"
    access = "PUBLIC" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskArea ) &gt;&gt; CaloCellCode::ShiftArea ; 
    </code>
  </method>
  
  
  <method
    desc   = "Decoding function to extract calorimeter row identifier"
    name   = "row"
    type   = "unsigned int"
    const  = "TRUE"
    access = "PUBLIC" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskRow  ) &gt;&gt; CaloCellCode::ShiftRow  ; 
    </code>
  </method>
  
  <method
    desc   = "Decoding function to extract calorimeter column identifier"
    name   = "col"
    type   = "unsigned int"
    const  = "TRUE"
    access = "PUBLIC" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskCol  ) &gt;&gt; CaloCellCode::ShiftCol  ; 
    </code>
  </method>
  
  
  <method
    desc    = "Comparison operator using 'index()' representation"
    name    = "operator&lt;"
    argList = "const CaloCellID ID"
    type    = "bool"
    const   = "TRUE"
    access  = "PUBLIC" >
    <code>
      return index() &lt; ID.index() ;
    </code>
  </method>
  
  <method
    desc    = "Equality operator using 'contents()' representation"
    name    = "operator=="
    argList = "const CaloCellID ID"
    type    = "bool"
    const   = "TRUE"
    access  = "PUBLIC" >
    <code>
      return contents() == ID.contents() ;
    </code>
  </method>

  <method
    name      = "fillStream"
    desc      = "printOut to standard STD/STL output streams"
    type      = "std::ostream&amp;"
    virtual   = "FALSE"
    const     = "TRUE" >
    <arg name = "os" type = "std::ostream" inout = "BOTH" />
    <code>
      os &lt;&lt; "[" ;
      /// corrupted ?!
      if( 0 != rest() ) { os &lt;&lt; "?" &lt;&lt; std::setw(4) &lt;&lt; rest() &lt;&lt; "?," ; }  
      return 
      os 
      &lt;&lt; CaloCellCode::CaloNameFromNum( calo() )   &lt;&lt; "," 
      &lt;&lt; std::setw(1) &lt;&lt; CaloCellCode::CaloAreaFromNum( calo() , area () )   &lt;&lt; "," 
      &lt;&lt; std::setw(2) &lt;&lt; row  () &lt;&lt; "," 
      &lt;&lt; std::setw(2) &lt;&lt; col  () &lt;&lt; "]" ;  
    </code>
  </method>
  
  <method
    desc    = "bit pattern as string"
    name    = "bits"
    type    = "std::string"
    const   = "TRUE"
    access  = "PUBLIC" >
    <arg name = "del" type = "char" inout = "INPUT" />
    <code>
      std::string  str("[");
      const ContentType  one = 1;
      for( int n  = ( 0 == rest() )? CaloCellCode::BitsAll - 1 : 
      CaloCellCode::BitsTotal - 1 ; n &gt;= 0 ; --n  )
      {
      unsigned int pos = n;
      bool isNull =   ( 0 == ( ( one &lt;&lt; pos ) &amp; contents() ) );     
      str+= isNull ? '0' : '1';
      if      ( 0                       == pos )   break      ;
      if      ( 0                       == del )   continue   ;
      if      ( CaloCellCode::ShiftRest == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftCalo == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftArea == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftRow  == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftCol  == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftAll  == pos ) { str += del ; }
      }
      return str += "]";
    </code>
  </method>
  
  <method
    desc    = "bit pattern as string"
    name    = "bits"
    type    = "std::string"
    const   = "TRUE"
    access  = "PUBLIC" >
    <code>
      return bits(',');
    </code>
  </method>
  
    
  <method
    desc      = "Update Calorimeter identifier"
    name      = "setCalo"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PUBLIC" >
    <arg name = "Calo" type = "unsigned int" inout = "INPUT" />
    <code>
      return set( Calo  , CaloCellCode::ShiftCalo , CaloCellCode::MaskCalo ) ;
    </code>
  </method>
  <method
    desc      = "Update Calorimeter identifier"
    name      = "setCalo"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PUBLIC" >
    <arg name = "CaloName" type = "std::string" inout = "INPUT" />
    <code>
      return setCalo( CaloCellCode::CaloNumFromName( CaloName ) ) ;
    </code>
  </method>

  <method
    desc      = "Update Calorimeter Area identifier"
    name      = "setArea"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PRIVATE" >
    <arg name = "Area" type = "unsigned int" inout = "INPUT" />
    <code>
      return set( Area  , CaloCellCode::ShiftArea , CaloCellCode::MaskArea ) ;
    </code>
  </method>

  <method
    desc      = "Update Calorimeter Row identifier"
    name      = "setRow"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PRIVATE" >
    <arg name = "Row" type = "unsigned int" inout = "INPUT" />
    <code> 
      return set( Row  , CaloCellCode::ShiftRow , CaloCellCode::MaskRow ) ;
    </code>
  </method>

  <method
    desc      = "Update Calorimeter Column identifier"
    name      = "setCol"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PRIVATE" >
    <arg name = "Col" type = "unsigned int" inout = "INPUT" />
    <code>
      return set( Col  , CaloCellCode::ShiftCol , CaloCellCode::MaskCol ) ;
    </code>
  </method>


  <method
    desc      = "Update Index field"
    name      = "setIndex"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PRIVATE" >
    <arg name = "Index" type = "unsigned int" inout = "INPUT" />
    <code>
      return set( Index  , CaloCellCode::ShiftIndex , CaloCellCode::MaskIndex ) ;
    </code>
  </method>
  
  <method
    desc      = "set the active field"
    name      = "set"
    type      = "LHCb::CaloCellID&amp;"
    const     = "FALSE"
    access    = "PRIVATE" >
    <arg name = "Value" type = "ContentType"  inout = "INPUT" />
    <arg name = "Shift" type = "unsigned int" inout = "INPUT" />
    <arg name = "Mask"  type = "unsigned int" inout = "INPUT" />
    <code>
      ContentType tmp1 , tmp2 ;
      tmp1   = ( Value &lt;&lt; Shift ) &amp;  Mask ; 
      tmp2   =  contents()              &amp; ~Mask ; 
      m_all = ( tmp1 | tmp2 ) ;
      return *this;
    </code>
  </method>
  
  <method
    desc   = "Extract 'the rest' - must be 0!"
    name   = "rest"
    type   = "ContentType"
    const  = "TRUE"
    access = "PRIVATE" >
    <code>
      return ( contents() &amp; CaloCellCode::MaskRest  ) &gt;&gt; CaloCellCode::ShiftRest  ; 
    </code>
  </method>
  
  <method
    desc   = "Extract the full content"
    name   = "contents"
    type   = "ContentType"
    const  = "TRUE"
    access = "PRIVATE" >
    <code>
      return m_all ; 
    </code>
  </method>
  
  
  </class>
  </package>
</gdd>
