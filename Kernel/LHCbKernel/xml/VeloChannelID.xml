<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">

<gdd>
  <package name='LHCbKernel'>
    <class name = 'VeloChannelID' 
      author    = 'Chris Parkes, modified by David Hutchcroft' 
      desc      = 'This class describes a single channel of LHCb VELO'
      virtual   = "FALSE"                                             >

      <desc> Fully qualified constructor: sets strip and sensor numbers and
        sensor type</desc>
      <constructor 
        argList='unsigned int sensor, unsigned int strip,
        VeloChannelID::sensorType type' 
        desc='constructor with sensor, strip, and sensor type'>
        <code>
m_channelID = ( sensor &lt;&lt; sensorBits ) | ( type &lt;&lt; typeBits ) | strip;
       </code>
      </constructor>
      <constructor 
        argList='unsigned int sensor, unsigned int strip' 
        initList = 'm_channelID(0)'
        desc='constructor with sensor and strip number only (for backwards compatibility)'>
        <code>
          setSensor(sensor);
          setStrip(strip);
          if(64 &gt; sensor) setType(VeloChannelID::RType);
          else if(128 &gt; sensor) setType(VeloChannelID::PhiType);
          else setType(VeloChannelID::PileUpType);
       </code>
      </constructor>
      <constructor argList='int id' initList = 'm_channelID(id)' 
        desc='constructor with channelID'>
        <code></code>
      </constructor>

      <copyconstructor/>
      
      <method name='setType' argList='VeloChannelID::sensorType type'
        desc='Set sensor type bits'>
        <code>
          m_channelID &amp;=  ~typeMask;
          m_channelID |= ((unsigned long)(type) &lt;&lt; typeBits)  &amp; typeMask;
        </code>
      </method>

     <method type='LHCb::VeloChannelID::sensorType' name='type' 
       desc="Get sensor type" const='TRUE'> 
        <code>
          return sensorType((m_channelID &amp; typeMask) &gt;&gt; typeBits);
        </code>
      </method> 

      <method type='bool' name='isPileUp' const='TRUE'
        desc="Is the channel in a pile up sensor">
        <code> return (VeloChannelID::PileUpType == type());</code>
      </method>

      <method type='bool' name='isRType' const='TRUE'
        desc="Is the channel in an R type sensor">
        <code> return (VeloChannelID::RType == type());</code>
      </method>

      <method type='bool' name='isPhiType' const='TRUE'
        desc="Is the channel in a phi type sensor">
        <code> return (VeloChannelID::PhiType == type());</code>
      </method>

      <method type='' name='operator long' const='TRUE'  desc='cast'>
        <code>return m_channelID;</code>
      </method> 
      
      <method type="std::ostream&amp;" name="fillStream" 
        virtual="FALSE" const="TRUE"
        desc="special serializer to ASCII stream" >
        <arg name = "s" type = "std::ostream" inout = "BOTH" /> 
      </method> 

      <enum access='PUBLIC'
        desc='Enumberates the 3 sensor types'
        name='sensorType'
        value=' Null = 0, RType = 1, PhiType = 2, PileUpType = 3 ' />
      
      <attribute type='bitfield' name='channelID' desc='VELO Channel ID'>
        <bitfield name='strip' length='11' desc='Strip number'/>
        <bitfield name='sensor' length='8' desc='Sensor number'/>
        <bitfield name='type' length='2' desc='Sensor type' setMeth="FALSE" getMeth="FALSE"/>
      </attribute>

    </class>
  </package>
</gdd>
