<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">

<gdd>
  <package name = "LHCbKernel">
    <class name = "FTChannelID"
	   author   = "FT software team"
	   desc     = "Channel ID for the Fibre Tracker (LHCb Upgrade)"
	   virtual  = "FALSE" >

	   &StlVector;

      <constructor argList = "unsigned int station, unsigned int layer, unsigned int quarter, 
                              unsigned int module, unsigned int mat, unsigned int sipm,
                              unsigned int channel" 
                   desc    = "Explicit constructor from the geometrical location">
        <code>    
          m_channelID = (station  &lt;&lt;  stationBits  ) + 
                        (layer    &lt;&lt;  layerBits) + 
                        (quarter  &lt;&lt;  quarterBits) + 
                        (module   &lt;&lt;  moduleBits ) + 
                        (mat      &lt;&lt;  matBits ) + 
                        (sipm     &lt;&lt;  sipmBits ) + 
                        (channel  &lt;&lt;  channelBits  );
        </code>
      </constructor>

      <constructor argList = "unsigned int station, unsigned int layer, unsigned int quarter, 
                              unsigned int module, unsigned int channelInModule" 
                   desc    = "Explicit constructor from the geometrical location">
        <code>    
          m_channelID = (station  &lt;&lt;  stationBits  ) + 
                        (layer    &lt;&lt;  layerBits) + 
                        (quarter  &lt;&lt;  quarterBits) + 
                        (module   &lt;&lt;  moduleBits ) + 
                        (channelInModule  &lt;&lt;  channelBits );
        </code>
      </constructor>

      <constructor argList  = "unsigned int id" 
                   initList = "m_channelID(id)"
                   desc     = "Constructor from int">
        <code></code>
      </constructor>

      <method type  = "" 
              name  = "operator unsigned int" 
              const = "TRUE" 
              desc  = "Operator overload, to cast channel ID to unsigned int. 
                       Used by linkers where the key (channel id) is an int"> 
        <code> return m_channelID; </code>
      </method>

      <method type    = "bool" 
              name    = "operator=="
              argList = "const FTChannelID aChannel" 
              const   = "TRUE" 
              desc    = "Comparison equality">
        <code> return (this->channelID() == aChannel.channelID()); </code>
      </method>
      
      <method type    = "bool" 
              name    = "operator&lt;" 
              argList = "const FTChannelID aChannel" 
              const   = "TRUE" 
              desc    = "Comparison &lt;"> 
        <code> return (this->channelID() &lt; aChannel.channelID()); </code>
      </method>
      
      <method type    = "bool" 
              name    = "operator&gt;" 
              argList = "const FTChannelID aChannel" 
              const   = "TRUE" 
              desc    = "Comparison &gt;"> 
        <code> return (this->channelID() &gt; aChannel.channelID()); </code>
      </method>

      <method type    = "void" 
              name    = "next"
              argList = "" 
              const   = "FALSE" 
              desc    = "Increment the channelID ">
        <code> ++m_channelID; </code>
      </method>

      <method type    = "void" 
              name    = "addToChannel"
              argList = "const int offset" 
              const   = "FALSE" 
              desc    = "Increment the channelID ">
        <code> m_channelID+=offset; </code>
      </method>

      <method type    = "unsigned int" 
              name    = "sipmInModule"
              argList = "" 
              const   = "TRUE" 
              desc    = "Return the SiPM number within the module (0-15)">
        <code> return (m_channelID &amp; (matMask + sipmMask)) &gt;&gt; sipmBits; </code>
      </method>

      <method type    = "bool" 
              name    = "isX"
              argList = "" 
              const   = "TRUE" 
              desc    = "Return true if channelID is in x-layer">
        <code> return (layer() == 0 || layer() == 3); </code>
      </method>

      <method type    = "bool" 
              name    = "isBottom"
              argList = "" 
              const   = "TRUE" 
              desc    = "Return true if channelID is in bottom part of detector">
        <code> return (quarter() == 0 || quarter() == 1); </code>
      </method>

      <method type    = "bool" 
              name    = "isTop"
              argList = "" 
              const   = "TRUE" 
              desc    = "Return true if channelID is in top part of detector">
        <code> return (quarter() == 2 || quarter() == 3); </code>
      </method>

     <attribute  type = "bitfield" 
                  name = "channelID" 
                  desc = "FT Channel ID">
        <bitfield name    = "channel" 
                  length  = "7" 
                  desc    = "Channel in the 128 channel SiPM"
                  setMeth = "FALSE"/>

        <bitfield name    = "sipm" 
                  length  = "2" 
                  desc    = "ID of the SiPM in the mat" 
                  setMeth = "FALSE"/>
        
        <bitfield name    = "mat" 
                  length  = "2" 
                  desc    = "ID of the mat in the module" 
                  setMeth = "FALSE"/>

        <bitfield name    = "module" 
                  length  = "3" 
                  desc    = "Module id (0 - 5 or 0 - 6)" 
                  setMeth = "FALSE"/>
        
        <bitfield name    = "quarter" 
                  length  = "2" 
                  desc    = "Quarter ID (0 - 3)" 
                  setMeth = "FALSE"/>
        
        <bitfield name    = "layer" 
                  length  = "2" 
                  desc    = "Layer id" 
                  setMeth = "FALSE"/>

        <bitfield name    = "station" 
                  length  = "2" 
                  desc    = "Station id" 
                  setMeth = "FALSE"/>
                  
        <bitfield name    = 'uniqueLayer'
                  length  = 'layer, station' 
                  desc    = 'unique layer'
                  setMeth = 'FALSE'/>

        <bitfield name    = 'uniqueQuarter'
                  length  = 'quarter, layer, station' 
                  desc    = 'unique quarter'
                  setMeth = 'FALSE'/>

        <bitfield name    = 'uniqueModule'
                  length  = 'module, quarter, layer, station' 
                  desc    = 'unique module'
                  setMeth = 'FALSE'/>

        <bitfield name    = 'uniqueMat'
                  length  = 'mat, module, quarter, layer, station' 
                  desc    = 'unique mat'
                  setMeth = 'FALSE'/>

        <bitfield name    = 'uniqueSiPM'
                  length  = 'sipm, mat, module, quarter, layer, station' 
                  desc    = 'unique SiPM'
                  setMeth = 'FALSE'/>
                  
      </attribute>

      <method 
          name    = "fillStream" 
          desc    = "Print this FTChannelID in a human readable way"
          type    = "std::ostream&amp;" 
          virtual = "FALSE" 
          const   = "TRUE">
          <arg 
            type = "std::ostream" 
            name = "s"/>
        <code>
return s 
&lt;&lt; "{ FTChannelID : "
&lt;&lt; " channel =" &lt;&lt; channel()
&lt;&lt; " sipm ="    &lt;&lt; sipm()
&lt;&lt; " mat ="     &lt;&lt; mat()
&lt;&lt; " module="   &lt;&lt; module()
&lt;&lt; " quarter="  &lt;&lt; quarter()
&lt;&lt; " layer="    &lt;&lt; layer()
&lt;&lt; " station="  &lt;&lt; station()
&lt;&lt; " }";
        </code>
      </method>

    </class>

  </package>

</gdd>
