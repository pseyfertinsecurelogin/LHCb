<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">

<gdd>
  <package name='LHCbKernel'>
    <class name = 'VeloPixChannelID' 
      author    = 'Victor Coco' 
      desc      = 'This class describes a single channel of LHCb VELO PIX subdetector'
      virtual   = "FALSE"                                             >

      <desc> Fully qualified constructor: sets pixel and sensor numbers and
        pixel type</desc>
      <constructor 
        argList='unsigned int station,  
        VeloPixChannelID::sensorType type, 
        VeloPixChannelID::sensorSide sidepos, 
        VeloPixChannelID::ladderZPos zpos,
        unsigned int chip, 
        unsigned int pixel_lp, 
        unsigned int pixel_hp' 
        desc='constructor with station, sensor side (L/R), sensor type (X,Y or inexistant (bitfield=0)),  ladder z position (F/B or inexistant (bitfield=0)), chip number, lp position and hp position of the pixel'>
        <code>
m_channelID = ( station &lt;&lt; stationBits ) | ( type &lt;&lt; typeBits )  | ( sidepos &lt;&lt; sideposBits ) | ( zpos &lt;&lt; zposBits ) | ( chip &lt;&lt; chipBits ) | ( pixel_lp &lt;&lt; pixel_lpBits )| pixel_hp;
       </code>
      </constructor>

      <constructor
        argList='unsigned long sensor, unsigned long pixel'
        desc='Constructor with sensor (station-side-type) and pixel (zpos-chip-pixel_lp-pixel_hp)'>
        <code>
        m_channelID = (sensor &lt;&lt; typeBits) | pixel;   
       </code>
      </constructor>

      <constructor
        argList='unsigned long sensor,unsigned int chip, unsigned int pixel_lp,  unsigned int pixel_hp' 
        desc='Constructor with sensor (station-side-type), chip (chip) and lp position and hp position of the pixel'>
        <code>
        m_channelID = (sensor &lt;&lt; typeBits) |  ( chip &lt;&lt; chipBits ) | ( pixel_lp &lt;&lt; pixel_lpBits )| pixel_hp ;   
       </code>
      </constructor>

      <constructor argList='int id' initList = 'm_channelID(id)'
        desc='constructor with channelID'>
        <code></code>
      </constructor>

      <copyconstructor/>

      <method name='setType' argList='VeloPixChannelID::sensorType type'
        desc='Set sensor type bits'>
        <code>
          m_channelID &amp;=  ~typeMask;
          m_channelID |= ((unsigned long)(type) &lt;&lt; typeBits)  &amp; typeMask;
        </code>
      </method>

     <method type='LHCb::VeloPixChannelID::sensorType' name='type' 
       desc="Get sensor type" const='TRUE'> 
        <code>
          return sensorType((m_channelID &amp; typeMask) &gt;&gt; typeBits);
        </code>
      </method>

      <method type='bool' name='isXType' const='TRUE'
        desc="Is the channel in an X type sensor">
        <code> return (VeloPixChannelID::XType == type());</code>
      </method>

      <method type='bool' name='isYType' const='TRUE'
        desc="Is the channel in a Y type sensor">
        <code> return (VeloPixChannelID::YType == type());</code>
      </method>

     <method name='setSide' argList='VeloPixChannelID::sensorSide sidepos'
        desc='Set sensor side bits'>
        <code>
          m_channelID &amp;=  ~sideposMask;
          m_channelID |= ((unsigned long)(sidepos) &lt;&lt; sideposBits)  &amp; sideposMask;
        </code>
      </method>

     <method type='LHCb::VeloPixChannelID::sensorSide' name='sidepos' 
       desc="Get sensor side" const='TRUE'> 
        <code>
          return sensorSide((m_channelID &amp; sideposMask) &gt;&gt; sideposBits);
        </code>
      </method>

      <method type='bool' name='isLeft' const='TRUE'
        desc="Is the channel in an Left side sensor">
        <code> return (VeloPixChannelID::Left == sidepos());</code>
      </method>

      <method type='bool' name='isRight' const='TRUE'
        desc="Is the channel in a Right side sensor">
        <code> return (VeloPixChannelID::Right == sidepos());</code>
      </method>

     <method name='setLadderZPosition' argList='VeloPixChannelID::ladderZPos zpos'
        desc='Set ladder Z position bits'>
        <code>
          m_channelID &amp;=  ~zposMask;
          m_channelID |= ((unsigned long)(zpos) &lt;&lt; zposBits)  &amp; zposMask;
        </code>
      </method>

     <method type='LHCb::VeloPixChannelID::ladderZPos' name='zpos' 
       desc="Get ladder Z position " const='TRUE'> 
        <code>
          return ladderZPos((m_channelID &amp; zposMask) &gt;&gt; zposBits);
        </code>
      </method>

      <method type='bool' name='isFront' const='TRUE'
        desc="Is the channel in an front ladder">
        <code> return (VeloPixChannelID::Front == zpos());</code>
      </method>

      <method type='bool' name='isBack' const='TRUE'
        desc="Is the channel in a back ladder">
        <code> return (VeloPixChannelID::Back == zpos());</code>
      </method>

      <method type='' name='operator long' const='TRUE'  desc='cast'>
        <code>return m_channelID;</code>
      </method> 


      <method type='unsigned long' name='sensor' const='TRUE' desc='Get sensor number'>
        <code> return (m_channelID &amp; (stationMask | typeMask | sideposMask)) >> typeBits; </code>
      </method>

      <method name='setSensor' argList='unsigned long sensor'
        desc='Set sensor number'>
        <code>
          m_channelID &amp;=  ~(stationMask | typeMask | sideposMask);
          m_channelID |= ((unsigned long)(sensor) &lt;&lt; typeBits) &amp; (stationMask | typeMask | sideposMask);
        </code>
      </method>

      <method type='unsigned long' name='pixel' const='TRUE' desc='Get pixel'>
        <code> return (m_channelID &amp; (zposMask | chipMask | pixel_lpMask | pixel_hpMask)); </code>
      </method>

      <method name='setPixel' argList='unsigned long pixel'
        desc='Set pixel'>
        <code>
          m_channelID &amp;=  ~(zposMask | chipMask | pixel_lpMask | pixel_hpMask);
          m_channelID |= ((unsigned long)(pixel))  &amp; (zposMask | chipMask | pixel_lpMask | pixel_hpMask);
        </code>
      </method>


      <method type="std::ostream&amp;" name="fillStream" 
        virtual="FALSE" const="TRUE"
        desc="special serializer to ASCII stream" >
        <arg name = "s" type = "std::ostream" inout = "BOTH" /> 
      </method> 

      <enum access='PUBLIC'
        desc='Enumerates the 2 sensor types'
        name='sensorType'
        value=' XType = 0, YType = 1' />

      <enum access='PUBLIC'
        desc='Enumerates the 2 sensor sides'
        name='sensorSide'
        value=' Left = 0, Right = 1' />

      <enum access='PUBLIC'
        desc='Enumerates the 2 sensor zpos'
        name='ladderZPos'
        value=' Front = 0, Back = 1' />
      
      <attribute type='bitfield' name='channelID' desc='VELO Pixel Channel ID'>
        <bitfield name='pixel_hp' length='8' desc='Pixel high precision dimension position'/>
        <bitfield name='pixel_lp' length='8' desc='Pixel low precision dimension position'/>
        <bitfield name='chip' length='6' desc='Chip number'/>
        <bitfield name='zpos' length='0' desc='Z position of the ladder (Front/Back)' setMeth="FALSE" getMeth="FALSE"/>
        <bitfield name='type' length='0' desc='Sensor type' setMeth="FALSE" getMeth="FALSE"/>
        <bitfield name='sidepos' length='1' desc='Side position of the sensor (Left/Right)' setMeth="FALSE" getMeth="FALSE"/>
        <bitfield name='station' length='5' desc='Station number'/>
      </attribute>

    </class>
  </package>
</gdd>
