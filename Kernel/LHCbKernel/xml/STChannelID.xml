<?xml version="1.0" encoding="UTF-8"?>
<!--
    (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration

    This software is distributed under the terms of the GNU General Public
    Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<!DOCTYPE gdd SYSTEM "gdd.dtd">

<gdd>
  <package name='LHCbKernel'>
    <class name    = 'STChannelID' 
           author  = 'M Needham, J. Wang'
           desc    = 'Channel ID for class for ST'
           virtual = 'FALSE'>
      &StlVector;

      <enum
          desc   = "types of sub-detector channel ID"
          name   = "detType"
          value  = "typeTT = 0, typeIT = 1"
          access = 'PUBLIC'
       />

      <constructor argList='const unsigned int iType, const unsigned int iStation, 
                            const unsigned int iLayer, const unsigned int iDetRegion, 
                            const unsigned int iSector, const unsigned int iStrip' 
                   desc='constructor with station, layer, detRegion, sector , strip,'>
        <code>
           m_channelID = (iType &lt;&lt; typeBits) +
                         (iStation &lt;&lt; stationBits) + 
                         (iLayer &lt;&lt; layerBits) + 
                         (iDetRegion &lt;&lt; detRegionBits) + 
                         (iSector &lt;&lt;  sectorBits) + 
                         (iStrip &lt;&lt; stripBits);
        </code>
      </constructor>

      <constructor argList='const STChannelID aChannelID' 
                   desc='copy constructor'>
        <code>  m_channelID = aChannelID.m_channelID;</code>
      </constructor>

      <constructor argList='int id'
                   initList = 'm_channelID(id)'
                   desc='constructor with int'
                   explicit = "TRUE" >
        <code></code>
      </constructor>

      <method type='' name='operator int' const='TRUE'  desc='cast'>
        <code>  return m_channelID;</code>
      </method>

      <method type='unsigned int' name='type' const='TRUE' desc='Retrieve type'>
        <code>  return (m_channelID &amp; typeMask) >> typeBits;</code>
      </method>

      <method type='bool' name='isTT' const='TRUE' desc='test whether TT or not'>
        <code>  return type() == LHCb::STChannelID::detType::typeTT;</code>
      </method>

      <method type='bool' name='isIT' const='TRUE' desc='test whether IT or not'>
        <code>  return type() == LHCb::STChannelID::detType::typeIT;</code>
      </method>

      <method type='unsigned int' name='sector' const='TRUE' desc='Retrieve sector'>
        <code>
          return (unsigned int)((m_channelID &amp; sectorMask) &gt;&gt; sectorBits);
        </code>
      </method>

      <method type='unsigned int' name='detRegion' const='TRUE' desc='Retrieve detRegion'>
        <code>
          return (unsigned int)((m_channelID &amp; detRegionMask) &gt;&gt; detRegionBits);
        </code>
      </method>

      <method type='unsigned int' name='layer' const='TRUE' desc='Retrieve layer'>
        <code>
          return (unsigned int)((m_channelID &amp; layerMask) &gt;&gt; layerBits);
        </code>
      </method>

      <method type='unsigned int' name='uniqueLayer' const='TRUE' desc='Retrieve unique layer'>
        <code>
          return (unsigned int)((m_channelID &amp; uniqueLayerMask) &gt;&gt; layerBits);
        </code>
      </method>

      <method type='unsigned int' name='uniqueDetRegion' const='TRUE' desc='Retrieve unique detRegion'>
        <code>
          return (unsigned int)((m_channelID &amp; uniqueDetRegionMask) &gt;&gt; detRegionBits);
        </code>
      </method>

      <attribute type='bitfield' name='channelID' desc='ST Channel ID'>
        <bitfield name='strip'     length='10'  desc='strip'    setMeth='FALSE' />
        <bitfield name='sector'    length='5'  desc='sector'    setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='detRegion' length='3'  desc='detRegion' setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='layer'     length='3'  desc='layer'     setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='station'   length='2'  desc='station'   setMeth='FALSE'/>
        <bitfield name='type' length='2' desc='type - TT/IT' setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='uniqueLayer'      length='layer, station' 
                  desc='unique layer'     setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='uniqueDetRegion'  length='detRegion, layer, station' 
                  desc='unique detRegion' setMeth='FALSE' getMeth='FALSE'/>
        <bitfield name='uniqueSector'     length='sector, detRegion, layer, station' 
                  desc='unique sector'    setMeth='FALSE'/>
      </attribute>

      <method 
          name    = "fillStream" 
          desc    = "Print this STChannelID in a human readable way"
          type    = "std::ostream&amp;" 
          virtual = "FALSE" 
          const   = "TRUE">
          <arg 
            type = "std::ostream" 
            name = "s"/>
      </method>

      <method 
        name = "toString"
        desc = "Print method for python NOT NEEDED + SLOW IN C++ use fillStream"
        type = "std::string"
        virtual = "FALSE"
        const = "TRUE"
       />

    </class>
  </package>
</gdd>
