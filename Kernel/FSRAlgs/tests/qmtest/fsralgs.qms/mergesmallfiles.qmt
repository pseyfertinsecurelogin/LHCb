<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: rlambert
# Purpose: Merge small files and check the FSRs which result from that
# Prerequisites: None
# Common failure modes, severities and cures:
#               . SEVERE: Segfault or raised exception, stderr, nonzero return code. In this test it si possible segfaults may indicate a massive VMEM usage from merging FSRs.
#               . MAJOR: additional FATAL/ERROR messages always a major problem. no ERROR messages should ever be printed when running this test.
#               . MAJOR: File size explosion, if merging and cleaning of the input file FSRs fails to happen, the file size can explode. This is a major problem.
#               . MAJOR: Memory usage explosion, if merging and cleaning of the input file FSRs fails to happen, the VMEM can explode in finalize. This is a major problem.
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set><text>../../options/merge-small-files-test.py</text></set></argument>
  <argument name="timeout"><integer>3600</integer></argument>
  <argument name="validator"><text>
myname="fsralgs.mergesmallfiles"
import re
retstr=""
########################################
#check the produced file, and the stdout
########################################
f=open('../refs/merge-small-files.ref')
refblock=f.read().strip().split('\n')
f.close()
result_lines=[line for line in stdout.strip().split('\n') if (("FSRCleaner" in line or "MergeFSR" in line) and "ToolSvc." not in line)]
missing_lines=[line for line in refblock if (line not in result_lines and "#properties =" not in line and "RootOnTES" not in line)]
extra_lines=[line for line in result_lines if (line not in refblock and "#properties =" not in line)]

#################################################################
#Check that the merger lines are the same in reference and result
#################################################################

if (len(missing_lines)+ len(extra_lines))!=0:
  causes.append('Stdout modifications (check reference files) ')
  retstr=retstr+"\nStdout modifications:"
  for line in missing_lines:
    retstr=retstr+"\n\t - "+line
  for line in extra_lines:
    retstr=retstr+"\n\t + "+line
  try:
    f2=open('../refs/merge-small-files.ref.new',"w")
  except IOError:
    causes.append('could not open reference file')
  if f2 is not None:
    f2.write('\n'.join(result_lines))
    f2.close()

#################################################################
#Check that the file size is as I expect
#################################################################
import os
size=-1
try:
  size=os.path.getsize("merged.dst")
  result['merged_dst_size'] = '%f MB' % (size/1024/1024)
except OSError:
  causes.append('Could not locate merged DST')
  retstr=retstr+'\n'+'Could not locate merged DST'
if (size/1024/1024)>3.0:
  causes.append('Merged DST size too large')
  retstr=retstr+'\n\n'+'Merged DST size too large '+str(size/1024/1024) + " MB. Note that anything over 3.0 MB represents a serious problem. Don't just ignore it!"

#################################################################
#Check that the VMEM usage is as I expect
#################################################################

memory=-1

sum=None
try:
  from XMLSummaryBase import summary
  sum=summary.Summary()
  sum.parse("summary.xml")
  for child in sum.children("usage")[0].children():
    if child.attrib()["useOf"]=="MemoryMaximum":
      memory=child.value()
      result['maximum_vmem'] = '%f GB' % (memory/1024/1024)
except ImportError:
  causes.append('XMLsummary python error')
  retstr=retstr+'\n'+"XMLSummary Summary class could not be imported"
except IOError:
  causes.append('XMLsummary missing')
  retstr=retstr+'\n'+"XMLSummary missing"
except IndexError:
  causes.append('XMLsummary Memory Maximum missing')
  retstr=retstr+'\n'+"XMLsummary Memory Maximum missing\n"+sum.xml()

if memory==-1:
  causes.append('XMLsummary Memory Maximum missing')
  retstr=retstr+'\n'+"XMLsummary Memory Maximum missing\n"+sum.xml()
if (memory/1024/1024)>1.2:
  causes.append('VMem usage too high')
  retstr=retstr+'\n\n'+'VMem usage too high, '+str(memory/1024/1024)+" GB. Note that anything over 1.2 GB represents a serious problem. Don't just ignore it!"

if len(retstr):
  result[myname]=result.Quote(retstr)

</text></argument>
</extension>
