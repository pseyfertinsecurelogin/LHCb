<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: rlambert
# Purpose: Merge small files and check the FSRs which result from that
# Prerequisites: None
# Common failure modes, severities and cures:
#               . SEVERE: Segfault or raised exception, stderr, nonzero return code. In this test it si possible segfaults may indicate a massive VMEM usage from merging FSRs.
#               . MAJOR: additional FATAL/ERROR messages always a major problem. no ERROR messages should ever be printed when running this test.
#               . MAJOR: File size explosion, if merging and cleaning of the input file FSRs fails to happen, the file size can explode. This is a major problem.
#               . MAJOR: Memory usage explosion, if merging and cleaning of the input file FSRs fails to happen, the VMEM can explode in finalize. This is a major problem.
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set><text>../../options/merge-small-files-test.py</text></set></argument>
  <argument name="timeout"><integer>3600</integer></argument>
  <argument name="reference"><text>../refs/merge-small-files.ref</text></argument>
  <argument name="validator"><text>
import re
myname = "fsralgs.mergesmallfiles"
retstr = ""
########################################
#check the produced file, and the stdout
########################################

#################################################################
#Check that the merger lines are the same in reference and result
#################################################################
from GaudiConf.QMTest.LHCbExclusions import preprocessor, LineSkipper
from GaudiTest import FilePreprocessor

class KeepLines(FilePreprocessor):
    def __init__(self, strings = [], regexps = []):
        import re
        self.strings = strings
        self.regexps = map(re.compile,regexps)

    def __processLine__(self, line):
        for s in self.strings:
            if line.find(s) >= 0: return line
        for r in self.regexps:
            if r.search(line): return line
        return None

validateWithReference(preproc = KeepLines(['FSRCleaner', 'MergeFSR']) + preprocessor + LineSkipper(['ToolSvc.']))

#################################################################
#Check that the file size is as I expect
#################################################################
import os
size = -1
try:
    size = os.path.getsize("merged.dst")
    result['merged_dst_size'] = '%f MB' % (size/1024/1024)
except OSError:
    causes.append('Could not locate merged DST')
    retstr += '\nCould not locate merged DST'
if (size/1024/1024) > 3.0:
    causes.append('Merged DST size too large')
    retstr += ('\n\nMerged DST size too large ' + str(size/1024/1024) +
               " MB. Note that anything over 3.0 MB represents a serious problem. Don't just ignore it!")

#################################################################
#Check that the VMEM usage is as I expect
#################################################################

memory = -1

sum = None
try:
    from XMLSummaryBase import summary
    sum = summary.Summary()
    sum.parse("summary.xml")
    for child in sum.children("usage")[0].children():
        if child.attrib()["useOf"] == "MemoryMaximum":
            memory = child.value()
            result['maximum_vmem'] = '%f GB' % (memory/1024/1024)
except ImportError:
    causes.append('XMLsummary python error')
    retstr += '\nXMLSummary Summary class could not be imported'
except IOError:
    causes.append('XMLsummary missing')
    retstr += '\nXMLSummary missing'
except IndexError:
    causes.append('XMLsummary Memory Maximum missing')
    retstr += '\nXMLsummary Memory Maximum missing\n' + sum.xml()

if memory == -1:
    causes.append('XMLsummary Memory Maximum missing')
    retstr += '\nXMLsummary Memory Maximum missing\n' + sum.xml()
if (memory/1024/1024) > 1.2:
    causes.append('VMem usage too high')
    retstr += ('\n\nVMem usage too high, ' + str(memory/1024/1024) +
               " GB. Note that anything over 1.2 GB represents a serious problem. Don't just ignore it!")

if retstr:
  result[myname] = result.Quote(retstr)

</text></argument>
</extension>
