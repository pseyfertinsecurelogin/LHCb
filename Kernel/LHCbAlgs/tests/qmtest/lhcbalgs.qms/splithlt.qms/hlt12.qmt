<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
<text>-v</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import DetCondTest__TestConditionAlg as TestAlg
from Configurables import LHCbAlgsTests__TestTimeDecoderOdin as TimeDecoder
from Configurables import ( EventClockSvc, RunChangeHandlerSvc, XmlCnvSvc )

EventClockSvc().addTool(TimeDecoder,"EventTimeDecoder")

detDataSvc = DetectorDataSvc( UsePersistency = True,
                              DetDbRootName = "dd",
                              DetDbLocation = "../data/splithlt/conddb/lhcbhlt12.xml",
                              DetStorageType = 7 )
xmlCnvSvc = XmlCnvSvc(AllowGenericConversion = True)
DetectorPersistencySvc( CnvServices = [ xmlCnvSvc ] )

rch = RunChangeHandlerSvc()
rch.Conditions = {"Condition": "../data/splithlt/hlt1/%04d/data.xml", "Condition2": "../data/splithlt/hlt2/%04d/data.xml"}


testAlg = TestAlg("TestCond")
testAlg.Conditions = [ "Condition", "Condition2" ]

app = ApplicationMgr()
app.TopAlg = [ TestAlg("TestCond") ]

ApplicationMgr().ExtSvc += [ detDataSvc, rch ]
app.EvtSel = "NONE"
app.EvtMax = 2

EventDataSvc(ForceLeaves = True)
#MessageSvc(OutputLevel = DEBUG)

</text></argument>
<argument name="validator"><text>
## 2nd check: find data
expected = [
    'TestCond             INFO Requested Conditions:',
    '--- Condition',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = run0001',
    '--- Condition2',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = run0001_2',
    'TestCond             INFO Requested Conditions:',
    '--- Condition',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = run0002',
    '--- Condition2',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = run0002_2',
    ]

regexp = r"^---|^Validity|^\(std::string\) data|.*Requested Conditions"
outputlines = [ l.rstrip() for l in stdout.splitlines() ]
#print outputlines

# grep
import re
exp = re.compile(regexp)
outputlines = [ l for l in outputlines if exp.match(l) ]

result["GaudiTest.output.expected"] = result.Quote("\n".join(expected))
result["GaudiTest.output.regexp"] = result.Quote(regexp)
if outputlines != expected:
    causes.append("output")
    result["GaudiTest.output.found"] = result.Quote("\n".join(outputlines))
</text></argument>
</extension>
