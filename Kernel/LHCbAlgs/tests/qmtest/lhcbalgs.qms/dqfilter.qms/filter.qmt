<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import (DDDBConf, CondDB, EventClockSvc, FakeEventTime,
                           DQFilter, EventCountAlg, GaudiSequencer)
from Configurables import DetCondTest__TestConditionAlg as TestCond
DDDBConf()

conddb = CondDB()
conddb.addAlternative(path = "/Conditions/DQ", dbFile = "../data/DQFLAGS.db")

ecs = EventClockSvc()
ecs.addTool(FakeEventTime, "EventTimeDecoder")
ecs.EventTimeDecoder.StartTime = 5e9 # seconds
ecs.EventTimeDecoder.TimeStep = 10e9

dqf = DQFilter(OutputLevel = VERBOSE)
dqf.UseBeginEvent = False
dqf.Filter.IgnoredFlags = ["OtherDET"]

testCond = TestCond("TestCond")
testCond.Conditions = [ "Conditions/DQ/Flags" ]

app = ApplicationMgr()
app.TopAlg = [ GaudiSequencer(Members = [EventCountAlg("Counter1", CounterName = "efficiency1"),
                                         dqf,
		                         #testCond,
		                         EventCountAlg("Counter2", CounterName = "efficiency2")]) ]
app.EvtSel = "NONE"
app.EvtMax = 5

#MessageSvc(OutputLevel = 1)
</text></argument>
<argument name="validator"><text>

expected = {
            "filtering on execute": 1,
            "Updating Data Quality flags": 5,
            "good event": 3,
            "bad event": 2,
            "Ignoring flag: OtherDet": 1,
            "Ignoring flag: MyDet": 0,
           }

exp_eff1 = (5,5)
exp_eff2 = (5,3)

########

import re, string
from pprint import pformat

def count(keys, lines):
    """Helper function to count how many times a substring is found in a list of strings.
    """
    result = dict(zip(keys, [0] * len(keys)))
    for l in lines:
        for k in keys:
            if k in l:
                result[k] += 1
                continue
    return result

## Check DQFilter messages
dqf = re.compile(r"^DQFilter")
lines = [ l.rstrip() for l in stdout.splitlines() if dqf.match(l) ]

counts = count(expected.keys(), lines)

result["GaudiTest.DQFilterOut.expected"] = result.Quote(pformat(expected))

failed = cmpTreesDicts(expected, counts)
if failed:
    causes.append("DQFilter output")
    result["GaudiTest.DQFilterOut.found"] = result.Quote(pformat(counts))
    msg = "%s: %s != %s" % getCmpFailingValues(expected, counts, failed)
    result["GaudiTest.DQFilterOut.failure_on"] = result.Quote(msg)

## Check computed efficiency
def checkEff(name, expected, stdout, result):
    from pprint import pformat
    eff = None
    name = name.strip('"')
    qname = '"%s"' % (name)
    for l in stdout.splitlines():
        if qname in l:
            eff = filter(None, map(string.strip, l.split("|")))
            eff = tuple(map(int, eff[1:3]))
            break

    result["GaudiTest.%s.expected" % name] = result.Quote(pformat(expected))

    if eff != expected:
        causes.append(name)
        result["GaudiTest.%s.found" % name] = result.Quote(pformat(eff))

checkEff("efficiency1", exp_eff1, stdout, result)
checkEff("efficiency2", exp_eff2, stdout, result)
</text></argument>
</extension>
