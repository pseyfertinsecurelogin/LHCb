<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set><text>-v</text></set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import (CondDB, EventClockSvc, FakeEventTime,
                           DQFilterSvc, EventCountAlg, GaudiSequencer,
                           DQAcceptTool, BasicDQFilter, CondDBDQScanner)
from Configurables import DetCondTest__TestConditionAlg as TestCond

conddb = CondDB()
conddb.addAlternative(path = "/Conditions/DQ", dbFile = "../data/DQFLAGS.db")
conddb.addAlternative(path = "/Conditions/Online/LHCb/RunParameters", dbFile = "../data/DQFLAGS.db")

ecs = EventClockSvc()
ecs.addTool(FakeEventTime, "EventTimeDecoder")
ecs.EventTimeDecoder.StartTime = 4e9 # seconds
ecs.EventTimeDecoder.TimeStep =  5e9

dqf = DQFilterSvc(OutputLevel = VERBOSE)
dqf.AcceptTool = DQAcceptTool(OutputLevel = VERBOSE) # public tool
dqf.AcceptTool.addTool(BasicDQFilter, "Filter")
#dqf.AcceptTool.Filter.IgnoredFlags = ["OtherDET"]
dqf.AcceptTool.addTool(CondDBDQScanner, "Scanner")
dqf.AcceptTool.Scanner.ConditionPath = "/Conditions/DQ/Flags.xml" # path in the DB
dqf.AcceptTool.Scanner.OutputLevel = VERBOSE

testCond = TestCond("TestCond")
testCond.Conditions = [ "Conditions/DQ/Flags" ]

app = ApplicationMgr()
app.TopAlg = [ GaudiSequencer(Members = [#testCond,
		                         EventCountAlg()]) ]
app.EvtSel = "NONE"
from Configurables import LHCbApp
theApp = LHCbApp()
theApp.EvtMax = 10

#MessageSvc(OutputLevel = 1)
</text></argument>
<argument name="validator"><text>

expected = {
            "Updating Data Quality flags": 0,
            "good event": 0,
            "bad event": 0,
            "Ignoring flag: OtherDet": 0,
            "Ignoring flag: MyDet": 0,
           }

exp_eff = (10, 10)

########

from LHCbAlgs.Tests.DQFilterValidator import checkCounts, checkEff
checkCounts(expected, stdout, result, causes)
checkEff("efficiency", exp_eff, stdout, result, causes)

</text></argument>
</extension>
