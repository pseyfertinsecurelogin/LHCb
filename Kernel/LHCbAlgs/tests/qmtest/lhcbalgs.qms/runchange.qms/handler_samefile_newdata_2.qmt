<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
    (c) Copyright 2018 CERN for the benefit of the LHCb Collaboration

    This software is distributed under the terms of the GNU General Public
    Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
<text>-v</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from Configurables import DetCondTest__TestConditionAlg as TestAlg
from Configurables import LHCbAlgsTests__TestTimeDecoderOdin as TimeDecoder
from Configurables import LHCbAlgsTests__CopyFileAlg as CopyFile
from Configurables import ( EventClockSvc, RunChangeHandlerSvc, XmlCnvSvc )

EventClockSvc().addTool(TimeDecoder, "EventTimeDecoder")
EventClockSvc().EventTimeDecoder.RunNumberStep = 0
EventClockSvc().EventTimeDecoder.FirstRunNumber = 4

detDataSvc = DetectorDataSvc( UsePersistency = True,
                              DetDbRootName = "dd",
                              DetDbLocation = "../data/runchangehandler/lhcb.xml",
                              DetStorageType = 7 )
xmlCnvSvc = XmlCnvSvc(AllowGenericConversion = True)
DetectorPersistencySvc( CnvServices = [ xmlCnvSvc ] )

rch = RunChangeHandlerSvc(ForceUpdate=True)
rch.Conditions = {"Condition": "./data%d.xml"}
# prepare dummy file
import shutil
shutil.copy('../data/runchangehandler/structure.dtd', 'structure.dtd')
shutil.copy('../data/runchangehandler/wrapper.xml', 'data4.xml')
shutil.copy('../data/runchangehandler/payload1.xml', 'payload.xml')

testAlg = TestAlg("TestCond")
testAlg.Conditions = [ "Condition" ]

app = ApplicationMgr()
app.TopAlg = [ TestAlg("TestCond"),
               CopyFile('OverwriteXML',
                        Source='../data/runchangehandler/payload2.xml',
                        Destination='payload.xml') ]

ApplicationMgr().ExtSvc += [ detDataSvc, rch ]
app.EvtSel = "NONE"
app.EvtMax = 2

EventDataSvc(ForceLeaves = True)
MessageSvc(OutputLevel = DEBUG)

</text></argument>
<argument name="validator"><text>
## 2nd check: find data
expected = [
    'TestCond             INFO Condition was updated',
    'TestCond             INFO Requested Conditions:',
    '--- Condition',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = payload1',
    'TestCond             INFO Condition was updated',
    'TestCond             INFO Requested Conditions:',
    '--- Condition',
    'Validity: 0.0 -> 9223372036.854775807',
    '(std::string) data = payload2',
    ]

regexp = r"^---|^Validity|^\(std::string\) data|.*Requested Conditions|TestCond.*was updated"
outputlines = [ l.rstrip() for l in stdout.splitlines() ]

# grep
import re
exp = re.compile(regexp)
outputlines = [ l for l in outputlines if exp.match(l) ]

result["GaudiTest.output.expected"] = result.Quote("\n".join(expected))
result["GaudiTest.output.regexp"] = result.Quote(regexp)
if outputlines != expected:
    causes.append("output")
    result["GaudiTest.output.found"] = result.Quote("\n".join(outputlines))
</text></argument>
</extension>
