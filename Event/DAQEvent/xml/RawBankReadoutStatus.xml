<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- Author  : Marco Clemencic -->
<!--- Created : 2006-09-22 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='DAQEvent'>
<!-- ****************************************************************
     * ODIN                                                         *
     ****************************************************************-->
    <class
      author="Olivier Deschamps"
      name="RawBankReadoutStatus"
      desc="Class for the status of RawBank decoding"
      >


       <location name = "Default"   place = "Transient/DAQ/Status" />

      <enum
        name   = 'Status'
        desc   = 'Status value'
        value  = '
        OK         = 0,
        Corrupted  = 1,
        Incomplete = 2,
        Missing    = 4,
        Empty      = 8 ,
        NonUnique  = 16,
        Tell1Sync  = 32,
        Tell1Link  = 64,
        Tell1Error = 128,
        ErrorBank  = 256,
        MissingStatus = 512,
        BadMagicPattern  = 1024,
        DuplicateEntry   = 2048,
        Unknown    = 4096 '
        access = 'PUBLIC' />
      <!-- 'Unknown' MUST BE THE LAST ITEM -->



      <base   name = "KeyedObject&lt;LHCb::RawBank::BankType&gt;" />
      &KeyedObject;

      <import name="sstream"   std="TRUE"/>
      <import name="map"       std="TRUE"/>
      <import name="algorithm" std="TRUE"/>
      <import name="Event/RawBank"/>

      <typedef
        def    = "Base"
        type   = "KeyedObject&lt;LHCb::RawBank::BankType&gt;"
        desc   = "RawBankReadoutStatus key (BankType)"
        access = "PROTECTED"
        />



      <constructor
        desc     = "non-default constructor"
        argList  = "LHCb::RawBank::BankType type"
        initList = "Base ( type ), m_status()"
        > <code/> </constructor>



      <constructor
        desc     = "Copy Constructor"
        argList  = "LHCb::RawBankReadoutStatus rh"
        initList = "Base(rh.key() ), m_status(rh.m_status)"
        > <code/> </constructor>


      <attribute name="status" desc=" mapping of source status" type="std::map&lt; int, long &gt;" getMeth='FALSE' setMeth='FALSE' />


      <method
        name   = "status"
        desc   = "get Readout status for a given source"
        argList= "int source"
        type   = "long"
        const  = "TRUE">
        <code>
          auto it = m_status.find(source);
          return it != m_status.end() ? it->second : long(Unknown);
        </code>
      </method>

      <method
        name   = "addStatus"
        desc   = "set Readout status for a given source"
        argList= "int source, long stat"
        type   = "void">
        <code>
          auto it = m_status.find(source);
          if( it != m_status.end() ) it->second |= stat;
          else m_status.emplace( source, stat );
        </code>
      </method>



      <method
        name   = "status"
        desc   = "get Readout status for the whole bank"
        type   = "long"
        const  = "TRUE" >
        <code>
          return m_status.empty() ? long(Unknown)
                                  : std::accumulate( m_status.begin(), m_status.end(), 0L,
                                                     [](long s, const std::pair&lt;int,long&gt;&amp; p)
                                                     { return s | p.second; } );
        </code>
      </method>

      <method
        name   = "statusMap"
        desc   = "return the status map attribute"
        type   = "const std::map&lt; int, long &gt;&amp;"
        const  = "TRUE" >
        <code>
          return m_status;
        </code>
      </method>


    </class>
  </package>
</gdd>
