<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Marco Clemencic -->
<!--- Created : 2006-09-22 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='DAQEvent'>
<!-- ****************************************************************
     * ODIN                                                         *
     ****************************************************************-->
    <class
      author="Marco Clemencic"
      name="ODIN"
      desc="Class for the decoding of the ODIN RawBank."
      location="DAQ/ODIN"
      id="1005"
      allocator="NO"
      >

      <enum
        name   = 'Data'
        desc   = 'Fields in the ODIN bank'
        value  = 'RunNumber = 0,
                  EventType,
                  OrbitNumber,
                  L0EventIDHi,
                  L0EventIDLo,
                  GPSTimeHi,
                  GPSTimeLo,
                  Word7,
                  Word8,
                  TriggerConfigurationKey'
        access = 'PUBLIC' />

      <enum
        name   = 'EventTypeBitsEnum'
        desc   = ''
        value  = 'EventTypeBits = 0,
                  CalibrationStepBits = 16'
        access = 'PUBLIC' />

      <enum
        name   = 'EventTypeMasks'
        desc   = ''
        value  = 'EventTypeMask       = 0x0000FFFF,
                  CalibrationStepMask = 0xFFFF0000,
                  FlaggingModeMask    = 0x00008000'
        access = 'PUBLIC' />

      <enum
        name   = 'EventTypes'
        desc   = 'Meaning of the EventType bits'
        value  = 'VeloOpen        = 0x0001,
                  Physics         = 0x0002,
                  NoBias          = 0x0004,
                  Lumi            = 0x0008,
                  Beam1Gas        = 0x0010,
                  Beam2Gas        = 0x0020,
                  et_bit_06       = 0x0040,
                  et_bit_07       = 0x0080,
                  et_bit_08       = 0x0100,
                  et_bit_09       = 0x0200,
                  et_bit_10       = 0x0400,
                  et_bit_11       = 0x0800,
                  et_bit_12       = 0x1000,
                  et_bit_13       = 0x2000,
                  LeadingCrossing = 0x4000,
                  HltFlaggingMode = 0x8000'
        access = 'PUBLIC' />

<!--
      <enum
        name   = 'Word7Bits'
        desc   = ''
        value  = 'DetectorStatusBits = 0,
                  ErrorBits          = 24,
                  SynchErrorBits     = 24,
                  ErrorForcedBits    = 25'
        access = 'PUBLIC' />
-->
      <enum
        name   = 'Word7Bits'
        desc   = ''
        value  = 'DetectorStatusBits = 0,
                  ErrorBits          = 24'
        access = 'PUBLIC' />

      <enum
        name   = 'ErrorCodeMasks'
        desc   = ''
        value  = 'SynchError       = 0x1,
                  SynchErrorForced = 0x2'
        access = 'PUBLIC' />

      <enum
        name   = 'Word7Masks'
        desc   = ''
        value  = 'DetectorStatusMask = 0x00FFFFFF,
                  ErrorMask          = 0xFF000000'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Bits'
        desc   = ''
        value  = 'BunchIDBits         = 0,
                  TAEWindowBits       = 12,
                  TriggerTypeBits     = 16,
                  CalibrationTypeBits = 19,
                  ForceBits           = 21,
                  BXTypeBits          = 22,
                  BunchCurrentBits    = 24'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Masks'
        desc   = ''
        value  = 'BunchIDMask         = 0x00000FFF,
                  TAEWindowMask       = 0x00007000,
                  TriggerTypeMask     = 0x00070000,
                  CalibrationTypeMask = 0x00180000,
                  ForceMask           = 0x00200000,
                  BXTypeMask          = 0x00C00000,
                  BunchCurrentMask    = 0xFF000000'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Bits_v4'
        desc   = 'Provided for backward compatibility'
        value  = 'ReadoutTypeBits  = 19'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Masks_v4'
        desc   = 'Provided for backward compatibility'
        value  = 'ReadoutTypeMask  = 0x00180000'
        access = 'PUBLIC' />

      <enum
        name   = 'ReadoutTypes'
        desc   = ''
        value  = 'ZeroSuppressed    = 0,
                  NonZeroSuppressed = 1'
        access = 'PUBLIC' />

      <enum
        name   = 'CalibrationTypes'
        desc   = ''
        value  = 'A = 0,
                  B = 1,
                  C = 2,
                  D = 3'
        access = 'PUBLIC' />

      <enum
        name   = 'BXTypes'
        desc   = ''
        value  = 'NoBeam       = 0,
                  Beam1        = 1,
                  Beam2        = 2,
                  BeamCrossing = 3'
        access = 'PUBLIC' />

       <enum
         name   = 'TriggerType'
         desc   = 'Type of trigger broadcasted by ODIN'
         value  = "PhysicsTrigger,
                   BeamGasTrigger,
                   LumiTrigger,
                   TechnicalTrigger,
                   AuxiliaryTrigger,
                   NonZSupTrigger,
                   TimingTrigger,
                   CalibrationTrigger"
	access = 'PUBLIC' />

      &DataObject;
      <import name="GaudiKernel/Time"/>
      <import name="Event/RawBank"/>
      <base name="DataObject"/>

      <attribute
        name="runNumber"
        desc="Run number"
        type="unsigned int"
        init="0" />

      <attribute
        name="eventType"
        desc="Event type"
        type="unsigned int"
        init="0" />

      <attribute
        name="orbitNumber"
        desc="Orbit ID"
        type="unsigned int"
        init="0" />

      <attribute
        name="eventNumber"
        desc="L0 Event ID"
        type="unsigned long long"
        init="0" />

      <attribute
        name="gpsTime"
        desc="GPS Time (microseconds)"
        type="unsigned long long"
        init="0" />

      <attribute
        name="detectorStatus"
        desc="Detector Status"
        type="unsigned long long"
        init="0" />

      <attribute
        name="errorBits"
        desc="Error Bits"
        type="unsigned int"
        init="0" />

      <attribute
        name="bunchId"
        desc="Bunch ID"
        type="unsigned int"
        init="0" />

      <attribute
        name="triggerType"
        desc="Trigger Type @see enum LHCb::ODIN::TriggerType"
        type="TriggerType"
        init="PhysicsTrigger" />

      <attribute
        name="readoutType"
        desc="Readout Type (@see enum LHCb::ODIN::ReadoutTypes). Meaningful only if bank version &lt; 5."
        type="ReadoutTypes"
        init="ZeroSuppressed" />

      <attribute
        name="forceBit"
        desc="Force Bit"
        type="bool"
        init="false" />

      <attribute
        name="bunchCrossingType"
        desc="Bunch Crossing Type (BXType, @see enum LHCb::ODIN::BXTypes)"
        type="BXTypes"
        init="NoBeam" />

      <attribute
        name="bunchCurrent"
        desc="Bunch Current"
        type="unsigned int"
        init="0" />

      <attribute
        name="version"
        desc="Version of the ODIN bank"
        type="unsigned int"
        init="0" />

      <attribute
        name="calibrationStep"
        desc="Calibration Step Number"
        type="unsigned int"
        init="0" />

      <attribute
        name="triggerConfigurationKey"
        desc="Requested Trigger Configuration Key. The key actually used is in LHCb::HltDecReports::configuredTCK"
        type="unsigned int"
        init="0" />

      <attribute
        name="timeAlignmentEventWindow"
        desc="TAE (Time Alignment Event) window size"
        type="unsigned int"
        init="0" />

      <attribute
        name="calibrationType"
        desc="Calibration Type (@see enum LHCb::ODIN::CalibrationTypes). Meaningful only if bank version &gt;= 5."
        type="CalibrationTypes"
        init="A" />

	<constructor
		desc     = "Copy constructor. Creates a new ODIN object with the same information"
		initList = "DataObject(), m_runNumber(odin.runNumber()), m_eventType(odin.eventType()), m_orbitNumber(odin.orbitNumber()), m_eventNumber(odin.eventNumber()), m_gpsTime(odin.gpsTime()), m_detectorStatus(odin.detectorStatus()), m_errorBits(odin.errorBits()), m_bunchId(odin.bunchId()), m_triggerType(odin.triggerType()), m_readoutType(odin.readoutType()), m_forceBit(odin.forceBit()), m_bunchCrossingType(odin.bunchCrossingType()), m_bunchCurrent(odin.bunchCurrent()), m_version(odin.version()), m_calibrationStep(odin.calibrationStep()), m_triggerConfigurationKey(odin.triggerConfigurationKey()), m_timeAlignmentEventWindow(odin.timeAlignmentEventWindow()), m_calibrationType(odin.calibrationType())">
                <arg const="TRUE" name="odin" type="LHCb::ODIN"/>
                <code/>
      	</constructor>

      <method name="eventTime" desc="Return the event time (converted from the GPS time)" type="Gaudi::Time" const="TRUE">
        <code>
          if ( gpsTime() == 0xD0DD0D0000000000ULL )
            return 0;
          else
            return gpsTime() * 1000;
        </code>
      </method>
      <method name="setEventTime"
      	desc="Set the event time (converted to GPS time)" type="void"
        argList="const Gaudi::Time time" const="FALSE">
      	<code>
      	  setGpsTime(time.ns()/1000);
        </code>
      </method>
      <method type="bool" name="isFlagging" const="TRUE"
      	desc="">
      	<code>
      	  return eventType() &amp; FlaggingModeMask;
        </code>
      </method>
    </class>
  </package>
</gdd>
