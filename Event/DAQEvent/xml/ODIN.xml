<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Marco Clemencic -->
<!--- Created : 2006-09-22 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='DAQEvent'>
<!-- ****************************************************************
     * ODIN                                                         *
     ****************************************************************-->
    <class 
      author="Marco Clemencic"
      name="ODIN"
      desc="Class for the decoding of the ODIN RawBank."
      location="DAQ/ODIN"
      id="1005"
      allocator="NO"
      >
      
      <enum
        name   = 'Data'
        desc   = 'Fields in the ODIN bank'
        value  = 'RunNumber = 0,
                  EventType,
                  OrbitNumber,
                  L0EventIDHi,
                  L0EventIDLo,
                  GPSTimeHi,
                  GPSTimeLo,
                  Word7,
                  Word8,
                  TriggerConfigurationKey'
        access = 'PUBLIC' />

      <enum
        name   = 'EventTypeBitsEnum'
        desc   = ''
        value  = 'EventTypeBits = 0,
                  CalibrationStepBits = 16'
        access = 'PUBLIC' />

      <enum
        name   = 'EventTypeMasks'
        desc   = ''
        value  = 'EventTypeMask       = 0x0000FFFF,
                  CalibrationStepMask = 0xFFFF0000'
        access = 'PUBLIC' />

<!--
      <enum
        name   = 'Word7Bits'
        desc   = ''
        value  = 'DetectorStatusBits = 0,
                  ErrorBits          = 24,
                  SynchErrorBits     = 24,
                  ErrorForcedBits    = 25'
        access = 'PUBLIC' />
-->
      <enum
        name   = 'Word7Bits'
        desc   = ''
        value  = 'DetectorStatusBits = 0,
                  ErrorBits          = 24'
        access = 'PUBLIC' />

      <enum
        name   = 'ErrorCodeMasks'
        desc   = ''
        value  = 'SynchError       = 0x1,
                  SynchErrorForced = 0x2'
        access = 'PUBLIC' />

      <enum
        name   = 'Word7Masks'
        desc   = ''
        value  = 'DetectorStatusMask = 0x00FFFFFF,
                  ErrorMask          = 0xFF000000'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Bits'
        desc   = ''
        value  = 'BunchIDBits      = 0,
                  TriggerTypeBits  = 16,
                  ReadoutTypeBits  = 19,
                  ForceBits        = 21,
                  BXTypeBits       = 22,
                  BunchCurrentBits = 24'
        access = 'PUBLIC' />

      <enum
        name   = 'Word8Masks'
        desc   = ''
        value  = 'BunchIDMask      = 0x00000FFF,
                  TriggerTypeMask  = 0x00070000,
                  ReadoutTypeMask  = 0x00180000,
                  ForceMask        = 0x00200000,
                  BXTypeMask       = 0x00C00000,
                  BunchCurrentMask = 0xFF000000'
        access = 'PUBLIC' />

      <enum
        name   = 'ReadoutTypes'
        desc   = ''
        value  = 'ZeroSuppressed    = 0,
                  NonZeroSuppressed = 1'
        access = 'PUBLIC' />

      <enum
        name   = 'BXTypes'
        desc   = ''
        value  = 'NoBeam          = 0,
                  SingleBeamLeft  = 1,
                  SingleBeamRight = 2,
                  BeamCrossing    = 3'
        access = 'PUBLIC' />

      <enum
	name   = 'TriggerType'
	desc   = 'Type of trigger broadcasted by ODIN'
	value  = 'Reserve           = 0,
                  PhysicsTrigger    = 1,
                  AuxilliaryTrigger = 2,
                  RandomTrigger     = 3,
                  PeriodicTrigger   = 4,
                  NonZSupTrigger    = 5,
                  TimingTrigger     = 6,
                  CalibrationTrigger= 7'
	access = 'PUBLIC' />

      &DataObject;
      <import name="GaudiKernel/Time"/>
      <import name="Event/RawBank"/>
      <base name="DataObject"/>

      <attribute
        name="runNumber"
        desc="Run number"
        type="unsigned int"
        init="0" />

      <attribute
        name="eventType"
        desc="Event type"
        type="unsigned int"
        init="0" />

      <attribute
        name="orbitNumber"
        desc="Orbit ID"
        type="unsigned int"
        init="0" />

      <attribute
        name="eventNumber"
        desc="L0 Event ID"
        type="ulonglong"
        init="0" />

      <attribute
        name="gpsTime"
        desc="GPS Time (microseconds)"
        type="ulonglong"
        init="0" />

      <attribute
        name="detectorStatus"
        desc="Detector Status"
        type="ulonglong"
        init="0" />

      <attribute
        name="errorBits"
        desc="Error Bits"
        type="unsigned int"
        init="0" />

      <attribute
        name="bunchId"
        desc="Bunch ID"
        type="unsigned int"
        init="0" />

      <attribute
        name="triggerType"
        desc="Trigger Type"
        type="unsigned int"
        init="0" />

      <attribute
        name="readoutType"
        desc="Readout Type (@see enum LHCb::ODIN::ReadoutTypes)"
        type="ReadoutTypes"
        init="ZeroSuppressed" />

      <attribute
        name="forceBit"
        desc="Force Bit"
        type="bool"
        init="false" />

      <attribute
        name="bunchCrossingType"
        desc="Bunch Crossing Type (BXType, @see enum LHCb::ODIN::BXTypes)"
        type="BXTypes"
        init="NoBeam" />

      <attribute
        name="bunchCurrent"
        desc="Bunch Current"
        type="unsigned int"
        init="0" />

      <attribute
        name="version"
        desc="Version of the ODIN bank"
        type="unsigned int"
        init="0" />

      <attribute
        name="calibrationStep"
        desc="Calibration Step Number"
        type="unsigned int"
        init="0" />

      <attribute
        name="triggerConfigurationKey"
        desc="Trigger Configuration Key"
        type="unsigned int"
        init="0" />

	<constructor 
		desc     = "Copy constructor. Creates a new ODIN object with the same information" 
		initList = "DataObject(), m_runNumber(odin.runNumber()), m_eventType(odin.eventType()), m_orbitNumber(odin.orbitNumber()), m_eventNumber(odin.eventNumber()), m_gpsTime(odin.gpsTime()), m_detectorStatus(odin.detectorStatus()), m_errorBits(odin.errorBits()), m_bunchId(odin.bunchId()), m_triggerType(odin.triggerType()), m_readoutType(odin.readoutType()), m_forceBit(odin.forceBit()), m_bunchCrossingType(odin.bunchCrossingType()), m_bunchCurrent(odin.bunchCurrent()), m_version(odin.version()), m_calibrationStep(odin.calibrationStep()), m_triggerConfigurationKey(odin.triggerConfigurationKey())">
                <arg const="TRUE" name="odin" type="LHCb::ODIN"/>
                <code/>
      	</constructor>

      <method name="set" desc="Fill data fields from the ODIN bank"
        argList="const LHCb::RawBank* bank" type="StatusCode">
        <code>
  ulonglong    temp64;
  unsigned int temp32;
  
  if ( bank-&gt;type() != LHCb::RawBank::ODIN )
    return StatusCode::FAILURE;

  setVersion(bank-&gt;version());
  const unsigned int* odinData = bank->data();

  setRunNumber(odinData[LHCb::ODIN::RunNumber]);

  setOrbitNumber(odinData[LHCb::ODIN::OrbitNumber]);

  temp64 = odinData[LHCb::ODIN::L0EventIDHi];
  setEventNumber((temp64 &lt;&lt; 32) + odinData[LHCb::ODIN::L0EventIDLo]);

  temp64 = odinData[LHCb::ODIN::GPSTimeHi];
  setGpsTime ((temp64 &lt;&lt; 32) + odinData[LHCb::ODIN::GPSTimeLo]);

  temp32 = odinData[LHCb::ODIN::Word7];
  setDetectorStatus( (temp32 &amp; LHCb::ODIN::DetectorStatusMask) &gt;&gt; LHCb::ODIN::DetectorStatusBits );
  setErrorBits( (temp32 &amp; LHCb::ODIN::ErrorMask) &gt;&gt; LHCb::ODIN::ErrorBits );

  temp32 = odinData[LHCb::ODIN::Word8];
  setBunchId( (temp32 &amp; LHCb::ODIN::BunchIDMask) &gt;&gt; LHCb::ODIN::BunchIDBits );
  setTriggerType( (temp32 &amp; LHCb::ODIN::TriggerTypeMask) &gt;&gt; LHCb::ODIN::TriggerTypeBits );
  setReadoutType( ((temp32 &amp; LHCb::ODIN::ReadoutTypeMask) &gt;&gt; LHCb::ODIN::ReadoutTypeBits ) == 0 ?
                  ZeroSuppressed : NonZeroSuppressed );

  setForceBit( ((temp32 &amp; LHCb::ODIN::ForceMask) &gt;&gt; LHCb::ODIN::ForceBits ) != 0 );

  switch ( (temp32 &amp; LHCb::ODIN::BXTypeMask) &gt;&gt; LHCb::ODIN::BXTypeBits ) {
    case 0  : setBunchCrossingType(NoBeam); break;
    case 1  : setBunchCrossingType(SingleBeamLeft); break;
    case 2  : setBunchCrossingType(SingleBeamRight); break;
    case 3  : setBunchCrossingType(BeamCrossing); break;
    default : setBunchCrossingType(NoBeam); break;
  }

  setBunchCurrent( (temp32 &amp; LHCb::ODIN::BunchCurrentMask) &gt;&gt; LHCb::ODIN::BunchCurrentBits );

  if (version() &lt; 3) {

    setEventType(odinData[LHCb::ODIN::EventType]);

  } else {

    temp32 = odinData[LHCb::ODIN::EventType];
    setEventType((temp32 &amp; LHCb::ODIN::EventTypeMask) &gt;&gt; LHCb::ODIN::EventTypeBits);
    setCalibrationStep((temp32 &amp; LHCb::ODIN::CalibrationStepMask) &gt;&gt; LHCb::ODIN::CalibrationStepBits);
    
    setTriggerConfigurationKey(odinData[LHCb::ODIN::TriggerConfigurationKey]);

  }
  
  return StatusCode::SUCCESS;
        </code>
      </method>
      <method name="eventTime" desc="Return the event time (converted from the GPSTime)" type="Gaudi::Time" const="TRUE">
        <code>
          if ( gpsTime() == 0xD0DD0D0000000000ULL )
            return 0;
          else
            return gpsTime() * 1000;
        </code>
      </method>
    </class>
  </package>
</gdd>
