<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Rob Lambert -->
<!--- Created : 2012-09-03 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='FSREvent'>


<!-- IOFSR Class -->

    <class
      name="IOFSR"
      author="Rob lambert"
      desc="Class to store IO information about a job, upgraded EventAccountFSR, needs a special FSRWriter to add file-by-file"
      stdVectorTypeDef="TRUE"
      id="13506"
      serializers="TRUE"
      >

      <base name='DataObject'/>
      
      <enum
        desc="FSR status, is the accounting OK"
        name="StatusFlag"
        strTypConv = 'TRUE'
        access="PUBLIC" >
        <enumval name="Unknown"    value = "-6"  desc="other enum possibilities"/>
        <enumval name="FILEDOUBLED" value = "-5"  desc="Some files have been multiply processed, in more than one job"/>
        <enumval name="EVENTDOUBLED" value = "-4"  desc="Some events have been multiply processed, seen events too large"/>
        <enumval name="EVENTSKIPPED" value = "-3"  desc="Some events have been skipped, seen events too small"/>
        <enumval name="UNRELIABLE" value = "-2"  desc="The counting in this FSR is known to be suspect"/>
        <enumval name="ERROR"      value = "-1"   desc="Missing or corrupt FSRs"/>
        <enumval name="UNCHECKED"  value = "0"  desc="The counting needs to be checked"/>
        <enumval name="VERIFIED"   value = "1"   desc="The counting in all lower FSRs has been verified OK"/>
      </enum>


      <import name="vector" std="TRUE"/>
      <import name="map" std="TRUE"/>
       <import name="string" std="TRUE"/>
      
      <typedef
        type="std::map&lt; std::string, unsigned long long &gt;"
        def="FileEventMap"
        desc="File Input Events, {GUID:unsigned long long}"
        access="PUBLIC"
	/> 

      <typedef
        type="std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;"
        def="ProvenanceMap"
        desc="File Provenance, {GUID:&lt;GUIDs&gt;}"
        access="PUBLIC"
	/> 
      
      <attribute
        desc="Number of events this output file should contain"
        name="eventsOutput"
        type="unsigned long long"
        init="0"
       />
      
      <attribute
        desc="Number of events read over to produce this file"
        name="eventsSeen"
        type="unsigned long long"
        init="0"
       />
      
      <attribute
        desc="list of parent files at this level"
        name="parents"
        type="std::vector&lt; std::string &gt;"
        init="0"
       />
      
      <attribute
        desc="maps of ancestor files below this level"
        name="provenance"
        type="ProvenanceMap"
        init=""
       />
      
      <attribute
        desc="Map of input files and events written to those files"
        name="eventsWrittenTo"
        type="FileEventMap"
        init=""
       />
      
      <attribute
        desc="Map of input files and events read in creating those files"
        name="eventsSeenBy"
        type="FileEventMap"
        init=""
       />
      
      <attribute
        desc="Map of input files and events read from those files"
        name="eventsReadFrom"
        type="FileEventMap"
        init=""
       />
      
      <attribute
        desc="May be filled with this file's GUID if it is known, almost never known"
        name="FID"
        type="std::string"
        init=""
       />


      <attribute
        desc="Is the FSR reliable? This time, OK wrt streaming. Fill during merging."
        name="statusFlag"
        type="LHCb::IOFSR::StatusFlag"
        init="LHCb::IOFSR::UNCHECKED"
       />


      <!-- No special setters and getters... only create in finalize to make singleton?-->
      <location name="Default"   
		place="/FileRecords/IOFSR"/>
      
    </class>

  </package>


</gdd>
