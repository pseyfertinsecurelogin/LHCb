      <import name="Kernel/&channelID;"/>
      <import name="Event/&liteClusterName;"/>
      <template name="KeyedObjectDict" t1="LHCb::&channelID;"/>
      <base name="KeyedObject&lt;LHCb::&channelID;&gt;"/>
        &KeyedContainer;

      <typedef desc = "ADC vector pair typedef" 
       type =  "std::vector&lt;std::pair&lt;int,unsigned int&gt; &gt;" 
       def = "ADCVector"
       access = "PUBLIC " />

      <destructor desc="my non virtual destructor">
      <code> // </code>
      </destructor>
      
      <attribute 
       name="liteCluster" 
       type="LHCb::&liteClusterName;" 
       desc="TELL1 cluster without ADC values"
       setMeth="FALSE"
       getMeth="TRUE"
      />

      <attribute 
       name="stripValues" 
       type="ADCVector" 
       desc="strip numbers and their signals"
      />

      <method 
       name="size" 
       type="unsigned int" 
       desc="number of strips in cluster" 
       const="TRUE"
      >
       <code>
  return stripValues().size();
       </code>
      </method>

      <method 
       name="adcValue" 
       type="unsigned int" 
       argList="unsigned int num" 
       desc="adc value of strips in cluster" 
       const="TRUE"
      >
       <code>
  return stripValues()[num].second;
       </code>
      </method>

      <method 
       name="strip" 
       type="int" 
       argList="unsigned int num" 
       desc="strip number of strip in cluster" 
       const="TRUE"
      >
       <code>
  return stripValues()[num].first;
       </code>
      </method>

      <method
      name="channelID"
      type="LHCb::&channelID;"
      desc="The  Channel ID"
      const="TRUE"
     >
     <code>
  return m_liteCluster.channelID();
     </code>
     </method>

     <method
      name="totalCharge"
      type="double"
      desc="total charge"
      const="TRUE">
     <code>
  double sum = 0;
  ADCVector::const_iterator iter = m_stripValues.begin();
  for(; iter != m_stripValues.end(); ++iter){
    sum += iter->second;
  } 
  return sum;
     </code>
     </method>

     <method
      name="interStripFraction"
      type="double"
      desc="position within a strip of cluster centre, quantized in xxths of a strip"
      const="TRUE"
     >
     <code>
  return m_liteCluster.interStripFraction();
     </code>
     </method>

     <method
    name="pseudoSize"
      type="unsigned int"
      desc="number of strips in cluster, 3 means 3 or more"
      const="TRUE"
     >
     <code>
  return m_liteCluster.pseudoSize();
     </code>
     </method>

     <method
      name="highThreshold"
      type="bool"
      desc="denotes a cluster with significant adc counts, less likely to be noise or spillover"
      const="TRUE"
     >
     <code>
  return m_liteCluster.highThreshold();
     </code>
     </method>
