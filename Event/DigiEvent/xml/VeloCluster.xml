<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : C. Parkes -->
<!--- Created : 2006-02-13 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" [
<!ENTITY liteClusterName "VeloLiteCluster">
<!ENTITY channelID "VeloChannelID">
<!ENTITY VeloClusterClass SYSTEM "SiCluster.ent">
]>
<gdd>
 <package name="DigiEvent">
    <class name="VeloCluster"
     id="4006"
     author="Chris Parkes"
     desc="A cluster as produced by the TELL1 with full ADC information."
     serializers="FALSE">

    <import name="vector"  std="TRUE"/> 
    <import name="utility" std="TRUE"/> 

     <location name="Default"   place="Raw/Velo/Clusters"   />
     <location name="Emulated"  place="Emu/Velo/Clusters"/>

     <constructor desc="Constructor" 
       argList='&liteClusterName; lCluster, 
                ADCVector strips'
        initList='m_liteCluster(lCluster), m_stripValues(strips)' >
     </constructor>
     
  &VeloClusterClass;
  
  <constructor desc = 'copy constructor'
               initList = 'KeyedObject&lt;LHCb::VeloChannelID&gt;(),m_liteCluster(lCluster.m_liteCluster), m_stripValues(lCluster.m_stripValues) ' > 
    <arg const = 'TRUE' name = "lCluster" type = "LHCb::VeloCluster" />
  </constructor>
  
  <method desc= 'clone method'
	  name = 'clone'
	  const = 'TRUE'
	  type = "LHCb::VeloCluster*"
	  access = "PUBLIC">
    <code>
      return new LHCb::VeloCluster( *this );
    </code>
  </method>
  
   <method
     name = "firstChannel"
     type="LHCb::VeloChannelID"
     desc="first Velo Channel ID"
     const="TRUE">
    <code>
 return VeloChannelID(channelID().sensor(),stripValues().front().first,channelID().type());

   </code>
   </method>
   <method
     name = "lastChannel"
     type="LHCb::VeloChannelID"
     desc="first Velo Channel ID"
     const="TRUE">
    <code>
 return VeloChannelID(channelID().sensor(),stripValues().back().first,channelID().type());    </code>
  </method>

 <method
     name = "channels"
     type="std::vector &lt; LHCb::VeloChannelID &gt;"
     desc="channel IDs"
     const="TRUE">
      <code>
  std::vector &lt; LHCb::VeloChannelID &gt; chanCont;
  VeloChannelID first = firstChannel();
  for (unsigned int i = 0; i &lt; size(); i++){
    VeloChannelID aChan(first.sensor(),first.strip()+i,first.type());
    chanCont.push_back(aChan);
  }
  return chanCont;
      </code>
 </method>

<method
 name = "isRType"
 type = "bool"
 desc = "check if R type"
 const = "TRUE" >
  <code>
  return m_liteCluster.channelID().isRType();
  </code> 
</method>

<method
 name = "isPhiType"
 type = "bool"
 desc = "check if Phi type"
 const = "TRUE" >
  <code>
  return m_liteCluster.channelID().isPhiType();
  </code> 
</method>

<method
 name = "isPileUp"
 type = "bool"
 desc = "check if Pile UP "
 const = "TRUE" >
  <code>
  return m_liteCluster.channelID().isPileUp();
  </code> 
</method>


    </class>
</package>
</gdd>
