<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : M. Needham -->
<!--- Created : 2006-01-30 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" [
<!ENTITY liteClusterName "STLiteCluster">
<!ENTITY channelID "STChannelID">
<!ENTITY channelIDFunction "channelID()" >
<!ENTITY STClusterClass SYSTEM "SiCluster.ent">
<!ENTITY STClusterChannelIDFunctions SYSTEM "STChannelID.ent">
]>
<gdd>
 <package name="DigiEvent">
    <class name="STCluster"
     id="9004"
     author="Matthew Needham"
     desc="A cluster as produced by the TELL1 with full ADC information."
     serializers="FALSE">

     <import name="vector"  std="TRUE"/> 
     <import name="utility" std="TRUE"/> 

     <location name="TTClusters"   place="Raw/TT/Clusters"   />
     <location name="ITClusters"   place="Raw/IT/Clusters"   />

     <constructor desc="Constructor" 
       argList='&liteClusterName; lCluster, 
                ADCVector strips,
                double neighbourSum'
        initList='m_liteCluster(lCluster), m_stripValues(strips),m_neighbourSum(neighbourSum) , m_sourceID(999), m_tell1Channel(9999)' >
     </constructor>

    <constructor desc="Constructor with source id" 
       argList='&liteClusterName; lCluster, 
                ADCVector strips,
                double neighbourSum, unsigned sourceID, unsigned int tell1Chan'
        initList='m_liteCluster(lCluster), m_stripValues(strips),m_neighbourSum(neighbourSum) , m_sourceID(sourceID), m_tell1Channel(tell1Chan)' >
     </constructor>

   <constructor desc = 'copy constructor'
      initList = "KeyedObject&lt;LHCb::&channelID;&gt;(),m_liteCluster(cluster.m_liteCluster), m_stripValues(cluster.m_stripValues),m_neighbourSum(cluster.m_neighbourSum) , m_sourceID(cluster.m_sourceID), m_tell1Channel(cluster.m_tell1Channel) " > 
      <arg const = 'TRUE' name = "cluster" type = "LHCb::STCluster" />
	</constructor>

  <method desc= 'clone method'
   name = 'clone' 
   const = 'TRUE'
   type = "LHCb::STCluster*"
   access = "PUBLIC">
   <code>
     return new LHCb::STCluster( *this );
   </code>
  </method>




  &STClusterClass;


 <attribute 
       name="neighbourSum" 
       type="double" 
       desc="sum neighbour channels"
       setMeth="FALSE" />

 <attribute 
   name="sourceID"
   type ="unsigned int"
   desc = "Identifier of the tell1 giving the cluster "
 />

  <attribute 
    name = "tell1Channel"
    type= "unsigned int"
    desc = "tell1 channel number"
  />

   <method
     name = "firstChannel"
     type="LHCb::STChannelID"
     desc="first ST Channel ID"
     const="TRUE">
    <code>
 return STChannelID(channelID().type(),channelID().station(),
                     channelID().layer(), channelID().detRegion(),
                     channelID().sector(),channelID().strip()+stripValues().front().first);
   </code>
   </method>
   <method
     name = "lastChannel"
     type="LHCb::STChannelID"
     desc="first ST Channel ID"
     const="TRUE">
    <code>
 return STChannelID(channelID().type(),channelID().station(),
                    channelID().layer(), channelID().detRegion(),
                    channelID().sector(),channelID().strip()+stripValues().back().first);    </code>
  </method>

 <method
     name = "channels"
     type="std::vector &lt; LHCb::STChannelID &gt;"
     desc="channel IDs"
     const="TRUE">
      <code>
  std::vector &lt; LHCb::STChannelID &gt; chanCont;
  STChannelID first = firstChannel();
  for (unsigned int i = 0; i &lt; size(); ++i){
    STChannelID aChan(first.type(), first.station(), first.layer(),
                      first.detRegion(),first.sector(),first.strip()+i);
    chanCont.push_back(aChan);
  }
  return chanCont;
      </code>
 </method>


 <method name = "contains"
  type = "bool"
  desc = "check if channel is inside cluster"
  argList = "const LHCb::STChannelID&amp; chan"
  const = "TRUE">
 <code>
  bool inside = false;
  if (chan.uniqueSector() == channelID().uniqueSector()){
    const unsigned int firstStrip = channelID().strip() + stripValues().front().first;    
    const unsigned int lastStrip = channelID().strip() + stripValues().back().first;
    if (chan.strip() &gt; firstStrip &amp;&amp; chan.strip() &lt; lastStrip ) inside = true;
  }
  return inside;
  </code> 
  </method>


 <method
   name = "maxADCValue"
   type = "unsigned int"
   desc = "maximum adc value of strips in a cluster"
   const = "TRUE" >
    <code>
   unsigned int maxCharge = 0u;
   LHCb::STCluster::ADCVector::const_iterator iter = stripValues().begin();
   while (iter != stripValues().end()){
     if (iter->second &gt; maxCharge) maxCharge = iter->second;
     ++iter; 
   }
    return maxCharge;
    </code>
 </method>



 &STClusterChannelIDFunctions;


    </class>
</package>
</gdd>
