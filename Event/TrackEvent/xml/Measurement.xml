<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackEvent'>

<!-- ================= Measurement class definition ================= -->

    <class
      name        = 'Measurement'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'Measurement is the base class for offline and online measurements.'
      stdVectorTypeDef = "TRUE"
      serializers = 'FALSE' >

      <import name='Event/TrackTypes.h' />
      <import name='Event/StateVector.h' />
      <import name='Kernel/LHCbID' />
      <import name='Kernel/Trajectory' />
      <import name='DetDesc/DetectorElement' soft='FORWARDONLY' namespace = '::'/>

      &StlPtrVector;

<!--
  /** Measurement type enumerations
   *
   *   Unknown  : measurement of undefined type (this should never happen!)
   *   VeloR    : Velo-R measurement
   *   VeloPhi  : Velo-phi measurement
   *   TT       : TT measurement (ST measurement in the TT stations)
   *   IT       : IT measurement (ST measurement in the IT seeding stations)
   *   OT       : OT measurement in the seeding stations
   *   Muon     : Muon measurement
   *   VP  : VP x,y measurement
   *
   */
-->
      <enum
        name    = 'Type'
        value   = 'Unknown,VeloR,VeloPhi,VeloLiteR,VeloLitePhi,TT,IT,OT,Muon, TTLite, ITLite,VPLite,Calo,Origin'
        desc    = 'enumerator for the type of Measurement'
        access  = 'PUBLIC'
        strTypConv = 'TRUE' 
      />

      <constructor 
	desc     = "Copy constructor" 
	argList  = "LHCb::Measurement other" 
        initList = "m_mtype(other.m_mtype),m_z(other.m_z),m_measure(other.m_measure),m_errMeasure(other.m_errMeasure),m_lhcbID(other.m_lhcbID),m_detectorElement(other.m_detectorElement)" >
        <code>
	  if( other.m_trajectory.get() )
            m_trajectory.reset( (other.m_trajectory)->clone().release());
	</code>
      </constructor>

      <constructor 
	desc     = "Constructor" 
	argList  = "const LHCb::Measurement::Type type, const LHCb::LHCbID id, const DetectorElement* elem=0"
        initList = "m_mtype(type), m_z(0), m_measure(0), m_errMeasure(0), m_lhcbID(id), m_detectorElement(elem)" >
      </constructor>

     <attribute
       type    = 'bitfield'
       name    = 'mtype'
       desc    = 'the variety of measurement types'
       getMeth = 'FALSE'
       setMeth = 'FALSE'
       access  = 'PROTECTED'>
       <bitfield
         name      = 'type'
         length    = '6'
         type      = 'Type'
         getMeth   = 'FALSE'
         setMeth   = 'TRUE'
         checkMeth = 'FALSE'
         desc      = 'measurement type' />
      </attribute>

      <attribute
        type    = 'double'
        name    = 'z'
        desc    = 'the z-position of the measurement'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'measure'
        desc    = 'the measurement value'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'errMeasure'
        desc    = 'the measurement error'
        access  = 'PROTECTED' />

      <attribute
        type    = 'std::auto_ptr &lt; LHCb::Trajectory &gt;'
        name    = 'trajectory'
        desc    = 'the trajectory representing the measurement (owner)'
        access  = 'PROTECTED'
        getMeth = 'FALSE'
        setMeth = 'FALSE' />

      <attribute
        type    = 'LHCb::LHCbID'
        name    = 'lhcbID'
        desc    = 'the corresponding LHCbID'
        access  = 'PROTECTED' />

      <attribute
        type    = 'const DetectorElement*'
        name    = 'detectorElement'
        desc    = 'the corresponding detectorElement'
	setMeth = 'FALSE'
	getMeth = 'TRUE'
	transient = 'TRUE'
        access  = 'PROTECTED' />

      <method
        type    = 'double'
        name    = 'errMeasure2'
        desc    = 'Retrieve const  the measurement error squared'
        const   = 'TRUE'>
        <code>
  return m_errMeasure * m_errMeasure;
        </code>
      </method>

      <method
        type    = 'double'
        name    = 'resolution'
        argList = 'Gaudi::XYZPoint /*point*/, Gaudi::XYZVector /*vec*/'
        desc    = 'Retrieve the measurement error'
        const   = 'TRUE'
        virtual = 'TRUE'>
        <code>
  return m_errMeasure;
        </code>
      </method>

      <method
        type    = 'double'
        name    = 'resolution2'
        argList = 'Gaudi::XYZPoint /*point*/, Gaudi::XYZVector /*vec*/'
        desc    = 'Retrieve the measurement error squared'
        const   = 'TRUE'
        virtual = 'TRUE'>
        <code>
  return m_errMeasure * m_errMeasure;
        </code>
      </method>

      <method
        type    = 'LHCb::Measurement::Type'
        name    = 'type'
        desc    = 'Retrieve the measurement type'
        const   = 'TRUE'>
        <code>
  return (Measurement::Type)((m_mtype &amp; typeMask) &gt;&gt; typeBits);
        </code>
      </method>

      <method
        type    = 'bool'
        name    = 'checkType'
        argList = 'LHCb::Measurement::Type value'
        desc    = 'Check the measurement type'
        const   = 'TRUE'>
        <code>
  return type() == value;
        </code>
      </method>

      <method
        type    = 'LHCb::Measurement*'
        name    = 'clone'
        desc    = 'Clone the measurement'
        const   = 'TRUE'
        virtual = 'PURE'>
      </method>

      <method
        type    = 'const LHCb::Trajectory&amp;'
        name    = 'trajectory'
        desc    = 'Retrieve the trajectory representing the measurement'
        const   = 'TRUE'>
        <code>
  return *m_trajectory;
        </code>
      </method>

      <method
        name    = 'setTrajectory'
        desc    = 'Set the trajectory'>
        <arg type = 'std::auto_ptr &lt; LHCb::Trajectory &gt;' name='traj' const='FALSE'/>
        <code>  m_trajectory = traj ; </code>
      </method>
      
    </class>

  </package>
</gdd>
