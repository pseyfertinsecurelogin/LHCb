<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd"[
<!ENTITY CLID_CaloCluster              "2003"                   >
]>
<gdd>
  <package name="RecEvent">
<!-- **************************************************************************
  * $Id: CaloCluster.xml,v 1.6 2009-07-24 16:49:00 odescham Exp $
  *****************************************************************************
  * XML-description of CaloCluster class                                      *
  * author: Vanya Belyaev Ivan.Belyaev@itep.ru                                *
  * date:   05.02.02                                                          *
  ************************************************************************* -->


<class
 name   = "CaloCluster"
 desc   = "Calorimeter Cluster"
 id     = "&CLID_CaloCluster;"
 author = "Vanya Belyaev Ivan.Belyaev@itep.ru"
>
<desc> *
 *
 *  The class represents the cluster in calorimeter as a 
 *  collection of connected and tagged cells.
 *
 *</desc>
<import name = "vector" std="TRUE"       />
<import name = "Event/CaloClusterEntry"  />
<import name = "Event/CaloPosition"      />

&KeyedObject;
<base   name = "KeyedObject&lt;int&gt;" />

<location name = "Default"   place = "Rec/Calo/Clusters"          />
<location name = "Ecal"      place = "Rec/Calo/EcalClusters"      />
<location name = "Hcal"      place = "Rec/Calo/HcalClusters"      />
<location name = "EcalSplit" place = "Rec/Calo/EcalSplitClusters" />
<location name = "DefaultHlt"   place = "Hlt/Calo/Clusters"          />
<location name = "EcalHlt"      place = "Hlt/Calo/EcalClusters"      />
<location name = "HcalHlt"      place = "Hlt/Calo/HcalClusters"      />
<location name = "EcalSplitHlt" place = "Hlt/Calo/EcalSplitClusters" />
<location name = "EcalHlt1"      place = "Hlt1/Calo/EcalClusters"      />

<typedef
 def    = "Base"
 type   = "KeyedObject&lt;int&gt;"
 desc   = "Shortcut for own base class "
 access = "PROTECTED"
/>
&KeyedObject;

 <enum 
   desc="CaloCluster type" 
   name="Type" 
   value=" Undefined = 0, Invalid, CellularAutomaton, Area3x3, Area2x3x3"
   access="PUBLIC"
 />
 
<typedef
 def    = "Entry"
 type   = "LHCb::CaloClusterEntry"
 desc   = "The shortcut for CaloClusterEntry class"
 access = "PUBLIC"
/>

<typedef
 def    = "Entries"
 type   = "std::vector&lt;LHCb::CaloClusterEntry&gt;"
 desc   = "Container with references to digits"
 access = "PUBLIC"
/> 
 
<typedef
 def    = "Digits"
 type   = "LHCb::CaloCluster::Entries"
 desc   = "The shortcut for container of CaloClusterEntry object"
 access = "PUBLIC"
/>

<typedef
 def    = "Position"
 type   = "LHCb::CaloPosition"
 desc   = "The shortcut for CaloPosition type"
 access = "PUBLIC"
/>

<constructor
 desc     = "Default constructor"
 initList = "Base (    ) , m_type ( LHCb::CaloCluster::Undefined ) , m_seed() , m_entries() , m_position () "
> <code/> </constructor>

<constructor 
 desc     = "Copy Constructor" 
 argList  = "LHCb::CaloCluster right"
 initList = "Base() , m_type( right.type() ) , m_seed( right.seed() ) , m_entries( right.entries() ) , m_position( right.position() ) " 
> <code/> </constructor>

<attribute
 name = "type"
 desc = "The type of the cluster "
 type = "LHCb::CaloCluster::Type"
/>

<attribute
 name = "seed"
 desc = "The cellID of the seed digit for the cluster"
 type = "LHCb::CaloCellID"
/>

<attribute
 name = "entries"
 desc = "The cluster contents itself - entries : digits with their statuses"
 type = "std::vector&lt;LHCb::CaloClusterEntry&gt;"
 nonconstaccessor="TRUE"
/>
                              
<attribute
 name = "position"
 desc = "Cluster parameters: the position and the spread"
 type = "LHCb::CaloCluster::Position"
 dictalias = "LHCb::CaloPosition"
 nonconstaccessor="TRUE"
/>

<method
 desc   = "Retrieve the energy @attention it is just a shortcut! "
 name   = "e"
 type   = "double"
 const  = "TRUE"
 access = "PUBLIC" >
 <code> return position().e() ; </code>
</method>

<method
 desc    = "Cloning of the object ('virtual constructor') "
 name    = "clone"
 type    = "LHCb::CaloCluster*"
 const   = "TRUE"
 virtual = "TRUE"
 access  = "PUBLIC" >
<code> return new LHCb::CaloCluster( *this );</code>
</method>


</class>
</package>
</gdd>
