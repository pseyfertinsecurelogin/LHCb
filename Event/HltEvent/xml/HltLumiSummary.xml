<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='HltEvent'>
    
<!-- HltLumiSummary Class -->

    <class
      name        = 'HltLumiSummary'
      author      = 'Jaap Panman'
      desc        = 'Summary class for Lumi in Hlt'
      stdVectorTypeDef="TRUE"
      keyedContTypeDef = "TRUE"
      id = '7520'
      serializers = 'TRUE'>

      <location name="Default"   place="Hlt/LumiSummary"/>
 
      <import name="vector" std="TRUE"/>
      <!-- <base name='DataObject' /> -->
      <!-- &DataObject; -->

      <!-- &KeyedObject; -->

      <typedef
        type="GaudiUtils::VectorMap&lt;  int, int&gt;"
        def="ExtraInfo"
        desc="User information"
        access="PUBLIC"
	/>

      <import name='GaudiKernel/GaudiException' />
      <import name="GaudiKernel/KeyedObject"/>
      <import name='GaudiKernel/VectorMap' />

      <base name="KeyedObject&lt;int&gt;"/>
       &KeyedObject; 

      <constructor
        argList="HltLumiSummary rhs"
        desc="Copy constructor"
        initList="KeyedObject&lt;int&gt;(), m_extraInfo(rhs.m_extraInfo)"
	/>

      <method
        name="clone"
        desc="Clone LumiSummary"
        type="LHCb::HltLumiSummary*"
        const="TRUE"
	virtual="TRUE"
	>
	<code>
          return new HltLumiSummary(*this);
	</code>
      </method>

      <method
        desc="Assignment operator"
        name="operator="
        type="LHCb::HltLumiSummary&amp;"
	>
	<arg name="rhs" type="HltLumiSummary" const='TRUE'/>
        <code>
   if ( this != &amp;rhs ) {
      m_extraInfo         = rhs.m_extraInfo;
   }
   return *this;
        </code>
      </method>
<!-- 
      <enum
        desc="Additional information. Contains nTuple style information"
        name="additionalInfo"
        access="PUBLIC" >

        <enumval name="RZVelo"     value = "1"   desc="number of RZVelo tracks"/>
        <enumval name="RZVeloBW"   value = "2"   desc="number of backward RZVelo tracks"/>
        <enumval name="Velo"       value = "3"   desc="number of 3D Velo tracks"/>
        <enumval name="PVMuon"     value = "4"   desc="number of muon tracks pointing to PV"/>
        <enumval name="BKMuon"     value = "5"   desc="number of muon tracks NOT pointing to PV"/>
        <enumval name="SPD"        value = "6"   desc="number of SPD hits"/>
        <enumval name="Calo"       value = "7"   desc="number of Calo hits"/>
        <enumval name="PV2D"       value = "10"  desc="number of 2D vertices"/>
        <enumval name="PV3D"       value = "11"  desc="number of 3D vertices"/>
        <enumval name="PU"         value = "13"  desc="number of PU vertices"/>
        <enumval name="LastGlobal" value = "20"  desc="The last official flag value. Private user variables should use flags greater than this value"/>

      </enum>
-->
      <attribute
        name="extraInfo"
        desc="Some addtional user information. Don't use directly. Use *Info() methods."
        type="ExtraInfo"
        setMeth="TRUE"
        getMeth="FALSE"
	/>

      <method
        name="extraInfo"
        const="TRUE"
        desc="ExtraInformation. Don't use directly, use hasInfo, info, addInfo..."
        type="const ExtraInfo"
	> 
	<code>
	  return m_extraInfo ;
	</code>
      </method>

      <method
        name="hasInfo"
        const="TRUE"
        desc="has information for specified key"
        argList="int key"
        type="bool"
	> 
	<code>
	  return m_extraInfo.end() != m_extraInfo.find( key ) ;
	</code>
      </method>

      <method
        name="addInfo"
        desc=" Add new information associated with the specified key. This method cannot be used to modify information for a pre-existing key."
        argList="const int key, const int info"
        type="bool"
	> 
	<code>
	  return m_extraInfo.insert( key , info ).second ;
	</code>
      </method>

      <method
        name="info"
        desc="extract the information associated with the given key. If there is no such infomration the default value will be returned."
        argList="const int key, const int def"
        type="int"
        const="TRUE"
	> 
	<code>
	  ExtraInfo::iterator i = m_extraInfo.find( key ) ;
	  return m_extraInfo.end() == i ? def : i->second ;
	</code>
      </method>

      <method
        name="eraseInfo"
        desc="erase the information associated with the given key"
        argList="int key"
        type="unsigned long"
	> 
	<code>
	  return m_extraInfo.erase( key ) ; 
	</code>
      </method>

      

    </class>

  </package>

</gdd>
