<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd" >

<gdd>

  <package name="PhysEvent">
<!-- ****************************************************************
     * Vertex                                                       *
     ****************************************************************-->

    <class 
      author="Patrick Koppenburg"
      desc="Physics analysis Vertex. It holds geometrical information and is part of the tree structure"
      name="Vertex"
      stdVectorTypeDef="TRUE"
      keyedContTypeDef="TRUE"
      id="802"
      >
      <import name="Event/VertexBase.h"/>
      <import name="Particle" soft="TRUE"/>

      <typedef
        type="VertexBase::ExtraInfo"
        def="ExtraInfo"
        desc="User information"
        access="PUBLIC"
	/>

      <enum
        desc="Describe how the vertex was made (NEED MORE)"
        name="CreationMethod"
        value="Unknown=0, Primary=LHCb::VertexBase::Primary, Unconstrained, MassConstrained, LastGlobal=10000"
        access="PUBLIC"
	/>

      <base name="VertexBase"/>
      &KeyedObject;
      <!-- The following line forces inclusion before HepPoint3D
      to get round CLHEP 1.9 bug with HEP_CC_NEED_SUB_WITHOUT_CONST -->

      <location name="User" place="Phys/User/Vertices"/>
      <location name="Production" place="Phys/Prod/Vertices"/>       

      <constructor
        argList="Vertex rhs"
        desc="Copy constructor, note that the product particles are cloned"
	initList="VertexBase(rhs), m_technique ( rhs.m_technique ), m_outgoingParticles( rhs.m_outgoingParticles )"
	/>

      <constructor
	argList="int key"
	explicit = "TRUE"
        desc="create a vertex with a selected key"
        initList = "VertexBase( key ), m_technique(Vertex::Unknown)"
	/>

      <constructor
        argList="const Gaudi::XYZPoint&amp; point"
        desc="Constructor from a point. Needed by some tools. @to-do Find a way to remove this implicit conversion!"
	initList="VertexBase(point), m_technique(Vertex::Unknown)"
	/>

      <method
        name="clone"
        desc="Clone vertex"
        type="LHCb::Vertex*"
        const="TRUE"
	virtual="TRUE"
	>
	<code>
          return new Vertex(*this);
	</code>
      </method>

      <attribute
        name="technique"
        desc="How the vertex was made"
        type="CreationMethod"
        init="Vertex::Unknown"
	/>

      <method
        name="isPrimary"
        desc="Is the vertex a primary?"
        type="bool"
        const="TRUE"
	virtual="TRUE"
	>
        <code>
          return Primary == m_technique ;
        </code>
      </method>

      <relation
        name="outgoingParticles"
        desc="Reference to outgoing particles"
        multiplicity="N"
        type="LHCb::Particle"
	/>

      <method
        name="outgoingParticlesVector"
	desc="Get outgoing particles as a LHCb::Particle::ConstVector"
	type="std::vector&lt;const LHCb::Particle*&gt;"
	const="TRUE"
        >
	<code>
	 std::vector&lt;const LHCb::Particle*&gt; out;
	  for (SmartRefVector&lt;LHCb::Particle&gt;::const_iterator i=m_outgoingParticles.begin();
	  i!=m_outgoingParticles.end();++i){
	  out.push_back(*i);
	  }
	  return out;
	</code>
      </method>


    </class>
  </package>

</gdd>
