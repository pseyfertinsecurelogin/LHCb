<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd" >

<gdd>

  <package name="PhysEvent">

<!-- ****************************************************************
     * FlavourTag class definition                                  *
     ****************************************************************-->
      <class
       desc  = "The result of the tagging algorithm" 
       name  = "FlavourTag"
       author= "Marco Musy"
       id    = "805"
       stdVectorTypeDef = "TRUE"
      >

      &StlVector;

      <base name= "KeyedObject&lt;int&gt;"/>
      &KeyedObject;

      <import name= "Event/Particle"/>
      <import name= "Event/Tagger" />

      <location
        name ="Default"
        place="Phys/Tagging"
      />

      <enum
        desc  = "Possible result of the tagging algorithm"
        name  = "TagResult"
        value = "b = -1, bbar = 1, none = 0" 
        access= "PUBLIC"
      />
      <constructor
        desc = "Copy constructor hack for windows..."
        argList  = "const FlavourTag&amp; c"
        initList = "KeyedObject&lt;int&gt;(), m_decision(c.m_decision), m_category(c.m_category), m_omega(c.m_omega), m_taggers(c.m_taggers), m_taggedB(c.m_taggedB)">
    <code/>
    </constructor>

      <attribute
        desc = "The result of the tagging algorithm"
        name = "decision"
        type = "int"
        init = "0"
      />
      <relation
        desc = "The B meson for which this tag has been made"
        name = "taggedB"
        type = "LHCb::Particle"
        multiplicity="1"
      />

      <attribute
        desc = "Category of tag"
        name = "category"
        type = "int"
        init = "0"
      />
      <attribute
        desc = "Wrong tag fraction (predicted)"
        name = "omega"
        type = "double"
        init = "0.50"
      />

      <attribute 
	desc    = "Vector of Taggers" 
	name    = "taggers" 
	type    = "std::vector&lt;LHCb::Tagger&gt;"
      />
      <method
        name    = "addTagger"
        type    = "void"
	argList = "LHCb::Tagger HAS"
        desc    = "add one Tagger">
        <code>  
          m_taggers.push_back(HAS); 
          return;
        </code>
      </method>

    </class>
  </package>

</gdd>
