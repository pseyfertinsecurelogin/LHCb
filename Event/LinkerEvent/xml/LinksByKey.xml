<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="LinkerEvent">

    <class 
      name     = "LinkReference"
      author   = "Olivier Callot"
      desc     = "Entry to get a reference to a keyed object" >
      &StlVector;

      <constructor 
        desc   = "Constructor with arguments" 
        argList= "int srcLinkID, int linkID, int key, int nextIndex, float weight">
        <code> 
m_srcLinkID = short( srcLinkID );
m_linkID    = short( linkID );
m_objectKey = key;
m_nextIndex = nextIndex;
m_weight    = weight;
        </code>
      </constructor>

      <attribute
        type   = "short"
        name   = "srcLinkID"
        desc   = "index of the source sontainer in the LinkManager" />
      <attribute
        type   = "short"
        name   = "linkID"
        desc   = "index of the target container in the LinkManager" />
      <attribute
        type   = "int"
        name   = "objectKey"
        desc   = "key of the object in the container" />
      <attribute
        type   = "int"
        name   = "nextIndex"
        desc   = "index of the next entry" />
      <attribute
        type   = "float"
        name   = "weight"
        desc   = "weight of the reference" />
    </class>


 
    <class 
      name        = "LinksByKey" 
      author      = "OlivierCallot" 
      desc        = "Link of an object to Keyed objects" 
      id          = "400">

      <base   name = "DataObject"/>
      &DataObject;
      <import name = "Event/LinkReference"/>
      <import name = "GaudiKernel/IDataProviderSvc" />
      <import name = "vector"  std="TRUE"/>
      <import name = "utility" std="TRUE"/>

      <constructor 
        desc      = "Default constructor, reserve space" >
        <code> 
m_keyIndex.reserve(1000);
m_linkReference.reserve(1000);
m_increasing = false;
        </code>
      </constructor>

      <attribute
	type      = "bool"
        name      = "increasing"
	setMeth   = "FALSE"
	getMeth   = "FALSE"
        desc      = "Type of ordering" />

      <attribute
        type      = "std::vector&lt;std::pair&lt;int,int&gt; &gt;"
        name      = "keyIndex"
	setMeth   = "FALSE"
        desc      = "List of linked objects" />

      <attribute
	type      = "std::vector&lt;LHCb::LinkReference&gt;"
        name      = "linkReference"
	setMeth   = "FALSE"
        desc      = "List of references" />

      <attribute
	type      = "unsigned int"
	name      = "sourceClassID"
	desc      = "Class ID of the source of the Link"/>

      <attribute
	type      = "unsigned int"
	name      = "targetClassID"
	desc      = "Class ID of the target of the Link"/>

      <method
        type      = "void"
        name      = "setIncreasing"
        desc      = "Define the increasing order for the references" >
        <code> m_increasing = true; </code>
      </method>

      <method
        type      = "void"
        name      = "setDecreasing"
        desc      = "Define the decreasing order for the references" >
        <code> m_increasing = false; </code>
      </method>

      <method
        type      = "void"
        name      = "resolveLinks"
        argList   = "IDataProviderSvc* eventSvc"
 	desc      = "Get the pointers to the linked containers" />

      <method
        type      = "void"
        name      = "addReference"
        argList   = "int srcKey, int srcLinkID, int destKey, int destLinkID, double weight=1."
	desc      = "Add a reference to the specified key" />

      <method
        type      = "bool"
        name      = "firstReference"
        const     = "TRUE"
        desc      = "Retrieve the first LinkReference for this key" >

        <arg type="int" name = "key" inout="BYVALUE"/>
        <arg type="DataObject*" name = "container" inout="BYVALUE" const="TRUE"/>
        <arg type="LHCb::LinkReference" name="reference" const="FALSE" inout="BOTH"/>

      </method>

      <method
        type      = "bool"
        name      = "nextReference"
        const     = "TRUE"
        desc      = "Retrieve the next LinkReference for this key" >

        <arg type="LHCb::LinkReference" name="reference" const="FALSE" inout="BOTH"/>

      </method>

      <method
        type      = "int"
        name      = "firstSource"
        const     = "TRUE"
        desc      = "Retrieve the first key for this LinkReference" >

        <arg 
          type  = "LHCb::LinkReference" 
          name  = "reference" 
          const = "FALSE" 
          inout = "BOTH"/>
        <arg 
          type  = "std::vector&lt;std::pair&lt;int,int&gt; &gt;::const_iterator" 
          name  = "iter" 
          inout = "BOTH"/>
      </method>

      <method
        type      = "int"
        name      = "nextSource"
        const     = "TRUE"
        desc      = "Retrieve the next key for this LinkReference" >
       <arg 
          type  = "LHCb::LinkReference" 
          name  = "reference" 
          const = "FALSE" 
          inout = "BOTH"/>
        <arg 
          type  = "std::vector&lt;std::pair&lt;int,int&gt; &gt;::const_iterator" 
          name  = "iter" 
          inout = "BOTH"/>
 
      </method>

      <method
        type    = "int"
        name    = "linkID"
        const   = "TRUE"
        argList = "const DataObject* obj"
        desc    = "Returns the LinkManager linkID for this data object (Container)" />

      <method
        type    = "bool"
        name    = "findIndex"
        access  = "PROTECTED"
        const   = "TRUE"
        desc    = "Returns the index of the key in m_keyIndex. True if key exist, else inserting position" >
        <arg type = "int" name = "key" inout="BYVALUE"/>
        <arg type = "int" name = "index" inout = "BOTH" />
      </method>

      <method
        type   = "void"
        name   = "reset"
        desc   = "Reset the content of the objects">
        <code> m_keyIndex.clear(); m_linkReference.clear();</code>
      </method>

    </class>

  </package>
</gdd>
