<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='MCEvent'>
<!-- ****************************************************************
     * MCVertex                                                     *
     ****************************************************************-->

    <class
      author="Gloria Corti, revised by P. Koppenburg"
      desc="Monte Carlo vertex information" 
      name="MCVertex"
      id="220"
      stdVectorTypeDef="TRUE"
      location="MC/Vertices"
    >
       &KeyedObject;
       <import name="GaudiKernel/Point3DTypes.h"/>
       <import name="GaudiKernel/Point4DTypes.h"/>
       <import name="MCParticle" soft="TRUE"/>
       <enum
        desc="Describe the physics process related to the vertex"
        name="MCVertexType"
        value="Unknown=0, ppCollision, DecayVertex, OscillatedAndDecay, HadronicInteraction=100, Bremsstrahlung, PairProduction, Compton, DeltaRay, PhotoElectric, Annihilation, RICHPhotoElectric, Cerenkov, RichHpdBackScat, GenericInteraction, LHCHalo=200, MuonBackground=300, MuonBackgroundFlat, MuonBackgroundSpillover, WorldLimit=400, KinematicLimit"
        access="PUBLIC"
       />
       <base name="KeyedObject&lt;int&gt;"/>

       <constructor 
           desc     = "Copy Constructor" 
           argList  = "const LHCb::MCVertex* right"
           initList = "KeyedObject&lt;int&gt;(), m_position(right->position()), m_time(right->time()), m_type(right->type()), m_mother(right->mother()), m_products(right->products())" 
           > <code/> 
       </constructor>

      <method
        name="clone"
        desc="Clone this MCVertex. Returns a pointer to a new MCVertex (user must take ownership)"
        type="LHCb::MCVertex*"
        const="TRUE"
        >
        <code>
          return new LHCb::MCVertex(this);
        </code>
      </method>

      <method
        name="cloneWithKey"
        desc="Clone this MCVertex including key. Returns a pointer to a new MCVertex (user must take ownership)"
        type="LHCb::MCVertex*"
        const="TRUE"
        >
        <code>
           LHCb::MCVertex *clone = new LHCb::MCVertex(this);
           clone -> setKey(this->key());
          return clone;
        </code>
      </method>
       <attribute
        desc="Position in LHCb reference system" 
        name="position"
        type="Gaudi::XYZPoint"
        init="0.0, 0.0, 0.0"
       />
       <attribute
        desc="Time since pp interaction"
        name="time"
        type="double"
        init="0.0"
       />
       <method
        desc="position time 4-vector"
        name="position4vector"
        type="const Gaudi::XYZTPoint"
        const="TRUE"
       >
       <code>return Gaudi::XYZTPoint(m_position.X(),m_position.Y(), m_position.Z(), m_time );</code>
       </method>
       <attribute
        desc="How the vertex was made"
        name="type"
        type="MCVertexType"
        init="MCVertex::Unknown"
       />
       <relation
        desc="Pointer to parent particle that decay or otherwise end in this vertex"
        name="mother"
        type="LHCb::MCParticle"
       />
       <relation
        desc="Pointer to daughter particles"
        multiplicity="N"
        name="products"
        type="LHCb::MCParticle"
       />
       <method
        const="TRUE"
        desc="Returns true if this vertex is a primary vertex"
        name="isPrimary"
        type="bool"
       >
         <code> return m_type == MCVertex::ppCollision ; </code>
       </method>
       <method
        const="TRUE"
        desc="Returns true if this vertex is a decay vertex"
        name="isDecay"
        type="bool"
       >
         <code> 
  return ((m_type == MCVertex::DecayVertex) || 
          (m_type == MCVertex::OscillatedAndDecay))  ; 
       </code>
       </method>
       <method
        const="TRUE"
        desc="Get primary vertex up the decay tree"
        name="primaryVertex"
        type="const LHCb::MCVertex*"
       >
         <code> 
  return ( this->isPrimary() ? this : ( m_mother!=0 ? m_mother->primaryVertex() : NULL ) ); 
         </code>
       </method>
       <method
          name    = "fillStream"
          desc    = "Print this MCVertex in a human readable way"
          type    = "std::ostream&amp;"
          virtual = "FALSE"
          const   = "TRUE">
          <arg
            type = "std::ostream"
            name = "s"/>
       </method>
     </class>
  </package>
</gdd>
