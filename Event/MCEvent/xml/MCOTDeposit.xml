<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>

<gdd>
  
  <package name="MCEvent">
   
    <class name="MCOTDeposit" 
	   location="/Event/MC/OT/Deposits" 
	   id="8003" 
	   author="Jeroen van Tilburg" 
	   desc="MCHits are converted to MCOTDeposits, which are then used to create MCOTTimes"
	   contObjectTypeDef="TRUE"
	   stdVectorTypeDef="TRUE">
      <base name="ContainedObject" />
      &ContainedObject;

      <import name="Kernel/OTChannelID" />
      <import name="Event/MCHit" />

      <enum name="Types"
            desc="Deposit type enumerations"
            strTypConv="TRUE"
            unknownValue="TypeUnknown"
            access="PUBLIC">
        <enumval name="TypeUnknown" value="0" desc="Unknown deposit type" />
        <enumval name="Signal"      desc="Signal deposit from MCHit" />
        <enumval name="Noise"       desc="Noise deposit" />
        <enumval name="XTalk"       desc="X-talk deposit" />
        <enumval name="DoublePulse" desc="Two hits within the same window" />
      </enum>
      
      <!--       <enum name="Ambiguity" -->
      <!--             desc="Deposit type enumerations" -->
      <!--             strTypConv="TRUE" -->
      <!--             unknownValue="TypeUnknown" -->
      <!--             access="PUBLIC"> -->
      <!--         <enumval name="TypeUnknown" value="0" desc="Unknown deposit type" /> -->
      <!--         <enumval name="Signal"      desc="Signal deposit from MCHit" /> -->
      <!--         <enumval name="Noise"       desc="Noise deposit" /> -->
      <!--         <enumval name="XTalk"       desc="X-talk deposit" /> -->
      <!--         <enumval name="DoublePulse" desc="Two hits within the same window" /> -->
      <!--       </enum> -->
      
      <!-- First we initialize the "attributes" then the "relations" -->
      <constructor argList="const LHCb::MCOTDeposit::Types&amp; aType, 
                            const LHCb::MCHit* aMCHit, 
                            const LHCb::OTChannelID&amp; aChannel, 
                            const double&amp; aTime, 
                            const double&amp; aDistance, 
                            const int&amp; ambiguity" 
                   initList="m_type(aType),
                             m_channel(aChannel),
                             m_time(aTime),
                             m_driftDistance(aDistance),
                             m_ambiguity(ambiguity),
                             m_mcHit(aMCHit)"
		   desc="constructor with arguments">
        <code></code>
      </constructor>
    
      <method name="addTime" 
	      argList="double aTime" 
	      desc="add a time to the time">
       <code>  m_time += aTime; </code>
      </method>
      
      <method type="void" 
	      name="setTdcTime" 
	      argList="unsigned tdcTime" 
	      desc="set the TDC time in the OTChannelID">
        <code> m_channel.setTdcTime(tdcTime); </code>
      </method>
      
      <method type="unsigned" 
	      name="tdcTime" 
	      const="TRUE" 
	      desc="get the TDC-time from the OTChannelID">
        <code> return channel().tdcTime(); </code>
      </method>

      <!-- is? methods -->
      <method type="bool"
	      name="isSignal"
	      const="TRUE"
	      desc="return true if signal">
	<code> return ( Signal == type() ); </code>
      </method>

      <method type="bool"
	      name="isNoise"
	      const="TRUE"
	      desc="return true if noise">
	<code> return ( Noise == type() ); </code>
      </method>
      
      <method type="bool"
	      name="isXTalk"
	      const="TRUE"
	      desc="return true if XTalk">
	<code> return ( XTalk == type() ); </code>
      </method>

      <method type="bool"
	      name="isDoublePulse"
	      const="TRUE"
	      desc="return true if double pulse">
	<code> return ( DoublePulse == type() ); </code>
      </method>

      <!-- The get method generated by GOD gives const access -->
      <!-- But we also want non const :(                      -->      
      <method type="LHCb::OTChannelID&amp;"
      	      name="channel"
      	      const="FALSE"
      	      desc="Get Non-const reference OTChannelID">
        <code> return m_channel; </code>
      </method>
      
      <!-- **** Attributes **** -->
      <attribute type="LHCb::MCOTDeposit::Types" 
		 name="type"
                 init="LHCb::MCOTDeposit::TypeUnknown"
		 setMeth="TRUE" 
		 getMeth="TRUE" 
		 desc="Deposit type" />
      
      <attribute type="LHCb::OTChannelID"
		 name="channel"
		 setMeth="FALSE"
		 getMeth="TRUE"
		 desc="OTChannelID" />
      
      <attribute type="double" 
		 name="time" 
		 desc="time" />
      
      <attribute type="double" 
		 name="driftDistance" 
		 desc="Drift distance to wire (used for cheating)" />
      
      <attribute type="int" 
		 name="ambiguity" 
		 desc="MC solution for the correct left/right ambiguity" />

      <!-- **** Relations **** -->
      <relation type="LHCb::MCHit" 
		name="mcHit"
		setMeth="FALSE" 
		getMeth="TRUE" 
		desc="Reference to MCHit that was converted to a MCOTDeposit" />

    </class>

  </package>

</gdd>
