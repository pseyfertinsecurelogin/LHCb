<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
<package name="MCEvent">

<!-- **************************************************************************
  * $Id: MCRichSegment.xml,v 1.10 2008-02-27 14:09:27 jonrob Exp $
  *****************************************************************************
  * XML-description of MCRichSegment class                                    *
  * author: Chris Jones   Christopher.Rob.Jones@cern.ch                       *
  * date:   2004-06-23                                                        *
  ************************************************************************* -->
        
<class 
        name             = "MCRichSegment"
        author           = "Christopher Jones    Christopher.Rob.Jones@cern.ch" 
        desc             = "The MC trajectory through a given radiator medium" 
        id               = "12414" 
        location         = "MC/Rich/Segments"
        keyedContTypeDef = "TRUE" >

        <base name="KeyedObject&lt;int&gt;"/>
        &KeyedContainer;

        <import name="vector" std="TRUE"/>
        <import name="Event/MCParticle"/>
        <import name="Event/MCRichTrack"         soft="TRUE"/>
        <import name="Event/MCRichHit"           soft="TRUE"/>
        <import name="Event/MCRichOpticalPhoton" soft="TRUE"/>
        <import name="GaudiKernel/Point3DTypes.h"/>
        <import name="GaudiKernel/Vector3DTypes.h"/>
        <import name="Kernel/RichDetectorType"/>
        <import name="Kernel/RichRadiatorType"/>
        
        <method 
                name  = "entryPoint" 
                const = "TRUE" 
                desc  = "Returns the entry point to the radiator medium"
                type  = "const Gaudi::XYZPoint&amp;">
                <code>
                   return m_trajectoryPoints.front();
                </code>
        </method>
        
        <method 
                name  = "exitPoint"
                const = "TRUE" 
                desc  = "Returns the exit point from the radiator medium"  
                type  = "const Gaudi::XYZPoint&amp;">
                <code>
                   return m_trajectoryPoints.back();
                </code>
        </method>
        
        <method 
                name  = "bestPoint"
                const = "TRUE" 
                desc  = "Returns the best position estimate for a given fractional position along the trajectory through the radiator medium"       
                type  = "Gaudi::XYZPoint">
                <arg const="TRUE" inout="BYVALUE" name="fraction" type="double"/>
        </method>

        <method 
                name  = "bestMomentum"
                const = "TRUE" 
                desc  = "Returns the best momentum estimate for a given fractional position along the trajectory through the radiator medium" 
                type  = "Gaudi::XYZVector">
                <arg const="TRUE" inout="BYVALUE" name="fraction" type="double"/>
        </method>
        
        <method 
                name  = "entryMomentum"
                const = "TRUE" 
                desc  = "Returns the momentum vector at the entry point to the radiator medium" 
                type  = "const Gaudi::XYZVector&amp;">
                <code>
                   return m_trajectoryMomenta.front();
                </code>
        </method>
        
        <method 
                name  = "exitMomentum"
                const = "TRUE" 
                desc  = "Returns the momentum vector at the exit point to the radiator medium" 
                type  = "const Gaudi::XYZVector&amp;">
                <code>
                   return m_trajectoryMomenta.back();
                </code>
        </method>
        
        <method 
                const = "TRUE" 
                desc  = "Returns the average segment momentum vector based on the given number of samples equally spread along the trajectory" 
                name  = "averageMomentum" 
                type  = "Gaudi::XYZVector">
                <arg const="TRUE" inout="BYVALUE" name="nsamples" type="unsigned int"/>
        </method>
            
        <method 
                name  = "pathLength" 
                const = "TRUE" 
                desc  = " Returns the path length of the trajectory through the radiator" 
                type  = "double">
                <code>
                   return sqrt((exitPoint()-entryPoint()).mag2());
                </code>
        </method>

        <method
                name  = "addToTrajectoryPoints"
                const = "FALSE"
                desc  = "Add given point to vector of trajectory points"
                type  = "void">
                <arg const="TRUE" name="point" type="Gaudi::XYZPoint"/>
                <code>
                   m_trajectoryPoints.push_back( point );
                </code>
        </method>

        <method
                name  = "addToTrajectoryMomenta"
                const = "FALSE"
                desc  = "Add given Momentum vector to vector of trajectory points"
                type  = "void">
                <arg const="TRUE" name="momentum" type="Gaudi::XYZVector"/>
                <code>
                   m_trajectoryMomenta.push_back( momentum );
                </code>
        </method>

        <attribute 
                desc = "Bit packed field containing detector information" 
                name = "historyCode" 
                init = "0" 
                type = "bitfield">
                <bitfield desc="The Rich detector"   length="2" name="rich"     type="Rich::DetectorType" getMeth="FALSE" setMeth="FALSE" />
                <bitfield desc="The radiator medium" length="5" name="radiator" type="Rich::RadiatorType" getMeth="FALSE" setMeth="FALSE" />
        </attribute>

       <method 
                name  = "rich" 
                const = "TRUE" 
                type  = "Rich::DetectorType"
                desc  = "The RICH detector">
                <code>
                   // Shift by -1 to convert packed representation to Rich::DetectorType
                   return (Rich::DetectorType)( ((m_historyCode &amp; richMask) &gt;&gt; richBits) - 1 );
                </code>
        </method>
          
        <method 
                desc = "set the RICH type" 
                name = "setRich">
                <arg const="TRUE" inout="BYVALUE" name="value" type="Rich::DetectorType"/>
                <code>
                  // Shift bit-packed representation by +1 to start numbering from 0 
                  const unsigned int val = (unsigned int)value + 1;
                  m_historyCode &amp;= ~richMask;
                  m_historyCode |= ((((unsigned int)val) &lt;&lt; richBits) &amp; richMask);
                </code>
        </method>

        <method 
                name  = "radiator" 
                const = "TRUE" 
                type  = "Rich::RadiatorType"
                desc  = "If Cherenkov radiation, the radiator medium">
                <code>
                   // Shift by -1 to convert packed representation to Rich::RadiatorType
                   return (Rich::RadiatorType)(((m_historyCode &amp; radiatorMask) &gt;&gt; radiatorBits) - 1);
                </code>
        </method>
          
        <method 
                desc = "set the radiator type" 
                name = "setRadiator">
                <arg const="TRUE" inout="BYVALUE" name="value" type="Rich::RadiatorType"/>
                <code>
                  // Shift bit-packed representation by +1 to start numbering from 0 
                  const unsigned int val = (unsigned int)value + 1;
                  m_historyCode &amp;= ~radiatorMask;
                  m_historyCode |= ((((unsigned int)val) &lt;&lt; radiatorBits) &amp; radiatorMask);
                </code>
        </method>
        
        <attribute 
                name = "trajectoryPoints"
                desc = "Vector of trajectory points through the radiator for this segment"  
                type = "std::vector&lt;Gaudi::XYZPoint &gt;"
        />
        
        <attribute 
                name = "trajectoryMomenta"
                desc = "The momentum vector of the particle for each trajectory step" 
                type = "std::vector&lt;Gaudi::XYZVector &gt;"
        />
         
        <relation 
                name = "mcParticle"
                desc = "Associated MCParticle"  
                type = "LHCb::MCParticle"
        />
        
        <relation 
                name = "MCRichTrack"
                desc = "Associated MCRichTrack"  
                type = "LHCb::MCRichTrack"
        />
         
        <relation 
                desc         = "Associated MCRichOpticalPhotons" 
                multiplicity = "N" 
                name         = "MCRichOpticalPhotons" 
                type         = "LHCb::MCRichOpticalPhoton"
        />

        <relation 
                desc         = "Associated MCRichHits" 
                multiplicity = "N" 
                name         = "MCRichHits" 
                type         = "LHCb::MCRichHit"
        />
        
</class>

</package>
</gdd>
