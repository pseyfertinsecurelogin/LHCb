<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='MCEvent'>
<!-- ****************************************************************
     * MCParticle                                                   *
     ****************************************************************-->

     <class
      author="Gloria Corti, revised by P. Koppenburg"
      desc="The Monte Carlo particle kinematics information"
      id="210"
      name="MCParticle"
      stdVectorTypeDef="TRUE"
      location="MC/Particles"
     >
       &KeyedObject;
       <import name="GaudiKernel/SystemOfUnits"/>
       <import name="GaudiKernel/Vector4DTypes"/>
       <import name="Kernel/ParticleID"/>
       <import name="MCVertex" soft="TRUE"/>
       <base name="KeyedObject&lt;int&gt;"/>
       <attribute
        desc="4-momentum-vector"
        name="momentum"
        type="Gaudi::LorentzVector"
        init="0.0, 0.0, 0.0, -1*Gaudi::Units::GeV" 
       />
       <constructor 
           desc     = "Copy Constructor" 
           argList  = "const LHCb::MCParticle* right"
           initList = "KeyedObject&lt;int&gt;(), m_momentum(right->momentum()), m_particleID(right->particleID()), m_originVertex(right->originVertex()), m_endVertices(right->endVertices())" 
           > <code/> </constructor>

      <method
        name="clone"
        desc="Clone this MCParticle. Returns a pointer to a new MCParticle (user must take ownership)"
        type="LHCb::MCParticle*"
        const="TRUE"
        >
        <code>
          return new LHCb::MCParticle(this);
        </code>
      </method>

      <method
        name="cloneWithKey"
        desc="Clone this MCParticle including key. Returns a pointer to a new MCParticle (user must take ownership)"
        type="LHCb::MCParticle*"
        const="TRUE"
        >
        <code>
          LHCb::MCParticle *clone = new LHCb::MCParticle(this);
          clone -> setKey(this->key());
          return clone;
        </code>
      </method>

       <attribute
        desc="Particle ID"
        name="particleID"
        type="LHCb::ParticleID"
        init="0"
       />
       <method
        const="TRUE"
        desc="Describe if a particle has oscillated"
        name="hasOscillated"
        type="bool"
       >
       </method>
       <method
        const="TRUE"
        desc="Retrieve virtual mass, i.e. sqrt(E^2-P^2)"
        name="virtualMass"
        type="double"
       >
         <code> return m_momentum.M(); </code>
       </method>
       <method
        const="TRUE"
        desc="Short-cut to pt value"
        name="pt"
        type="double"
       >
         <code> return m_momentum.Pt(); </code>
       </method>
       <method
        name="p"
        const="TRUE"
        desc="short cut for |P|" 
        type="double"
       > 
         <code> return m_momentum.R(); </code>
       </method>
       <method
        const="TRUE"
        desc="Pointer to parent particle"
        name="mother"
        type="const LHCb::MCParticle*"
       >
         <code>
           return ( originVertex() ? originVertex()->mother() : NULL ) ;
         </code>
       </method>
       <method
        const="TRUE"
        desc="Beta of the particle"
        name="beta"
        type="double"
       >
         <code>
           return ( m_momentum.E() > 0. ? m_momentum.R()/m_momentum.E() : 1.) ;
         </code>
       </method>
       <method
        const="TRUE"
        desc="Gamma of the particle"
        name="gamma"
        type="double"
       >
         <code>
           return ( m_momentum.M() > 0. ? m_momentum.E()/m_momentum.M() : -999.) ;
         </code>
       </method>
       <method
        const="TRUE"
        desc="Beta x Gamma of the particle"
        name="betaGamma"
        type="double"
       >
         <code>
           return ( m_momentum.M() > 0. ? m_momentum.R()/m_momentum.M() : -999.) ;
         </code>
       </method>
       <method
        const="TRUE"
        desc="Pseudorapidity of the particle"
        name="pseudoRapidity"
        type="double"
       >
         <code>
  #ifdef __INTEL_COMPILER         // Disable ICC remark from GenVector/eta.h
    #pragma warning(disable:1572) // Floating-point equality and inequality comparisons are unreliable
    #pragma warning(push)
  #endif
   return  m_momentum.eta() ;
  #ifdef __INTEL_COMPILER         // Re-enable ICC remark 1572
    #pragma warning(pop)
  #endif
         </code>
       </method>
       <relation
        desc="Pointer to origin vertex"
        name="originVertex"
        type="LHCb::MCVertex"
       />
       <relation
        desc="Vector of pointers to decay vertices"
        multiplicity="M"
        name="endVertices"
        type="LHCb::MCVertex"
       />
       <method
        const="TRUE"
        desc="Get primary vertex up the decay tree"
        name="primaryVertex"
        type="const LHCb::MCVertex*"
       >
         <code> 
           return ( originVertex() ? originVertex()->primaryVertex() : NULL ) ;
         </code>
       </method>

       <typedef
         type='KeyedContainer&lt;const MCParticle, Containers::HashMap&gt;'
         def='ConstContainer'
         desc='const MCParticle keyed container'
         access='PUBLIC'
       />

       <method
          name    = "fillStream"
          desc    = "Print this MCParticle in a human readable way"
          type    = "std::ostream&amp;"
          virtual = "FALSE"
          const   = "TRUE">
          <arg
            type = "std::ostream"
            name = "s"/>
       </method>

      <attribute 
                name = "flags"
                desc = "Bit-packed information on how this MCParticle was produced" 
                init = "0"
                type = "bitfield">
      <bitfield desc="Flag to indicate if this particle was produced as part of the signal decay tree" length="1" name="fromSignal" />
      </attribute>

     </class>
  </package>
</gdd>
