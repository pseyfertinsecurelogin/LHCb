<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Jaap Panman -->
<!--- Created : 2009-01-19 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name='LumiEvent'>


<!-- LumiIntegral Class -->

    <class
      name="LumiIntegral"
      author="Jaap Panman"
      desc="Accounting class for Lumi in FSR"
      stdVectorTypeDef="TRUE"
      keyedContTypeDef="TRUE"
      id="13502"
      serializers="TRUE"
      >


      <location name="Default"   
		place="/FileRecords/EOR/LumiIntegral"/>

      <base name="KeyedObject&lt;int&gt;"/>
      &KeyedObject;

      <import name="vector" std="TRUE"/>
      <import name="GaudiKernel/VectorMap" />
      <import name="Event/LumiFSR" />
      <import name="math.h" std="TRUE"/>


<!--
      <typedef
        type="std::vector&lt;  double &gt;"
        def="DoubleVector"
        desc="for method"
        access="PUBLIC"
	/>       
-->
      <typedef
        type="std::pair&lt;  int, double &gt;"
        def="ValuePair"
        desc="For User information"
        access="PUBLIC"
	/>       
 
      <typedef
        type="GaudiUtils::VectorMap&lt;  int, ValuePair &gt;"
        def="ExtraInfo"
        desc="User information"
        access="PUBLIC"
	/> 
  
      <typedef
        type="std::pair&lt;  int, longlong &gt;"
        def="LongValuePair"
        desc="For User information"
        access="PUBLIC"
	/>       
 
      <typedef
        type="GaudiUtils::VectorMap&lt;  int, LongValuePair &gt;"
        def="LongExtraInfo"
        desc="User information"
        access="PUBLIC"
	/> 

      <typedef
        type="std::vector&lt;unsigned int&gt;"
        def="RunNumbers"
        desc="Set of runNumbers"
        access="PUBLIC"
	/>

       <typedef
        type="std::vector&lt;std::string&gt;"
        def="FileIDs"
        desc="Set of file IDs"
        access="PUBLIC"
	/>


      <method
        desc="Assignment operator"
        name="operator="
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LumiIntegral" const='TRUE'/>
        <code>
   if ( this != &amp;rhs ) {
      m_runNumbers        = rhs.m_runNumbers;
      m_fileIDs           = rhs.m_fileIDs;
      m_extraInfo         = rhs.m_extraInfo;
   }
   return *this;
        </code>
      </method>

      <attribute 
	type = "RunNumbers"
	name = "runNumbers"
	desc = "Set of run numbers summed up in this job"
	/>
      
      <method
	type = "void"
	name = "addRunNumber"
	desc = "add a RunNumber to the set">
	<arg type = "unsigned int" name = "number"/> 
	<code>
	  m_runNumbers.push_back(number);
	</code>
      </method>

      <method
        name="hasRunNumber"
        const="TRUE"
        desc="has information for specified runNumber"
        argList="unsigned int number"
        type="bool"
	> 
	<code>
   return m_runNumbers.end() != find(m_runNumbers.begin(), m_runNumbers.end(), number ) ;
	</code>
      </method>

      <method
        desc="Addition operator"
        name="mergeRuns"
        type="RunNumbers"
	>
	<arg name="rhs" type="RunNumbers" const='TRUE'/>
        <code>
   // concatenate run number set (cannot use "set" - have to do it by hand!)
   RunNumbers::const_iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      if ( !hasRunNumber(*(iterB)) ) {
         m_runNumbers.push_back(*(iterB));
      }
   }
   
   return m_runNumbers;
        </code>
      </method>

      <attribute 
	type = "FileIDs"
	name = "fileIDs"
	desc = "Set of file IDs summed up in this job"
	/>
      
      <method
	type = "void"
	name = "addFileID"
	desc = "add a fileID to the set">
	<arg type = "std::string" name = "idString"/> 
	<code>
	  m_fileIDs.push_back(idString);
	</code>
      </method>

      <method
        name="hasFileID"
        const="TRUE"
        desc="has information for specified fileID"
        argList="std::string idString"
        type="bool"
	> 
	<code>
   return m_fileIDs.end() != find(m_fileIDs.begin(), m_fileIDs.end(), idString ) ;
	</code>
      </method>

      <method
        desc="Addition operator"
        name="mergeFileIDs"
        type="FileIDs"
	>
	<arg name="rhs" type="FileIDs" const='TRUE'/>
        <code>
   // concatenate fileID set (cannot use "set" - have to do it by hand!)
   FileIDs::const_iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      if ( !hasFileID(*(iterB)) ) {
         m_fileIDs.push_back(*(iterB));
      }
   }
   return m_fileIDs;
        </code>
      </method>

      <attribute
        name="extraInfo"
        desc="Some additional user information. Don't use directly. Use *Info() methods."
        type="ExtraInfo"
        setMeth="TRUE"
        getMeth="FALSE"
	/>

      <method
        name="extraInfo"
        const="TRUE"
        desc="ExtraInformation. Don't use directly, use hasInfo, info, addInfo..."
        type="const ExtraInfo"
	> 
	<code>
	  return m_extraInfo ;
	</code>
      </method>

      <method
        name="hasInfo"
        const="TRUE"
        desc="has information for specified key"
        argList="int key"
        type="bool" 
	> 
	<code>
	  return m_extraInfo.end() != m_extraInfo.find( key ) ;
	</code>
      </method>

      <method
        name="addInfo"
        desc=" Add new information associated with the specified key. This method cannot be used to modify information for a pre-existing key."
        argList="const int key, const int incr, const double count"
        type="bool"
	> 
	<code>
	  ValuePair info(incr, count);
	  return m_extraInfo.insert( key , info ).second ;
	</code>
      </method>

      <method
        name="info"
        desc="extract the information associated with the given key. If there is no such information the default value will be returned."
        argList="const int key, const ValuePair def"
        type="ValuePair"
        const="TRUE"
	> 
	<code>
	  ExtraInfo::iterator i = m_extraInfo.find( key ) ;
	  return m_extraInfo.end() == i ? def : i->second ;
	</code>
      </method>

      <method
        name="eraseInfo"
        desc="erase the information associated with the given key"
        argList="int key"
        type="int "
	> 
	<code>
	  return m_extraInfo.erase( key ) ; 
	</code>
      </method>


      <method
        desc="scales the values for existing keys with a vector of double"
        name="scale"
        type="ExtraInfo"
	>
	<arg name="scalefactor" type="std::vector &lt; double &gt; " const="TRUE"/>
	<!-- <arg name="scalefactor" type="DoubleVector" const="TRUE"/> -->
        <code> 
   // scale existing info values
   ExtraInfo::const_iterator infoIter;
   for (infoIter = m_extraInfo.begin(); infoIter != m_extraInfo.end(); infoIter++) {
      int key = (*infoIter).first;
      ValuePair value = (*infoIter).second;
      eraseInfo(key);
      double scale = scalefactor[key];
      addInfo( key, value.first, value.second * scale );
   }
   return m_extraInfo;
        </code>
      </method>

      <method
        desc="sums the values for existing keys and inserts a new key if needed"
        name="mergeInfo"
        type="ExtraInfo"
	>
	<arg name="rhs" type="ExtraInfo" const="TRUE"/>
        <code> 
   // sum info or add new key
   ExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      ValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( hasInfo(key) ) {
         eraseInfo(key);
      }
      addInfo( key, valueA.first+valueB.first, valueA.second+valueB.second );
   }
   return m_extraInfo;
        </code>
      </method>

      <method
        desc="sums the values for existing keys and inserts a new key if needed"
        name="mergeInfo"
        type="ExtraInfo"
	>
	<arg name="rhs" type="LongExtraInfo" const="TRUE"/>
        <code> 
   // sum info or add new key
   LongExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      LongValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( hasInfo(key) ) {
         eraseInfo(key);
      }
      addInfo( key, valueA.first + valueB.first, valueA.second + (double)valueB.second );
   }
   return m_extraInfo;
        </code>
      </method>

      <!--  ordinary merge -->
      <method
        desc="sums the values for existing keys normalized to *this"
        name="mergeInfoNormalized"
        type="ExtraInfo"
	>
	<arg name="rhs" type="ExtraInfo" const="TRUE"/>
	<arg name="factor" type="double" const="TRUE"/>
        <code> 
   // sum info or add new key
   ExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      ValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( valueB.first ) {
      	 if ( hasInfo(key) ) {
      	    eraseInfo(key);
      	 }
         double scale = (double)valueA.first/(double)valueB.first;
      	 addInfo( key, valueA.first, valueA.second + factor * valueB.second * scale );
      }
   }
   return m_extraInfo;
        </code>
      </method>

      <method
        desc="sums the values for existing keys normalized to *this"
        name="mergeInfoNormalized"
        type="ExtraInfo"
	>
	<arg name="rhs" type="LongExtraInfo" const="TRUE"/>
	<arg name="factor" type="double" const="TRUE"/>
        <code> 
   // sum info or add new key
   LongExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      LongValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( valueB.first ) {
      	 if ( hasInfo(key) ) {
      	    eraseInfo(key);
      	 }
         double scale = (double)valueA.first/(double)valueB.first;
      	 addInfo( key, valueA.first, valueA.second + factor * (double)valueB.second * scale );
      }
   }
   return m_extraInfo;
        </code>
      </method>

      <!--  merge - use -log from given key onwards -->
      <method
        desc="sums the values for existing keys normalized to *this"
        name="mergeInfoNormalized"
        type="ExtraInfo"
	>
	<arg name="rhs" type="ExtraInfo" const="TRUE"/>
	<arg name="factor" type="double" const="TRUE"/>
	<arg name="fromkey" type="int" const="TRUE" />
        <code> 
   // sum info or add new key
   ExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      ValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( valueB.first ) {
      	 if ( hasInfo(key) ) {
      	    eraseInfo(key);
      	 }

         // scale with the existing data except if factor == 0
         double scale;
         double usefactor;
         int increment;
         double initial;
         if ( factor == 0 ) {
           scale = 1.;
           usefactor = 1.;
           increment = valueB.first;
           initial = 0;
         } else {
           scale = (double)valueA.first/(double)valueB.first;
           usefactor = factor;
           increment = valueA.first;
           initial = valueA.second;
         }

         // add normalized - use -log from the from key
         double addition;
         if ( key &lt; fromkey ) {
            addition = usefactor * (double)valueB.second * scale;
         } else {
            double frac = (double)valueB.second/(double)valueB.first;
            if ( frac == 1.0 ) frac = 0.995;
            addition = usefactor * (-1.) * log( 1.0 - frac ) * (double)increment;
         }
      	 addInfo( key, increment, initial + addition );
      }
   }
   return m_extraInfo;
        </code>
      </method>

      <method
        desc="sums the values for existing keys normalized to *this"
        name="mergeInfoNormalized"
        type="ExtraInfo"
	>
	<arg name="rhs" type="LongExtraInfo" const="TRUE"/>
	<arg name="factor" type="double" const="TRUE"/>
	<arg name="fromkey" type="int" const="TRUE" />
        <code> 
   // sum info or add new key
   LongExtraInfo::iterator iterB;
   for ( iterB = rhs.begin(); iterB != rhs.end(); iterB++ ) {
      int key = (*iterB).first;
      LongValuePair valueB = (*iterB).second;
      ValuePair valueA = info (key, ValuePair(0,0));
      if ( valueB.first ) {
      	 if ( hasInfo(key) ) {
      	    eraseInfo(key);
      	 }

         // scale with the existing data except if factor == 0
         double scale;
         double usefactor;
         int increment;
         double initial;
         if ( factor == 0 ) {
           scale = 1.;
           usefactor = 1.;
           increment = valueB.first;
           initial = 0;
         } else {
           scale = (double)valueA.first/(double)valueB.first;
           usefactor = factor;
           increment = valueA.first;
           initial = valueA.second;
         }

         // add normalized - use -log from the from key
         double addition;
         if ( key &lt; fromkey ) {
            addition = usefactor * (double)valueB.second * scale;
         } else {
            double frac = (double)valueB.second/(double)valueB.first;
            if ( frac == 1.0 ) frac = 0.995;
            addition = usefactor * (-1.) * log( 1.0 - frac ) * (double)increment;
         }
      	 addInfo( key, increment, initial + addition );
      }
   }
   return m_extraInfo;
        </code>
      </method>


      <method
        desc="increments the values for existing keys and inserts a new key if needed"
        name="incrementInfo"
        argList="const int key, const double count"
        type="ExtraInfo"
	>
        <code> 
   // increment info or add new key, only if data exists
   if ( count != -1 ) {
      ValuePair value = info (key, ValuePair(0,0));
      if ( hasInfo(key) ) {
         eraseInfo(key);
      }
      addInfo( key, ++value.first, value.second+count );
   }
   return m_extraInfo;
        </code>
      </method>

      <method
        desc="Addition operator"
        name="operator+"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral" const="TRUE"/>   
        <code>   
   if ( this != &amp;rhs ) {
      // merge run number sets
      mergeRuns(rhs.runNumbers());
      // merge file ID sets
      mergeFileIDs(rhs.fileIDs());
      // merge the extraInfo
      mergeInfo(rhs.extraInfo());
   }
   return *this;
        </code>
      </method> 
 
      <method
        desc="Addition operator"
        name="operator+"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral*" const="TRUE"/>   
        <code>   

   return *this = *this + *rhs;
        </code>
      </method> 

      <method
        desc="Addition (increment) operator"
        name="operator+="
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral" const="TRUE"/>  
        <code>   
   if ( this != &amp;rhs ) {
      *this = *this + rhs;
   }
   return *this;
        </code>
      </method> 
 

      <method
        desc="Addition (increment) operator"
        name="operator+="
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral*" const="TRUE"/>   
        <code>   
   if ( this != rhs ) {   
      *this = *this + *rhs;
   }
   return *this;
        </code>
      </method> 
 

      <method
        desc="Addition operator"
        name="operator+"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR" const="TRUE"/>   
        <code>   

   // merge run number sets
   mergeRuns(rhs.runNumbers());
   // merge file ID sets
   mergeFileIDs(rhs.fileIDs());
   // merge the extraInfo
   mergeInfo(rhs.extraInfo());
   return *this;

        </code>
      </method> 
 
      <method
        desc="Addition operator"
        name="operator+"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR*" const="TRUE"/>   
        <code>   
   return *this = *this + *rhs;
        </code>
      </method> 
 
      <method
        desc="Addition (increment) operator"
        name="operator+="
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR" const="TRUE"/>  
        <code>   
   return *this + rhs;
        </code>
      </method> 
 

      <method
        desc="Addition (increment) operator"
        name="operator+="
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR*" const="TRUE"/>   
        <code>   

   return *this + *rhs;

        </code>
      </method> 
 
      <!-- add/subtract the counter contents scaled to the increment of the first --> 
      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs.extraInfo(), factor);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral*" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs->extraInfo(), factor);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs.extraInfo(), factor);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR*" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs->extraInfo(), factor);
   return *this;
        </code>
      </method> 

 
      <!-- add/subtract the counter contents scaled to the increment of the first - using -log for later keys --> 
      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
	<arg name="fromkey" type="int" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs.extraInfo(), factor, fromkey);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiIntegral*" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
	<arg name="fromkey" type="int" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs->extraInfo(), factor, fromkey);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
	<arg name="fromkey" type="int" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs.extraInfo(), factor, fromkey);
   return *this;
        </code>
      </method> 

      <method
        desc="Add scaled to norm"
        name="addNormalized"
        type="LHCb::LumiIntegral&amp;"
	>
	<arg name="rhs" type="LHCb::LumiFSR*" const="TRUE"/>   
	<arg name="factor" type="double" const="TRUE" />
	<arg name="fromkey" type="int" const="TRUE" />
        <code>   
   // merge the extraInfo
   mergeInfoNormalized(rhs->extraInfo(), factor, fromkey);
   return *this;
        </code>
      </method> 

      <!-- readable printout -->
      <method
        name='fillStream'
        type='std::ostream&amp;'
        argList='std::ostream&amp; s'
        desc='intelligent printout'
        const='TRUE' >
        <code>

    std::ostream&amp; ss = const_cast&lt; std::ostream&amp; &gt;(s);
    ss &lt;&lt; "{ "
       &lt;&lt; " runs : " ; 

    RunNumbers::const_iterator run;
    for ( run = m_runNumbers.begin(); run != m_runNumbers.end(); run++ ) {
      ss &lt;&lt; *run &lt;&lt; " ";
    }
    LHCb::LumiIntegral::FileIDs::const_iterator file;
    ss &lt;&lt; " files : " ; 
    for ( file = m_fileIDs.begin(); file != m_fileIDs.end(); file++ ) {
      ss &lt;&lt; *file &lt;&lt; " ";
    }

    // overall sum info
    ss &lt;&lt; " info (key/incr/integral) : " ; 
    ExtraInfo::const_iterator infoIter;
    for (infoIter = m_extraInfo.begin(); infoIter != m_extraInfo.end(); infoIter++) {
      // get the key and value of the input info
      int key = infoIter->first;
      LHCb::LumiIntegral::ValuePair values = infoIter->second;
      int incr = values.first;
      double count = values.second;
      ss &lt;&lt; key &lt;&lt; " " 
         &lt;&lt; incr &lt;&lt; " " 
         &lt;&lt; count &lt;&lt; " / ";
    }
    ss &lt;&lt; " }"; 

    return ss;
        </code>
      </method>


    </class>

  </package>


</gdd>
