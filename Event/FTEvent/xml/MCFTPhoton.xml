<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Violaine Bellee, Julian Wishahi -->
<!--- Created : 2016-10-24 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name="FTEvent">
    <class name   = "MCFTPhoton"
           id     = "14005"
           author = "Violaine Bellee, Julian Wishahi"
           desc   = "This class represents all photons exiting a fibre mat as a result of the crossing MCHits."
           serializers="FALSE">
      <import   name = "Event/MCHit" />
      <location name = "Default"   place="MC/FT/Photons"   />

      <template name = "KeyedObjectDict" t1="unsigned int"/>
      <base     name = "KeyedObject&lt;unsigned int&gt;" />
      &KeyedObject;

      <constructor  desc     = "Constructor"
                    argList  = "unsigned int sensDetID">
        <code> 
          this->setKey(sensDetID); 
        </code>
      </constructor>      

      <constructor desc     = "Constructor"
       argList  = "unsigned int sensDetID, double nPhotons, const LHCb::MCHit* mcHit, double time, double wavelength, double posX, double posZ, double dXdY, double dZdY, bool isReflected">
        <code> 
          this->setKey(sensDetID); 
          m_nPhotonsVec.push_back(nPhotons);
          m_mcHitVec.push_back(mcHit);
          m_timeVec.push_back(time);
          m_wavelengthVec.push_back(wavelength);
          m_posXVec.push_back(posX);
          m_posZVec.push_back(posZ);
          m_dXdYVec.push_back(dXdY);
          m_dZdYVec.push_back(dZdY);
          m_isReflectedVec.push_back(isReflected);
        </code>
      </constructor>

      <destructor  desc="destructor">
        <code> // dummy  </code>
      </destructor>

      <method   name   = "sensDetID"
                desc   = "Retrieve the sensDetID, key of the object"
                type   = "unsigned int"
                const  = "TRUE"
                access = "PUBLIC">
        <code> return key(); </code>
      </method>

      <method   name    = "addPhotons"
                desc    = "Add number of photons, their associated MCHit, exit time, wavelength, if reflected"
                type    = "void"
                argList = "double nPhotons, const LHCb::MCHit* mcHit, double time, double wavelength, double posX, double posZ, double dXdY, double dZdY, bool isReflected "
                access  = "PUBLIC">
        <code> 
          m_nPhotonsVec.push_back(nPhotons);
          m_mcHitVec.push_back(mcHit);
          m_timeVec.push_back(time);
          m_wavelengthVec.push_back(wavelength);
          m_posXVec.push_back(posX);
          m_posZVec.push_back(posZ);
          m_dXdYVec.push_back(dXdY);
          m_dZdYVec.push_back(dZdY);
          m_isReflectedVec.push_back(isReflected);
        </code>
      </method>

      <attribute  name   = "mcHitVec"
                  desc   = "Vector of MCHits"
                  type   = "std::vector &lt; const LHCb::MCHit* &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "nPhotonsVec"
                  desc   = "Vector of number of photons"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "timeVec"
                  desc   = "Vector of exit times of the photons at the fibre ends"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "wavelengthVec"
                  desc   = "Vector of exit wavelengths of the photons at the fibre ends"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "posXVec"
                  desc   = "Vector of x coordinates of the exit points of the photons at the fibre ends (local coordinates)"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "posZVec"
                  desc   = "Vector of z coordinates of the exit points of the photons at the fibre ends (local coordinates)"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "dXdYVec"
                  desc   = "Vector of dx/dy of the direction vector of the photons at the fibre ends (local coordinates)"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "dZdYVec"
                  desc   = "Vector of dz/dy of the direction vector of the photons at the fibre ends (local coordinates)"
                  type   = "std::vector &lt; double &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "isReflectedVec"
                  desc   = "Vector of isReflected flags"
                  type   = "std::vector &lt; bool &gt;"
                  setMeth = "FALSE"
                  access = "PRIVATE"/>


    </class>
  </package>
</gdd>
