<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Violaine Bellee, Julian Wishahi -->
<!--- Created : 2016-10-24 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name="FTEvent">
    <class name   = "MCFTPhotons"
           id     = "14005"
           author = "Violaine Bellee, Julian Wishahi"
           desc   = "This class represents all photons exiting a fibre mat as a result of the crossing MCHits."
           serializers="FALSE">
      <import   name = "Event/MCHit" />
      <location name = "Default"   place="MC/FT/Photons"   />

      <template name = "KeyedObjectDict" t1="unsigned int"/>
      <base     name = "KeyedObject&lt;unsigned int&gt;" />
      &KeyedObject;

      <constructor desc     = "Constructor"
		   argList  = "unsigned int uniqueMatId, int nPhotons, LHCb::MCHit* mcHit, double exitTime, bool isReflected">
        <code> 
          this->setKey(uniqueMatId); 
          m_nPhotonsVec.push_back(nPhotons);
	        m_mcHitVec.push_back(mcHit);
	        m_exitTimeVec.push_back(exitTime);
          m_isReflectedVec.push_back(isReflected);
	      </code>
      </constructor>

      <destructor  desc="destructor">
        <code> // dummy  </code>
      </destructor>

      <method   name   = "getUniqueMatID"
                desc   = "Retrieve the uniqueMatID, key of the object"
                type   = "unsigned int"
                const  = "TRUE"
                access = "PUBLIC">
        <code> return key(); </code>
      </method>

      <method   name    = "addPhotons"
                desc    = "Add number of photons, their associated MCHit, exit time, if reflected"
                type    = "void"
		            argList = "int nPhotons, const LHCb::MCHit* mcHit, double exitTime, bool isReflected "
                access  = "PUBLIC">
        <code> 
          m_nPhotonsVec.push_back(nPhotons);
	        m_mcHitVec.push_back(mcHit);
	        m_exitTimeVec.push_back(exitTime);
          m_isReflectedVec.push_back(isReflected);
	      </code>
      </method>

      <attribute  name   = "mcHitVec"
                  desc   = "Vector of MCHits"
                  type   = "std::vector &lt; const LHCb::MCHit* &gt;"
		              setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "nPhotonsVec"
                  desc   = "Vector of number of photons"
                  type   = "std::vector &lt; int &gt;"
		              setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "exitTimeVec"
                  desc   = "Vector of exit times of the photons at the fibre ends"
                  type   = "std::vector &lt; double &gt;"
		              setMeth = "FALSE"
                  access = "PRIVATE"/>

      <attribute  name   = "isReflectedVec"
                  desc   = "Vector of isReflected flags"
                  type   = "std::vector &lt; bool &gt;"
		              setMeth = "FALSE"
                  access = "PRIVATE"/>


    </class>
  </package>
</gdd>
