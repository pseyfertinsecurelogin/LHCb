<?xml version="1.0" encoding="ISO-8859-1"?>
<!--- $Id: -->
<!--- Author  : Eric Cogneras -->
<!--- Created : 2012-05-15 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name="FTEvent">
    <class name   = "MCFTDeposit"
           id     = "14001"
           author = "Eric Cogneras"
           desc   = "This class represents the total energy deposited in each FTChannelID by the crossing MCHits"
           serializers="FALSE">
      <import   name = "Kernel/FTChannelID" />
      <import   name = "Event/MCHit" />
      <location name = "Default"   place="MC/FT/Deposits"   />

      <template name = "KeyedObjectDict" t1="LHCb::FTChannelID"/>
      <base     name = "KeyedObject&lt;LHCb::FTChannelID&gt;" />
      &KeyedObject;

      <constructor desc     = "Constructor"
		   argList  = "LHCb::FTChannelID&amp; id, LHCb::MCHit* aHit, double energy, double energyRef, double time, double timeRef">
        <code> this->setKey(id); 
	  m_mcHitVec.push_back(aHit);
	  m_energyVec.push_back(energy);
	  m_energyRefVec.push_back(energyRef);
	  m_timeVec.push_back(time);
	  m_timeRefVec.push_back(timeRef);
    m_thNoiseCont = 0;
    m_afterplCont = 0;
    m_xtalkCont = 0;
	</code>
      </constructor>

      <destructor  desc="destructor">
        <code> // dummy  </code>
      </destructor>

      <method    name   = "channelID"
                 desc   = "Retrieve the FTChannelID, key of the object"
                 type   = "const LHCb::FTChannelID&amp;"
                 const  = "TRUE"
                 access = "PUBLIC">
        <code> return key(); </code>
      </method>

      <method    name   = "addMCHit"
                 desc   = "Add MCHit, energies and times to the relevant vectors"
                 type   = "void"
		 argList = "LHCb::MCHit* aHit, double energy, double energyRef, double time, double timeRef "
                 access = "PUBLIC">
        <code> 
	  m_mcHitVec.push_back(aHit);
	  m_energyVec.push_back(energy);
	  m_energyRefVec.push_back(energyRef);
	  m_timeVec.push_back(time);
	  m_timeRefVec.push_back(timeRef);
	</code>
      </method>

      <method    name    = "addNoise"
                 desc    = "keep track of added Noise"
                 type    = "void"
                 argList = "int noiseType, int noiseValue"
                 access  = "PUBLIC">
          <code>
            if(noiseType==0) { m_thNoiseCont += noiseValue; }
            if(noiseType==1) { m_afterplCont += noiseValue; }
            if(noiseType==2) { m_xtalkCont   += noiseValue; }
          </code>
      </method>

      <attribute name   = "mcHitVec"
                 desc   = "Vector of MCHits"
                 type   = "std::vector &lt; LHCb::MCHit* &gt;"
		 setMeth = "FALSE"
                 access = "PRIVATE"/>

      <attribute name   = "energyVec"
                 desc   = "Vector of energy deposits"
                 type   = "std::vector &lt; double &gt;"
		 setMeth = "FALSE"
                 access = "PRIVATE"/>

      <attribute name   = "energyRefVec"
                 desc   = "Vector of energy deposits"
                 type   = "std::vector &lt; double &gt;"
		 setMeth = "FALSE"
                 access = "PRIVATE"/>

      <attribute name   = "timeVec"
                 desc   = "Vector of energy deposits"
                 type   = "std::vector &lt; double &gt;"
		 setMeth = "FALSE"
                 access = "PRIVATE"/>

      <attribute name   = "timeRefVec"
                 desc   = "Vector of energy deposits"
                 type   = "std::vector &lt; double &gt;"
		 setMeth = "FALSE"
                 access = "PRIVATE"/>

      <attribute name   = "thNoiseCont"
                 desc   = "Counter for thermal noise PEs"
                 type   = "int"
                setMeth = "FALSE"
                 access = "PRIVATE" />
      <attribute name   = "afterplCont"
                 desc   = "Counter for afterpulse PEs"
                 type   = "int"
                setMeth = "FALSE"
                 access = "PRIVATE" />
      <attribute name   = "xtalkCont"
                 desc   = "Counter for xtalk PEs"
                 type   = "int"
                setMeth = "FALSE"
                 access = "PRIVATE" />

    </class>
  </package>
</gdd>
