<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration

    This software is distributed under the terms of the GNU General Public
    Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<!--- Author  : Olivier Callot -->
<!--- Created : 2012-05-11 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package  name = "FTEvent">

    <class  name        = "FTLiteCluster"
            author      = "Olivier Callot"
            desc        = "Lite cluster, all information on 32 bits for fast container"
            location    = "Raw/FT/LiteClusters"
            final       = "TRUE"
            defaultdestructor = "FALSE"
            serializers = "FALSE" >

      <import name="Kernel/MultiIndexedContainer"/>
      <import name="Kernel/FTChannelID"/>
      <import name="Kernel/SiDataFunctor"/>

      <typedef desc   = "channelID type"
               type   = "LHCb::FTChannelID"
               def    = "chan_type"
               access = "PUBLIC" />
      
      <typedef desc   = "finding policy"
               type   = "SiDataFunctor::CompareByChannel &lt; LHCb::FTLiteCluster &gt;"
               def    = "findPolicy"
               access = "PUBLIC " /> 
      
      <typedef desc   = "fast container of Lite Cluster"
               type   = "LHCb::Container::MultiIndexedContainer&lt;LHCb::FTLiteCluster,48&gt;"
               def    = "FTLiteClusters"
               access = "PUBLIC" />
      
      <attribute type    = 'bitfield'
                 name    = 'liteCluster'
                 desc    = 'Lite Cluster'
                 setMeth = "FALSE"
                 getMeth = "FALSE">
        
        <bitfield   name    = 'channelID'
                    length  = '20'
                    desc    = 'channelID'
                    setMeth = "FALSE"
                    getMeth = "FALSE"/>
        
        <bitfield name    = 'fraction'
                  length  = '1'
                  desc    = 'Fractional position'
                  setMeth = "FALSE"
                  getMeth = "FALSE"/>
        
        <bitfield name    = 'pseudoSize'
                  length  = '4'
                  desc    = 'number of cells in the cluster'
                  setMeth = "FALSE"
                  getMeth = "TRUE"/>
      </attribute>
      
      <constructor desc    = "Constructor" 
                   argList = 'LHCb::FTChannelID chan, int fraction, int pseudoSize'>
        <code>
          m_liteCluster = (chan &lt;&lt; channelIDBits) +
          (fraction &lt;&lt; fractionBits) +
          (pseudoSize &lt;&lt; pseudoSizeBits);
        </code>
      </constructor>

      <method name   = "channelID"
              type   = "LHCb::FTChannelID"
              access = "PUBLIC"
              desc   = "Returns the FT channel ID"
              const  = "TRUE">
        <code> return LHCb::FTChannelID( ( m_liteCluster &amp; channelIDMask) &gt;&gt; channelIDBits ); </code>
      </method>

      <method name   = "fraction"
              type   = "float"
              access = "PUBLIC"
              desc   = "returns the fraction of channel"
              const  = "TRUE">
        <code> return 0.5 * ( ( m_liteCluster &amp; fractionMask ) &gt;&gt; fractionBits ); </code>
      </method>

      <method name   = "fractionBit"
              type   = "int"
              access = "PUBLIC"
              desc   = "returns the fraction of channel as the integer value (0 or 1)"
              const  = "TRUE">
        <code> return (m_liteCluster &amp; fractionMask ) &gt;&gt; fractionBits ; </code>
      </method>

    </class>
    
  </package>
</gdd>
