<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration

    This software is distributed under the terms of the GNU General Public
    Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
<!--- $Id: -->
<!--- Author  : Tomasz Szumlak -->
<!--- Created : 2006-06-01 -->

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
 <package name="VeloEvent">
  <class 
   name="VeloTELL1Data"
   author="Tomasz Szumlak"
   desc="The VeloTELL1Data is keyed data object, with sensor number as a key, and is meant to store non-zero suppressed data (2304 ADC samples, 2048 pedestals or 256 Headers)"
  id="4005"
  >

  <desc> *
 *
 *  The class is meant to store Raw Non-Zero Suppressed data
 *  from Velo sensor 
 *
 *</desc>

   <import name = "Tell1Kernel/VeloTell1Core"/>
   <import name = "cassert" std="TRUE" />
   <import name = "vector"  std="TRUE" />
   <template name="KeyedObjectDict" t1="int"/>
   <base name="KeyedObject&lt;int&gt;"/>

   &KeyedContainer;

   <location name="ADCs" place="Raw/Velo/DecodedADC"/>
   <location name="Tell1ADCs" place="Raw/Velo/RealAndDummy"/>
   <location name="Pedestals" place="Raw/Velo/DecodedPed"/>
   <location name="Headers" place="Raw/Velo/DecodedHeaders"/>
   <location name="SimADCs" place="Raw/Velo/SimulatedADC"/>
   <location name="SimPeds" place="Raw/Velo/SimulatedPed"/>
   <location name="SubPeds" place="Raw/Velo/SubtractedPed"/>
   <location name="PedSubADCs" place="Raw/Velo/SubtractedPedADCs"/>
   <location name="FIRCorrectedADCs" place="Raw/Velo/FIRCorrected"/>
   <location name="BitLimitADCs" place="Raw/Velo/ADC8Bit"/>
   <location name="ReorderedADCs" place="Raw/Velo/ADCReordered"/>
   <location name="CMSuppressedADCs" place="Raw/Velo/ADCCMSuppressed"/>
   <location name="CMSNoise" place="Raw/Velo/CMSNoise"/>
   <location name="MCMSCorrectedADCs" place="Raw/Velo/ADCMCMSCorrected"/>

   <constructor
    desc="constructor with key"
    initList="KeyedObject&lt;int&gt;(numberOfTELL1), m_decodedData(), m_dataType(dataType), m_isReordered(false), m_sensorType(0)"
   >
    <arg type="int" name="numberOfTELL1" const="TRUE"/>
    <arg type="int" name="dataType" const="TRUE"/>
   </constructor>

   <enum
    desc="Configuration constants depending on stored data type"
    name="NZSDataType"
    value="VeloFull=18, VeloPedestal=30, Headers=40"
    access="PUBLIC"
   />
    
   <enum
    desc="Different bank content"
    name="ALinkContent"
    value="HEADERS=4, FPGA_ALINKS=16, ADC_PER_ALINK=32, SENSOR_ALINKS=64"
    access="PUBLIC"
   />

   <enum
    desc="Strips"
    name="strips"
   value="DUMMY_CHANNELS=64, ERROR=99, INNER_STRIPS_1=170, INNER_STRIPS_2=171, INNER_SHIFT=192, OUTER_STRIPS_1=341, OUTER_STRIPS_2=342, PPFPGA_CHANNELS=512, PPFPGA_SHIFT=576, INNER_STRIPS=683, SENSOR_STRIPS=2048, ALL_STRIPS=2304"
   />
 
   <enum
    desc="Sensor types"
    name="SensType"
    value="PHI_SENSOR=1, R_SENSOR=2, PILE_UP=3"
    access="PUBLIC"
   />

   <attribute
    desc="Vector with decoded data"
    name="decodedData"
    type="std::vector&lt;signed int&gt;"
    setMeth="TRUE"
    getMeth="TRUE"
   />
  
   <attribute
    desc="Type of decoded data to be stored"
    name="dataType"
    type="int"
    setMeth="FALSE"
    getMeth="FALSE"
   />
   
   <attribute
    desc="Check if the data stored are reorderd"
    name="isReordered"
    type="bool"
    setMeth="TRUE"
    getMeth="TRUE"
   />

   <attribute
    desc="Sensor Type"
    name="sensorType"
    type="unsigned int"
    setMeth="TRUE"
    getMeth="TRUE"
   />

   <method
    desc="overloaded subscripting operator"
    name="operator[]"
    type="VeloTELL1::ALinkPair"
    access="PUBLIC"
    const="TRUE"
   >
    <arg name="ALinkNumber" type="unsigned int" const="TRUE"/>
     <code>
      int ALinkBegin=0, ALinkEnd=0;
      // use it only before reordering
      if(!m_isReordered){
        if(ALinkNumber&lt;ALinkContent::SENSOR_ALINKS){
          if(m_dataType==NZSDataType::Headers){
            ALinkBegin=ALinkNumber*ALinkContent::HEADERS;
            ALinkEnd=ALinkBegin+ALinkContent::HEADERS;
          }else if(m_dataType==NZSDataType::VeloPedestal){
            ALinkBegin=ALinkNumber*ALinkContent::ADC_PER_ALINK;
            ALinkEnd=ALinkBegin+ALinkContent::ADC_PER_ALINK;
          }else if(m_dataType==NZSDataType::VeloFull){
           unsigned int processor=ALinkNumber/ALinkContent::FPGA_ALINKS;
           ALinkBegin=(ALinkNumber+2*processor)*ALinkContent::ADC_PER_ALINK;
           ALinkEnd=ALinkBegin+ALinkContent::ADC_PER_ALINK;
          }
        }
      }
      //
      return { m_decodedData.begin()+ALinkBegin,
               m_decodedData.begin()+ALinkEnd };
     </code>
    </method>

    <method
     desc="Returns true if R type"
     name="isR"
     type="bool"
     access="PUBLIC"
     const="TRUE"
    >
     <code>
      return m_isReordered&amp;&amp;m_sensorType==SensType::R_SENSOR;
     </code>
    </method>

    <method
     desc="Returns true if Pile-Up type"
     name="isPileUp"
     type="bool"
     access="PUBLIC"
     const="TRUE"
    >
     <code>
      return m_isReordered&amp;&amp;m_sensorType==SensType::PILE_UP;
     </code>
    </method>

    <method
     desc="Returns true if Phi type"
     name="isPhi"
     type="bool"
     access="PUBLIC"
     const="TRUE"
    >
     <code>
      return m_isReordered&amp;&amp;m_sensorType==SensType::PHI_SENSOR;
     </code>
    </method>

    <method
     desc="return value of the charge deposited in a given channel"
     name="channelADC"
     type="signed int"
     access="PUBLIC"
     const="TRUE"
    >
     <arg name="channel" type="unsigned int" const="TRUE"/>
      <code>
       signed int adc=0;
       if(!m_isReordered&amp;&amp;m_dataType==NZSDataType::VeloFull){
         if(channel&lt;SENSOR_STRIPS){
           unsigned int processor=channel/strips::PPFPGA_CHANNELS;
           unsigned int index=channel+DUMMY_CHANNELS*processor;
           adc=m_decodedData[index];
         }
       }
       return adc;
      </code>
    </method>

    <method
     desc="return value of a pedestal"
     name="pedestalADC"
     type="signed int"
     access="PUBLIC"
     const="TRUE"
    >
     <arg name="channel" type="unsigned int" const="TRUE"/>
      <code>
       signed int ped=0;
       if(m_dataType==NZSDataType::VeloPedestal&amp;&amp;channel&lt;strips::SENSOR_STRIPS){
         ped=m_decodedData[channel];
       }
       return ped;
      </code>
     </method>

    <method
     desc="returns adc value for a given strip - valid after reordering"
     name="stripADC"
     type="signed int"
     access="PUBLIC"
     const="TRUE"
    >
     <arg name="strip" type="unsigned int" const="TRUE"/>
      <code>
       signed int adc=0;
       unsigned int localStrip=0, index=0;
       if(m_isReordered&amp;&amp;strip&lt;strips::SENSOR_STRIPS&amp;&amp;m_dataType!=NZSDataType::Headers){
         if(m_sensorType==SensType::R_SENSOR||m_sensorType==SensType::PILE_UP){
           unsigned int processor=strip/strips::PPFPGA_CHANNELS;
           index=strip+DUMMY_CHANNELS*processor;
           adc=m_decodedData[index];
         }else if(m_sensorType==SensType::PHI_SENSOR){
           if(strip&lt;strips::INNER_STRIPS){
             // pp_fpga 0
             if(strip&lt;strips::INNER_STRIPS_2){                           
               adc=m_decodedData[strip];
             // pp_fpga 1
             }else if(strip&lt;2*strips::INNER_STRIPS_2){
               localStrip=strip-strips::INNER_STRIPS_2;
               index=localStrip+strips::PPFPGA_SHIFT;
               adc=m_decodedData[index];
             // pp_fpga 2
             }else if(strip&lt;2*strips::INNER_STRIPS_2+strips::INNER_STRIPS_1){
               localStrip=strip-2*strips::INNER_STRIPS_2;
               index=localStrip+2*strips::PPFPGA_SHIFT;
               adc=m_decodedData[index];
             // pp_fpga 3
             }else if(strip&lt;3*strips::INNER_STRIPS_2+strips::INNER_STRIPS_1){
               localStrip=strip-(2*strips::INNER_STRIPS_2+strips::INNER_STRIPS_1);
               index=localStrip+3*strips::PPFPGA_SHIFT;
               adc=m_decodedData[index];
             }
          }else{
             // pp_fpga 0
             if(strip&lt;strips::INNER_STRIPS+strips::OUTER_STRIPS_1){
               localStrip=strip-strips::INNER_STRIPS;
               index=localStrip+strips::INNER_SHIFT; 
               adc=m_decodedData[index];
             // pp_fpga 1
             }else if(strip&lt;strips::INNER_STRIPS+2*strips::OUTER_STRIPS_1){
               localStrip=strip-(strips::INNER_STRIPS+strips::OUTER_STRIPS_1);
               index=localStrip+strips::PPFPGA_SHIFT+strips::INNER_SHIFT;
               adc=m_decodedData[index];
             // pp_fpga 2
             }else if(strip&lt;strips::INNER_STRIPS+2*strips::OUTER_STRIPS_1+strips::OUTER_STRIPS_2){
               localStrip=strip-(strips::INNER_STRIPS+2*strips::OUTER_STRIPS_1);
               index=localStrip+2*strips::PPFPGA_SHIFT+strips::INNER_SHIFT;
               adc=m_decodedData[index];
             // pp_fpga 3
             }else if(strip&lt;strips::INNER_STRIPS+3*strips::OUTER_STRIPS_1+strips::OUTER_STRIPS_2){
               localStrip=strip-(strips::INNER_STRIPS+2*strips::OUTER_STRIPS_1+strips::OUTER_STRIPS_2);
               index=localStrip+3*strips::PPFPGA_SHIFT+strips::INNER_SHIFT;
               adc=m_decodedData[index];
             }
           }
         }
       }else{
         adc=(-ERROR);
       }
       return ( adc );
      </code>
    </method>

    <method
     desc="returns vector with all decoded samples"
     name="data"
     type="std::vector&lt;signed int&gt;&amp;"
     access="PUBLIC"
     const="FALSE"
    >
     <code>
      return m_decodedData;
     </code>
    </method>
    
    <method
     desc="fill the vector with adc Velo data, use restricted within TELL1 algorithms"
     name="addALink"
     type="void"
     access="PUBLIC"
     const="FALSE"
    >
     <arg name="inVec" type="const std::vector&lt;signed int&gt;" const="FALSE"/>
      <code>
       m_decodedData.insert( m_decodedData.end(), inVec.begin(), inVec.end() );
       assert(m_decodedData.size()&lt;=strips::ALL_STRIPS);
      </code>
     </method>

  </class>  
 </package>
</gdd>
