/*****************************************************************************\
* (c) Copyright 2018 CERN for the benefit of the LHCb Collaboration           *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/
// Local
#include "PackerBaseAlg.h"

using namespace DataPacking;

//=============================================================================
// Standard constructor, initializes variables
//=============================================================================
template < class PACKER >
Pack<PACKER>::Pack( const std::string& name,
                    ISvcLocator* pSvcLocator )
  : GaudiAlgorithm ( name , pSvcLocator )
{
  declareProperty( "InputName" , m_inputName   = PACKER::unpackedLocation() );
  declareProperty( "OutputName", m_outputName  = PACKER::packedLocation()   );
  declareProperty( "PackingVersion",
                   m_version = (unsigned short int)PACKER::PackedDataVector::defaultPackingVersion() );
  declareProperty( "AlwaysCreateOutput",         m_alwaysOutput  = false     );
  declareProperty( "DeleteInput",                m_deleteInput   = false     );
  declareProperty( "EnableCheck",                m_enableCheck   = false     );
  declareProperty( "ClearRegistry",              m_clearRegistry = true      );
  //setProperty( "OutputLevel", MSG::VERBOSE );
}

template < class PACKER >
StatusCode Pack<PACKER>::initialize()
{
  const StatusCode sc = GaudiAlgorithm::initialize();
  if ( sc.isFailure() ) return sc;

  if ( msgLevel(MSG::DEBUG) )
    debug() << "Input '"    << rootInTES() << m_inputName
            << "' Output '" << rootInTES() << m_outputName << "'" << endmsg;

  return sc;
}

template < class PACKER >
StatusCode Pack<PACKER>::execute()
{
  // Check to see if the output data already exists.
  const bool outputOK = !exist<typename PACKER::PackedDataVector>(m_outputName);
  if ( !outputOK && msgLevel(MSG::DEBUG) )
  {
    debug() << "Output already exists at '" << m_outputName << "'" << endmsg;
  }

  // Only proceed if output doesn't exist
  if ( outputOK )
  {

    // Check to see if input exists
    const bool inputOK = exist<typename PACKER::DataVector>(m_inputName);
    if ( !inputOK && msgLevel(MSG::DEBUG) )
    {
      debug() << "Input missing at '" << m_inputName << "'" << endmsg;
    }

    // Pointer to packed data
    typename PACKER::PackedDataVector * pdata = nullptr;
    if ( inputOK || m_alwaysOutput )
    {
      // make new output data
      pdata = new typename PACKER::PackedDataVector();
      // give new container to Gaudi
      this->put( pdata, m_outputName );
    }

    // Only fill if all input OK
    if ( inputOK )
    {

      // Load the input data
      auto * data = this->get<typename PACKER::DataVector>(m_inputName);

      // set data version
      pdata->setVersion(data->version());

      // Set packing version number
      pdata->setPackingVersion(m_version);

      // Fill packed data
      m_packer.pack( *data, *pdata );

      if ( msgLevel(MSG::DEBUG) )
      {
        debug() << "Created " << pdata->data().size() << " data objects at '" << m_outputName << endmsg;
        debug() << " Unpacked Data Version  = " << (unsigned int)data->version() << endmsg;
        debug() << " Packed Data Version    = " << (unsigned int)pdata->version() << endmsg;
        debug() << " Packed Packing Version = " << (unsigned int)pdata->packingVersion() << endmsg;
      }

      // Packing checks
      if ( UNLIKELY(m_enableCheck) )
      {
        // make new unpacked output data object
        auto * unpacked = new typename PACKER::DataVector();

        // save in TES
        put( unpacked, m_inputName+"_PackingCheck" );

        // give same version as original
        unpacked->setVersion( data->version() );

        // unpack
        m_packer.unpack( *pdata, *unpacked );

        // run checks
        m_packer.check( *data, *unpacked ).ignore();

        // clean up after checks
        const auto sc = evtSvc()->unregisterObject( unpacked );
        if ( sc.isSuccess() ) { delete unpacked; }
        else { Error( "Problem unregistering data at "+m_inputName+"_PackingCheck" ).ignore(); }
      }

      // If requested, remove the input data from the TES and delete
      if ( UNLIKELY(m_deleteInput) )
      {
        const auto sc = evtSvc()->unregisterObject( data );
        if ( sc.isSuccess() ) { delete data; data = nullptr; }
        else { Error( "Problem unregistering data at "+m_inputName ).ignore(); }
      }
      else
      {
        // Clear the registry address of the unpacked container, to prevent reloading
        if ( m_clearRegistry ) { data->registry()->setAddress( 0 ); }
      }

    } // input OK

    // Count packed output
    if ( inputOK || m_alwaysOutput ) { counter("# PackedData") += pdata->data().size(); }

  } // output OK

  return StatusCode::SUCCESS;
}
