/*****************************************************************************\
* (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration      *
*                                                                             *
* This software is distributed under the terms of the GNU General Public      *
* Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   *
*                                                                             *
* In applying this licence, CERN does not waive the privileges and immunities *
* granted to it by virtue of its status as an Intergovernmental Organization  *
* or submit itself to any jurisdiction.                                       *
\*****************************************************************************/
// Local
#include "UnpackerBaseAlg.h"

using namespace DataPacking;

template <class PACKER>
StatusCode Unpack<PACKER>::initialize() {
  const StatusCode sc = GaudiAlgorithm::initialize();
  if ( sc.isFailure() ) return sc;

  if ( msgLevel( MSG::DEBUG ) )
    debug() << "Input " << m_packedObjects.fullKey() << " Output " << m_objects.fullKey() << "" << endmsg;

  return sc;
}

template <class PACKER>
StatusCode Unpack<PACKER>::execute() {

  // Check to see if the output data already exists.
  const bool outputOK = !m_objects.exist();
  if ( !outputOK && msgLevel( MSG::DEBUG ) ) {
    debug() << "Output already exists at " << m_objects.fullKey() << "" << endmsg;
  }

  // Only proceed if output doesn't exist
  if ( outputOK ) {

    // Check to see if input exists
    const bool inputOK = m_packedObjects.exist();
    if ( !inputOK && msgLevel( MSG::DEBUG ) ) {
      debug() << "Input missing at " << m_packedObjects.fullKey() << "" << endmsg;
    }

    // Pointer to packed data
    typename PACKER::DataVector* data = nullptr;
    if ( inputOK || m_alwaysOutput.value() ) {
      data = m_objects.put( std::make_unique<typename PACKER::DataVector>() );
    }

    // Only fill if all input OK
    if ( inputOK ) {

      // Load the input data
      const auto* pdata = m_packedObjects.get();

      // set the data version
      data->setVersion( pdata->version() );

      // Fill unpacked data
      m_packer.unpack( *pdata, *data );

      if ( msgLevel( MSG::DEBUG ) ) {
        debug() << "Created " << data->size() << " data objects at " << m_objects.fullKey() << endmsg;
        debug() << " Packed Data Version    = " << (unsigned int)pdata->version() << endmsg;
        debug() << " Packed Packing Version = " << (unsigned int)pdata->packingVersion() << endmsg;
        debug() << " Unpacked Data Version  = " << (unsigned int)data->version() << endmsg;
      }

    } // input OK

    // Count packed output
    if ( inputOK || m_alwaysOutput.value() ) counter( "# UnPackedData" ) += data->size();

  } // output OK

  return StatusCode::SUCCESS;
}
