

// Local
#include "UnpackerBaseAlg.h"

using namespace DataPacking;

//=============================================================================
// Standard constructor, initializes variables
//=============================================================================
template < class PACKER >
Unpack<PACKER>::Unpack( const std::string& name,
                        ISvcLocator* pSvcLocator )
  : GaudiAlgorithm ( name , pSvcLocator )
{
  declareProperty( "InputName" , m_inputName  = PACKER::packedLocation()   );
  declareProperty( "OutputName", m_outputName = PACKER::unpackedLocation() );
  declareProperty( "AlwaysCreateOutput",        m_alwaysOutput = false     );
}

template < class PACKER >
Unpack<PACKER>::~Unpack() { }

template < class PACKER >
StatusCode Unpack<PACKER>::initialize()
{
  const StatusCode sc = GaudiAlgorithm::initialize();
  if ( sc.isFailure() ) return sc;

  if( UNLIKELY( msgLevel(MSG::DEBUG) ) ) 
    debug() << "Input '"    << rootInTES() << m_inputName
            << "' Output '" << rootInTES() << m_outputName << "'" << endmsg;

  return sc;
}

template < class PACKER >
StatusCode Unpack<PACKER>::execute()
{

  // Check to see if the output data already exists.
  const bool outputOK = !exist<typename PACKER::DataVector>(m_outputName);
  if ( !outputOK && msgLevel(MSG::DEBUG) )
  {
    debug() << "Output already exists at '" << m_outputName << "'" << endmsg;
  }

  // Only proceed if output doesn't exist
  if ( outputOK )
  {

    // Check to see if input exists
    const bool inputOK = exist<typename PACKER::PackedDataVector>(m_inputName);
    if ( !inputOK && msgLevel(MSG::DEBUG) )
    {
      debug() << "Input missing at '" << m_inputName << "'" << endmsg;
    }

    // Pointer to packed data
    typename PACKER::DataVector * data = NULL;
    if ( inputOK || m_alwaysOutput )
    {
      // make new output data
      data = new typename PACKER::DataVector();
      // give new container to Gaudi
      this->put( data, m_outputName );
    }

    // Only fill if all input OK
    if ( inputOK )
    {

      // Load the input data
      const typename PACKER::PackedDataVector * pdata =
        this->get<typename PACKER::PackedDataVector>(m_inputName);

      // set the data version
      data->setVersion(pdata->version());

      // Packer
      const PACKER packer(*dynamic_cast<GaudiAlgorithm*>(this));

      // Fill unpacked data
      packer.unpack( *pdata, *data );

      if ( msgLevel(MSG::DEBUG) )
      {
        debug() << "Created " << data->size() << " data objects at '" << m_outputName << endmsg;
        debug() << " Packed Version   = " << (int)pdata->version() << endmsg;
        debug() << " Unpacked Version = " << (int)data->version() << endmsg;
      }

    } // input OK

    // Count packed output
    if ( inputOK || m_alwaysOutput )
      counter("# UnPackedData") += data->size();

  } // output OK

  return StatusCode::SUCCESS;
}

