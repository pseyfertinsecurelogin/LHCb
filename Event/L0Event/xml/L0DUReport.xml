<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="L0Event">
    
   <class author="Olivier Deschamps" 
     desc="L0DU summary class" 
     name="L0DUReport"
     id="6004">
      
      <base name="DataObject"/>
      &DataObject;
      <location name = "Default"   place = "Trig/L0/L0DUReport"  />
      <location name = "Emulated"  place = "Emu/L0/L0DUReport"  />

      <import name="sstream" std="TRUE"/>
      <import name="map" std="TRUE"/>
      <import name="utility" std="TRUE"/>
      <import name="string" std="TRUE"/>
      <import name="Event/L0DUConfig"/>

      <copyconstructor/>

      <constructor 
        desc = "Default constructor" 
        initList= "m_tck(0x0000) , m_configuration(NULL)">
        <code>
           clear();
        </code>
      </constructor>

      <constructor 
        desc = "Non-default constructor" 
        argList = "LHCb::L0DUConfig* config"
        initList= "m_configuration(config)"> 
        <code>
          m_tck = config->key();
          clear();
        </code>
      </constructor>
        

      <attribute  desc=" global decision value"    name="decisionValue"      type="int"/>
      <attribute  desc=" Timing Trigger Decision"  name="timingTriggerBit"   type="bool" />
      <attribute  desc=" Force Bit"                name="forceBit"           type="bool" />
      <attribute  desc=" L0DU algorithm configuration Key"         name="tck"        type="unsigned int" />
      <attribute  desc=" L0DU algorithm configuration"             name="configuration"            type="LHCb::L0DUConfig*" setMeth = 'FALSE' nonconstaccessor='TRUE'/>
      <attribute  desc="'channels pre-decision' Summaries   (FCS)" name="channelsPreDecisionSummaries" type="std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;"/>
      <attribute  desc="'Channel decisions' Summaries  (TCS)"      name="channelsDecisionSummaries"type="std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;" />
      <attribute  desc="'Elementary conditions' Summaries (ECS)"   name="conditionsValueSummaries" type="std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;" />
      <attribute  desc=" sum(Et) value over several BX"            name="sumEt"                    type="std::map&lt;int , unsigned int&gt;" getMeth='FALSE'/>
      <attribute  desc=" validity of the report"   name="valid"  type="bool"/>
      <attribute  desc=" L0DU bank version number"   name="bankVersion"  type="int"/>


      <method
        name="clear"
        desc="clear the summaries MAPs"
        type="void">
        <code> 
          m_channelsDecisionSummaries.clear();
          m_channelsPreDecisionSummaries.clear();
          m_conditionsValueSummaries.clear();
          m_sumEt.clear();
          m_decisionValue=0x0;
          m_timingTriggerBit = false;
          m_forceBit = false;
          m_tck = 0x0000;
          m_configuration = NULL;
          m_valid = true;
        </code>
      </method>



      <method
        name="decision"
        desc="decision for a given type "
        argList="int mask=L0DUDecision::Physics"
        type="bool"
        const='TRUE'>
        <code> 
          return (m_decisionValue &amp; mask) != 0 ;
        </code>
      </method>

      <method
        name="addDecisionValue"
        desc="add decision for a given type "
        argList="int decision"
        type="void">
        <code> 
          m_decisionValue |= decision;
        </code>
      </method>



      <method
        name="setConfiguration"
        desc="set the configuration "
        argList="LHCb::L0DUConfig* config"
        type="void">
        <code> 
          m_configuration = config;
          m_tck = config->key();
        </code>
      </method>

      <method
        name="setSumEt"
        desc="set the sumEt value for a given BX "
        argList="int value, int bx=0"
        type="void">
        <code> 
          m_sumEt[bx]=value;
        </code>
      </method>
      <method
        name="sumEt"
        desc="get the sumEt value for a given BX "
        argList="int bx=0"
        type="int"
        const='TRUE'>
        <code> 
          std::map&lt;int , unsigned int&gt;::const_iterator it = m_sumEt.find( bx );
          if(it == m_sumEt.end())return 0;
          return (*it).second;
        </code>
      </method>





      <method
        name="dataDigit"
        argList="const std::string name"
        desc="return L0DU elementary data value (digit) from m_configuration->data()"
        type="unsigned int"
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return 0;
          const LHCb::L0DUElementaryData::Map&amp; data = m_configuration->data();
          LHCb::L0DUElementaryData::Map::const_iterator it = data.find( name );
          if( it == data.end() )return 0;
          return ((*it).second)->digit();
        </code>
      </method>

      <method
        name="dataValue"
        argList="const std::string name"
        desc="return L0DU elementary data value (converted) from m_configuration->data()"
        type="double"
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return 0.;
          const LHCb::L0DUElementaryData::Map&amp; data=m_configuration->data();
          LHCb::L0DUElementaryData::Map::const_iterator it = data.find( name );
          if( it == data.end() )return 0.;
          return ((*it).second)->value();
        </code>
      </method>



      <method  
        name   = "setChannelsPreDecisionSummary"
        desc   = "add a 32-bit L0DUChannels firing summary (FCS)"
        argList= "const unsigned int summary,  unsigned int loc=0, int bx=0"
        type   = "void"> 
        <code>
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,loc);
          m_channelsPreDecisionSummaries[key]=summary;
        </code>
      </method>

      <method  
        name   = "setChannelsDecisionSummary"
        desc   = "add a 32-bit L0DUChannels decision summary (TCS) [== FCS + downscaling decision] "
        argList= "const unsigned int summary,  unsigned int loc=0, int bx=0"
        type   = "void"> 
        <code>
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,loc); 
          m_channelsDecisionSummaries[key]=summary;
        </code>
      </method>
      <method  
        name   = "setConditionsValueSummary"
        desc   = "add a 32-bit Conditions summary"
        argList= "const unsigned int summary,  unsigned int loc=0, int bx=0" 
        type   = "void">
        <code>
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,loc); 
          m_conditionsValueSummaries[key]=summary;
        </code>
      </method>
      <method  
        name   = "setChannelPreDecision"
        desc   = "add a channel pre-decision bit in the FCS summary"
        argList= "std::string name , bool triggered, int  bx=0 "
        type   = "void"> 
        <code>
          if(NULL == m_configuration)return;

          const LHCb::L0DUChannel::Map&amp; channels = m_configuration->channels();
          LHCb::L0DUChannel::Map::const_iterator it = channels.find( name );
          if( it == channels.end() )return;
          unsigned int pos = ((*it).second)-&gt;id();
          unsigned int index = pos / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index); 
          unsigned int summary = m_channelsPreDecisionSummaries[key];
          unsigned int loc   = pos - index *32;
          triggered ? summary |= (1 &lt;&lt; loc) : summary &amp;= ~(1 &lt;&lt; loc);
          m_channelsPreDecisionSummaries[key] = summary;
        </code>
      </method>

      <method  
        name   = "setChannelDecision"
        desc   = "add a decision bit in the TCS "
        argList= "std::string name , bool decision , int  bx=0 "
        type   = "void"> 
        <code>
          if(NULL == m_configuration)return;
          const LHCb::L0DUChannel::Map&amp; channels= m_configuration->channels();
          LHCb::L0DUChannel::Map::const_iterator it = channels.find( name );
          if( it == channels.end() )return;
          unsigned int pos = ((*it).second)-&gt;id();
          unsigned int index = pos / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index); 
          unsigned int summary = m_channelsDecisionSummaries[key];
          unsigned int loc   = pos - index *32;
          decision ? summary |= (1 &lt;&lt; loc) : summary &amp;= ~(1 &lt;&lt; loc);
          m_channelsDecisionSummaries[key] = summary;
        </code>
      </method>

      <method  
        name   = "setConditionValue"
        desc   = "add a onditions bit in the ECS"
        argList= "std::string name , bool decision, int  bx=0 "
        type   = "void">
        <code>
          if(NULL == m_configuration)return;
          const LHCb::L0DUElementaryCondition::Map&amp; conditions = m_configuration->conditions();
          LHCb::L0DUElementaryCondition::Map::const_iterator it = conditions.find( name );
          if( it == conditions.end() )return;
          unsigned int pos = ((*it).second)->reportBit();
          unsigned int index = pos / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index); 
          unsigned int summary = m_conditionsValueSummaries[key];
          unsigned int loc   = pos - index *32;
          decision ? summary |= (1 &lt;&lt; loc) : summary &amp;= ~(1 &lt;&lt; loc);
          m_conditionsValueSummaries[key] = summary;
        </code>
      </method>





      <method
        name="channelsDecisionSummary"
        desc="32-bit summary for the channels decision"
        argList="unsigned int index=0, int bx=0"
        const = "TRUE"
        type="unsigned int">
        <code> 
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index); 
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_channelsDecisionSummaries.find( key );
          if(it == m_channelsDecisionSummaries.end())return 0;
          return (*it).second;
        </code>
      </method>



      <method
        name="channelsPreDecisionSummary"
        desc="32-bit summary for the channels pre-decision"
        argList="unsigned int index=0, int bx=0"
        const = "TRUE"
        type="unsigned int">
        <code> 
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index); 
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_channelsPreDecisionSummaries.find( key );
          if(it == m_channelsPreDecisionSummaries.end())return 0;
          return (*it).second;
        </code>
      </method>

      <method
        name="conditionsValueSummary"
        desc="32-bit summary for the elementary conditions"
        argList="unsigned int index=0, int bx=0"
        const = "TRUE"
        type="unsigned int">
        <code> 
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index);
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_conditionsValueSummaries.find( key );
          if(it == m_conditionsValueSummaries.end())return 0;
          return (*it).second;
        </code>
      </method>



      <method
        name="channelDecision"
        argList="const unsigned int channel, int bx=0"
        desc="return the channel decision by channel number (incl. the downscaling decision)"
        type="bool"
        const="TRUE">
        <code> 
          unsigned int index = channel / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index);
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_channelsDecisionSummaries.find( key );
          if( it == m_channelsDecisionSummaries.end())return 0;
          unsigned int summary = (*it).second;
          unsigned int loc   = channel - index *32;
          return ( 1 &amp; (summary >> loc));
        </code>
      </method>
      <method
        name="channelPreDecision"
        argList="const unsigned int channel, int bx=0"
        desc="return the channel decision by channel number (NOT incl. the downscaling decision)"
        type="bool"
        const="TRUE">
        <code> 
          unsigned int index = channel / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index);
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_channelsPreDecisionSummaries.find(key);
          if( it == m_channelsPreDecisionSummaries.end())return 0;
          unsigned int summary = (*it).second;
          unsigned int loc   = channel - index *32;
          return ( 1 &amp; (summary >> loc));
        </code>
      </method>

      <method
        name="conditionValue"
        argList="const unsigned int condition, int bx=0"
        desc="return the condition value by condition number"
        type="bool"
        const="TRUE">
        <code> 
          unsigned int index = condition / 32;
          std::pair&lt;int,unsigned int&gt;  key = std::make_pair(bx,index);
          std::map&lt;std::pair&lt;int,unsigned int&gt;,unsigned int&gt;::const_iterator it = m_conditionsValueSummaries.find(key);
          if( it == m_conditionsValueSummaries.end())return 0;
          unsigned int summary = (*it).second;
          unsigned int loc   = condition - index *32;
          return ( 1 &amp; (summary >> loc));
        </code>
      </method>



                                                          
      <method
        name="channelPreDecisionByName"
        argList="const std::string name, int bx=0"
        desc="return channel firing by channel name"
        type="bool"
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUChannel::Map&amp; channels= m_configuration->channels();
          LHCb::L0DUChannel::Map::const_iterator it = channels.find( name );
          if( it == channels.end() )return false;
          const unsigned int pos = ((*it).second)->id();
          return channelPreDecision( pos,bx );
        </code>
      </method>
      <method
        name="channelDecisionByName"
        argList="const std::string name, int bx=0"
        desc="return channel decision by channel name"
        type="bool"
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUChannel::Map&amp; channels=m_configuration->channels();
          LHCb::L0DUChannel::Map::const_iterator it = channels.find( name );
          if( it == channels.end() )return false;
          const unsigned int pos = ((*it).second)->id();
          return channelDecision( pos,bx );
        </code>
      </method>
      <method
        name="conditionValueByName"
        argList="const std::string name, int bx=0"
        desc="return condition value by condition name"
        type="bool"
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUElementaryCondition::Map&amp; conditions=m_configuration->conditions();
          LHCb::L0DUElementaryCondition::Map::const_iterator it = conditions.find( name );
          if( it == conditions.end() )return false;
          if( !(it-&gt;second)-&gt;reported() )return false;
          const unsigned int pos = ((*it).second)-&gt;reportBit();
          return conditionValue( pos, bx );
        </code>
      </method>





      <method
        name="channelName"
        argList="const unsigned int channel"
        desc="return channel name by index"
        type="std::string"
        const="TRUE">
        <code> 
          std::string bad = &quot;LHCb::L0DUConfig is missing&quot;;
          if(NULL == m_configuration)return bad;
          const LHCb::L0DUChannel::Map&amp; channels= m_configuration->channels();
          LHCb::L0DUChannel::Map::const_iterator it;
          for(it = channels.begin() ; it != channels.end() ; it++){
           unsigned int id = ((*it).second)->id();
           if( channel == id ) return ((*it).second)->name();
          }          
          bad = &quot; Channel no &quot; ;
          std::ostringstream os(&quot; &quot;);
          os &lt;&lt; channel;
          bad += os.str();
          bad += &quot; is not defined in the loaded configuration - Please check &quot; ;
          return bad;          
        </code>
      </method>
      


      <method
        name="conditionName" 
        argList="const unsigned int cond"
        desc="return condition name by index"
        type="std::string" 
        const="TRUE">
        <code> 
          std::string bad = &quot;LHCb::L0DUConfig is missing&quot;;
          if(NULL == m_configuration)return bad;
          const LHCb::L0DUElementaryCondition::Map&amp; conditions = m_configuration->conditions();
          LHCb::L0DUElementaryCondition::Map::const_iterator it;
          for(it = conditions.begin() ; it != conditions.end() ; it++){
           unsigned int id = ((*it).second)->id();
           if(   cond == id ) return ((*it).second)->name();          
          }
          bad = &quot; Condition no &quot; ;
          std::ostringstream os(&quot;&quot;);
          os &lt;&lt; cond;
          bad += os.str();
          bad += &quot; is not defined in the loaded configuration - Please check &quot; ;
          return bad;
        </code>
      </method>



      <method
        name="decisionFromSummary" 
        argList="int type=L0DUDecision::Physics, int bx=0"
        desc="return the L0 decision (for a given type) evaluated from the ChannelsDecisionSummaries"
        type="bool" 
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUChannel::Map&amp; channels = m_configuration->channels();
          for(LHCb::L0DUChannel::Map::const_iterator it = channels.begin();it!=channels.end();it++){
           LHCb::L0DUChannel* channel = (*it).second;
           if( (channel->decisionType() &amp; type) == 0 )continue;
           if( channelDecision( channel->id(),bx  ) )return true;
          }
          return false;
        </code>
      </method>


      <method
        name="preDecisionFromSummary" 
        argList="int type=L0DUDecision::Physics, int bx=0"
        desc="return the L0 predDecision (for a given type) evaluated from the ChannelsDecisionSummaries"
        type="bool" 
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUChannel::Map&amp; channels = m_configuration->channels();
          for(LHCb::L0DUChannel::Map::const_iterator it = channels.begin();it!=channels.end();it++){
           LHCb::L0DUChannel* channel = (*it).second;
           if( (channel->decisionType() &amp; type) == 0 )continue;
           if( channelPreDecision( channel->id(),bx  ) )return true;
          }
          return false;
        </code>
      </method>




      <method
        name="preDecisionValueFromSummary" 
        argList="int bx=0"
        desc="return the L0 predDecision value evaluated from the ChannelsDecisionSummaries"
        type="bool" 
        const="TRUE">
        <code> 
          int value = 0;
          if(NULL == m_configuration)return false;
          const LHCb::L0DUChannel::Map&amp; channels = m_configuration->channels();
          for(LHCb::L0DUChannel::Map::const_iterator it = channels.begin();it!=channels.end();it++){
           LHCb::L0DUChannel* channel = (*it).second;
           int type =  channel->decisionType();
           if( channelPreDecision( channel->id(),bx  ) )value |= type;
          }
          return value;
        </code>
      </method>






      <method
        name="triggerDecisionByName" 
        argList="std::string name, int bx=0"
        desc="return the L0 decision for any set of channels as defined in the configuration"
        type="bool" 
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUTrigger::Map&amp; triggers = m_configuration->triggers();
          LHCb::L0DUTrigger::Map::const_iterator it = triggers.find( name );
          if( it == triggers.end()){
            if( "L0" == name || "Physics" == name){
              return decisionFromSummary( L0DUDecision::Physics, bx );
            }else if( "Beam1" == name){
              return decisionFromSummary( L0DUDecision::Beam1, bx );
            }else if( "Beam2" == name){
              return decisionFromSummary( L0DUDecision::Beam2, bx );
            }else{
              return false;
           }
          }
          const LHCb::L0DUChannel::Map&amp; channels = (*it).second-&gt;channels();
          for(LHCb::L0DUChannel::Map::const_iterator ic = channels.begin();ic != channels.end();++ic){
           if( channelDecisionByName( (*ic).second-&gt;name(), bx) )return true;
          }
          return false;
        </code>
      </method>

      <method
        name="triggerDecision" 
        argList="unsigned int index, int bx=0"
        desc="return the L0 decision for any set of channels as defined in the configuration"
        type="bool" 
        const="TRUE">
        <code> 
          if(NULL == m_configuration)return false;
          const LHCb::L0DUTrigger::Map&amp; triggers = m_configuration->triggers();
          for(LHCb::L0DUTrigger::Map::const_iterator it = triggers.begin();it != triggers.end();++it){
           if( index == (*it).second-&gt;id() )return triggerDecisionByName( (*it).first, bx  );
          }
          return false;
        </code>
      </method>





    </class>
  </package>
</gdd>
