<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="L0Event">


    <class 
      author="Olivier Deschamps"
      desc="This class represents the L0 processors data sent to L0DU"
      name="L0ProcessorData">

      <base name="KeyedObject&lt;int&gt;"/>
       &KeyedObject;
      <import name="string" std="TRUE"/>

      <location name = "Calo"      place = "Trig/L0/L0DUCaloData"    />
      <location name = "Muon"      place = "Trig/L0/L0DUMuonData"    />
      <location name = "PileUp"    place = "Trig/L0/L0DUPusData"  />
      <location name = "L0Calo"    place = "Trig/L0/L0DUL0CaloData"    />
      <location name = "L0Muon"    place = "Trig/L0/L0DUL0MuonData"    />
      <location name = "L0PileUp"  place = "Trig/L0/L0DUL0PusData"  />
      <location name = "L0DU"      place = "Trig/L0/L0DUData"  />



      <copyconstructor/>
      <typedef
        def    = "Base"
        type   = "KeyedObject&lt;int&gt;"
        desc   = "Shortcut for own base class "
        access = "PROTECTED"
        />


      <constructor 
        argList="L0DUBase::Fiber::Type fiber, unsigned int word"
        desc="Special constructor from 32 bit word" 
        initList="Base ( fiber ), m_wordmap{{0,word}}"
        ><code/></constructor>

      <constructor 
        argList="L0DUBase::Fiber::Type fiber, unsigned int msb , unsigned int lsb"
        desc="Special constructor from  16bit msb + 16bit lsb" 
        initList="Base ( fiber ), m_wordmap{{0,lsb | (msb &lt;&lt; 16 )}}"
        ><code/></constructor>

      <constructor
        desc     = "Default constructor"
        initList="Base ( ), m_wordmap{{0,0x10000}}"
        > <code/> </constructor>

      <attribute
        name = "wordmap"
        desc = "32 bit L0 word produced by the processor (BX mapped) "
        type = "std::map&lt;int,int&gt;" 
        />

      
      <method
        name      = "word"
        argList   = "int bx=0"
        desc      = "get the 32 bit word"
        type      = "unsigned int"
        const     = "FALSE"
        >
        <code>
          if( m_wordmap.find(bx) == m_wordmap.end() )m_wordmap[bx]=0x10000;
          return (unsigned int)m_wordmap[bx];
        </code>
      </method>

      <method
        name      = "setWord"
        argList   = "unsigned int word, int bx=0"
        desc      = "set the 32 bit word"
        type      = "void"
        const     = "FALSE" >
        <code>
          m_wordmap[bx]=word;
        </code>
      </method>

      <method
        name      = "lsb"
        argList   = "int bx=0"
        desc      = "get 16 bits lsb of L0 word"
        type      = "unsigned int"
        const     = "FALSE" >
        <code>
          if( m_wordmap.find(bx) == m_wordmap.end() )m_wordmap[bx]=0x10000;
          return (unsigned int)(m_wordmap[bx] &amp; 0xFFFF);
        </code>
      </method>

      <method
        name      = "msb"
        argList   = "int bx=0"
        desc      = "get  16 bits msb of L0 word"
        type      = "unsigned int"
        const     = "FALSE" >
        <code>
          if( m_wordmap.find(bx) == m_wordmap.end() )m_wordmap[bx]=0x10000;
          return (unsigned int)((m_wordmap[bx] >> 16) &amp; 0xFFFF);
        </code>
      </method>

      <method
        name      = "setWord"
        desc      = "update L0 word from MSB+LSB for a given bx"
        type      = "void"
        const     = "FALSE" 
        argList   = "unsigned int msb , unsigned int lsb,int bx">
        <code>
          if( m_wordmap.find(bx) == m_wordmap.end() )m_wordmap[bx]=0x10000;
          m_wordmap[bx] = lsb | (msb &lt;&lt; 16 );
        </code>
      </method>
      

      <method
        name      = "hasData"
        desc      = "check of data is defined for a given BX"
        type      = "bool"
        argList   = "int bx=0">
        <code>
          return ( m_wordmap.find(bx) != m_wordmap.end() );
        </code>
      </method>
      

      <method
        name      = "bxList"
        desc      = "return a vector of available BXs"
        type      = "std::vector&lt;int&gt;">
        <code>
          std::vector&lt;int&gt; bxs;
          for(std::map&lt;int,int&gt;::iterator ibx=m_wordmap.begin();m_wordmap.end()!=ibx;ibx++){
              bxs.push_back(ibx->first);
          }
          return bxs;
        </code>
      </method>
      

    <import name="Event/L0DUBase"/>
    </class>



  </package>
</gdd>



