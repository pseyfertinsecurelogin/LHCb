<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="L0Event">

    <namespace
      desc="L0DU counter attributes"
      name="L0DUCounter"
      author="O. Deschamps">
      <attribute
        desc="Scale of the downscaling counter" 
        name="Scale" 
        type="static const unsigned int" 
        init="1000"/>
    </namespace>
    
    <class 
      author="Olivier Deschamps"
      desc="This class represents individual L0DU Channel"
      name="L0DUChannel"
      serializers="FALSE">

      <base name="ContainedObject"/>
       &ContainedObject;

      <location name = "Default"   place = "Trig/L0/L0DUChannels" />
      <location name = "Emulated"  place = "Emu/L0/L0DUChannels"  />


      <import name="string" std="TRUE"/>
      <import name="map" std="TRUE"/>
      <import name="Event/L0DUElementaryCondition"/>
      <import name="Event/L0DUCounter"/>

      <typedef def    = "count" type   = "unsigned int" desc   = "counter type" access = "PUBLIC" />
      <typedef def    = "Map" 
        desc   = "std::map Container "
        type   = "std::map&lt;std::string,L0DUChannel* &gt;" 
        access = "PUBLIC"/>

      <copyconstructor/>
      <constructor 
        desc = "non-default constructor"
        argList   = "int id, const std::string name, const count rate, bool enable=true" 
        initList  = "m_id(id),m_name(name),m_rate(rate),m_enable(enable),m_counter(0),m_emulatedDecision(false),m_emulatedTrigger(false),m_emulated(false)">
      </constructor>
      <constructor 
        desc = "default constructor"
        initList  = "m_id(0),m_name(),m_rate(100),m_enable(true),m_counter(0),m_emulatedDecision(false),m_emulatedTrigger(false),m_emulated(false)">
      </constructor>

 
      <attribute name = "id" desc = " L0DU Channel index "  type = "unsigned int" />
      <attribute name = "name" desc = " L0DU Channel name "  type = "std::string" />
      <attribute name = "rate"desc = "Accept rate (%)"    type = "unsigned int" init = "100"/>
      <attribute name = "enable"    desc = "Enable the channel in the global decision"type = "bool" init = "true"/>

      <attribute name = "elementaryConditions" desc = " L0DU Elementary condition" type = "LHCb::L0DUElementaryCondition::Map" />
      <attribute name = "counter"   desc = " counter value" type = "unsigned int" init = "0" />     
      <attribute name = "emulatedDecision"  desc = "L0DU Channel emulated Decision (trigger value + downscaling)"  
                 type = "bool" init = "false" setMeth = "FALSE" getMeth="FALSE"/>  
      <attribute name = "emulatedTrigger"   desc = "L0DU Channel emulated trigger value "   
                 type = "bool" init = "false" setMeth="FALSE" getMeth="FALSE"/>
      <attribute name = "emulated"  desc = "L0DU Channel emulation flag"  type = "bool" init = "false" />

      

      <method name      = "emulatedDecision" desc = "get the channel emulated decision (trigger value + downscaling)" type  = "bool" >
        <code> 
          return emulate()->m_emulatedDecision;
        </code>
      </method>
      <method name      = "emulatedTrigger" desc = "get the channel emulated trigger value" type  = "bool" >
        <code> 
          emulate();
          return emulate()->m_emulatedTrigger;
        </code>
      </method>
      <method name      = "isDownscaled" desc = "return emulatedDecision == emulatedTrigger" type  = "bool" >
        <code>
          return emulatedDecision() == emulatedTrigger();
        </code>
      </method>




      <method name      = "addElementaryCondition" desc = "push_back Elementary Condition"
        type  = "void" argList   = "LHCb::L0DUElementaryCondition* condition">
        <code> m_elementaryConditions[condition->name()]=condition; </code>
      </method>

      <method name      = "resetElementaryConditions" desc = "Clear Elementary Conditions "
        type  = "void" >
        <code> m_elementaryConditions.clear(); </code>
      </method>

      <method name  = "clone" desc = "clone this channel" type  = "LHCb::L0DUChannel*" virtual = "TRUE">
        <code>
          L0DUChannel* channel = new L0DUChannel( *this ); 
          return channel;
        </code>
      </method>


      <method name      = "emulate" desc = "Process Channel emulated Decision" type  = "LHCb::L0DUChannel*" >
      </method>

      <method name  = "description" desc = "L0DUChannel short description" type  = "std::string" ></method>
      <method name  = "summary" desc = "L0DUChannel summary" type  = "std::string" > </method>
      
    </class>



  </package>
</gdd>



