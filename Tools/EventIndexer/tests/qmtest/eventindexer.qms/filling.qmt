<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
  <text>-v</text>
</set></argument>
<argument name="options"><text>
# Options of the test job
from Gaudi.Configuration import *

from Configurables import LHCbApp, EventIndexer, EventIndexerTest__FakeIndexerData as FakeIndexerData
from Configurables import DstConf, UnpackDecReport
DstConf().EnableUnpack = ['Reconstruction', 'Stripping']
decConv = UnpackDecReport("Strip_pPhys_DecReports_Converter")
decConv.InputName = "Strip/pPhys/DecReports"

from Configurables import ApplicationMgr, DataOnDemandSvc
ApplicationMgr().ExtSvc.append(DataOnDemandSvc())

DstConf().EnableUnpack = ['Reconstruction', 'Stripping']


ei = EventIndexer()
#ei.OutputLevel = DEBUG
ei.Stripping = "Strip9876"

EventDataSvc(ForceLeaves=True)

app = ApplicationMgr()
app.EvtSel = "NONE"
app.EvtMax = 20
app.TopAlg = [FakeIndexerData("FakeIndexerData"), ei]

</text></argument>
<argument name="reference"><text>refs/filling.ref</text></argument>
<argument name="use_temp_dir"><enumeral>true</enumeral></argument>
<argument name="validator"><text>
validateWithReference()
# countErrorLines()

from subprocess import Popen, PIPE
root = Popen(['root', '-b', '-n', 'indexer_data.root'],
             stdin=PIPE, stdout=PIPE, stderr=PIPE)
out, err = root.communicate('index->Scan()\n')

result['index_dump'] = result.Quote(out)

findReferenceBlock("""
************************************************************************************************
*    Row   * data.stri * data.stre *  data.lfn * data.rawI * data.appl * data.appl * data.cond *
************************************************************************************************
*        0 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        1 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        2 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        3 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        4 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        5 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        6 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        7 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        8 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*        9 * Strip9876 * FakeStrea * first_fil *           *   Unknown *   Unknown *        {} *
*       10 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       11 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       12 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       13 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       14 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       15 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       16 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       17 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       18 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
*       19 * Strip9876 * OtherStre * second_fi *           *   Unknown *   Unknown *        {} *
************************************************************************************************
""", out, signature_offset=1)
</text></argument>
</extension>
