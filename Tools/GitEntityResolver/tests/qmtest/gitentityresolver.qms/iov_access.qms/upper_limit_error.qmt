<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension/
<!--
    (c) Copyright 2000-2018 CERN for the benefit of the LHCb Collaboration

    This software is distributed under the terms of the GNU General Public
    Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".

    In applying this licence, CERN does not waive the privileges and immunities
    granted to it by virtue of its status as an Intergovernmental Organization
    or submit itself to any jurisdiction.
-->
/en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
<argument name="program"><text>gaudirun.py</text></argument>
<argument name="args"><set>
  <text>-v</text>
  <text>${DETDESCCHECKSROOT}/options/LoadDDDB.py</text>
</set></argument>
<argument name="options"><text>
from Gaudi.Configuration import *
from GitTestOptions import setup
setup(tag='v0', conditions=['/dd/Changing'])

from Configurables import EventClockSvc, FakeEventTime

ecs = EventClockSvc()
ecs.addTool(FakeEventTime, 'EventTimeDecoder')
# tuned from the content of /dd/Changing for tag v0
ecs.EventTimeDecoder.StartTime = 1442403000000000000
ecs.EventTimeDecoder.TimeStep = 18399600000000000

allConfigurables['ToolSvc.GitDDDB'].LimitToLastCommitTime = True

ApplicationMgr(EvtMax=4)

</text></argument>
<argument name="exit_code"><integer>4</integer></argument>
<argument name="validator"><text>
from subprocess import check_output
import os
import re

tag = 'v0'
repository = os.environ['GIT_TEST_REPOSITORY']
commit_id = check_output(['git', 'rev-parse', tag], cwd=repository)
parameter = 0

countErrorLines({'ERROR': 2, 'FATAL':1})

info = dict(repository=repository, tag=tag,
            commit_id=commit_id, short_id=commit_id[:8])

findReferenceBlock('''
ToolSvc.GitDDDB     DEBUG Initializing...
ToolSvc.GitDDDB      INFO opening Git repository '{repository}'
ToolSvc.GitDDDB      INFO using commit '{tag}' corresponding to {commit_id}
ToolSvc.GitDDDB     DEBUG limit validity to commit time: 2016-12-31 23:00:00.0 UTC
ToolSvc.GitDDDB   VERBOSE ServiceLocatorHelper::service: found service IncidentSvc
ToolSvc.GitDDDB     DEBUG registering to IncidentSvc
ToolSvc.GitDDDB     DEBUG Successfully initialized.
'''.format(**info),
id='GitEntityResolver.initialization')

findReferenceBlock('''
LoadDDDB             INFO Database {repository} tag {tag}[{short_id}]
'''.format(**info),
id='reported_tag')

# deal with an inconsistency fixed in https://gitlab.cern.ch/gaudi/Gaudi/merge_requests/514
ref = '''
UpdateManagerSvc    ERROR ToolSvc.GitDDDB \t Database not up-to-date. Latest known update is at 2016-12-31 23:00:00.0 UTC, event time is 2017-06-16 08:30:00.0 UTC\t StatusCode=FAILURE
UpdateManagerSvc    FATAL ***** The update failed. I schedule a stop of the run *****
'''
if 'DDDB\tDatabase' in stdout:
    ref = ref.replace('DDDB \t Database', 'DDDB\tDatabase')
findReferenceBlock(ref, id='update_failure')

</text></argument>
<argument name="prerequisites"><set>
  <tuple><text>gitentityresolver.prepare</text><enumeral>PASS</enumeral></tuple>
</set></argument>
<argument name="use_temp_dir"><enumeral>true</enumeral></argument>
</extension>
